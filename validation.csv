,text
0,"<|endoftext|>send a signal `signal.SIGUSR1` to the current process: os.kill(os.getpid(), signal.SIGUSR1)<|endoftext|>"
1,<|endoftext|>decode a hex string '4a4b4c' to UTF-8.: bytes.fromhex('4a4b4c').decode('utf-8')<|endoftext|>
2,<|endoftext|>check if all elements in list `myList` are identical: all(x == myList[0] for x in myList)<|endoftext|>
3,"<|endoftext|>format number of spaces between strings `Python`, `:` and `Very Good` to be `20`: print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))<|endoftext|>"
4,
5,"<|endoftext|>get rid of None values in dictionary `kwargs`: res = {k: v for k, v in list(kwargs.items()) if v is not None}<|endoftext|>"
6,"<|endoftext|>get rid of None values in dictionary `kwargs`: res = dict((k, v) for k, v in kwargs.items() if v is not None)<|endoftext|>"
7,"<|endoftext|>capture final output of a chain of system commands `ps -ef | grep something | wc -l`: subprocess.check_output('ps -ef | grep something | wc -l', shell=True)<|endoftext|>"
8,"<|endoftext|>concatenate a list of strings `['a', 'b', 'c']`: """""""""""".join(['a', 'b', 'c'])<|endoftext|>"
9,<|endoftext|>find intersection data between series `s1` and series `s2`: pd.Series(list(set(s1).intersection(set(s2))))<|endoftext|>
10,<|endoftext|>sending http headers to `client`: client.send('HTTP/1.0 200 OK\r\n')<|endoftext|>
11,"<|endoftext|>Format a datetime string `when` to extract date only: then = datetime.datetime.strptime(when, '%Y-%m-%d').date()<|endoftext|>"
12,<|endoftext|>split a multi-line string `inputString` into separate strings: inputString.split('\n')<|endoftext|>
13,<|endoftext|>Split a multi-line string ` a \n b \r\n c ` by new line character `\n`: ' a \n b \r\n c '.split('\n')<|endoftext|>
14,"<|endoftext|>concatenate elements of list `b` by a colon "":"": """""":"""""".join(str(x) for x in b)<|endoftext|>"
15,<|endoftext|>get the first object from a queryset in django model `Entry`: Entry.objects.filter()[:1].get()<|endoftext|>
16,<|endoftext|>Calculate sum over all rows of 2D numpy array: a.sum(axis=1)<|endoftext|>
17,<|endoftext|>enable warnings using action 'always': warnings.simplefilter('always')<|endoftext|>
18,"<|endoftext|>concatenate items of list `l` with a space ' ': print(' '.join(map(str, l)))<|endoftext|>"
19,"<|endoftext|>run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable: subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])<|endoftext|>"
20,
21,"<|endoftext|>convert a string `my_string` with dot and comma into a float number `my_float`: my_float = float(my_string.replace(',', ''))<|endoftext|>"
22,"<|endoftext|>convert a string `123,456.908` with dot and comma into a floating number: float('123,456.908'.replace(',', ''))<|endoftext|>"
23,<|endoftext|>set pythonpath in python script.: sys.path.append('/path/to/whatever')<|endoftext|>
24,"<|endoftext|>split string 'Words, words, words.' using a regex '(\\W+)': re.split('(\\W+)', 'Words, words, words.')<|endoftext|>"
25,"<|endoftext|>open a file `Output.txt` in append mode: file = open('Output.txt', 'a')<|endoftext|>"
26,"<|endoftext|>download a file ""http://www.example.com/songs/mp3.mp3"" over HTTP and save to ""mp3.mp3"": urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')<|endoftext|>"
27,"<|endoftext|>download a file `url` over HTTP and save to `file_name`: u = urllib.request.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders('Content-Length')[0])
print(('Downloading: %s Bytes: %s' % (file_name, file_size)))
file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if (not buffer):
        break
    file_size_dl += len(buffer)
    f.write(buffer)
    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))
    status = (status + (chr(8) * (len(status) + 1)))
    print(status, end=' ')
f.close()<|endoftext|>"
28,"<|endoftext|>download a file 'http://www.example.com/' over HTTP: response = urllib.request.urlopen('http://www.example.com/')
html = response.read()<|endoftext|>"
29,<|endoftext|>download a file `url` over HTTP: r = requests.get(url)<|endoftext|>
30,"<|endoftext|>download a file `url` over HTTP and save to ""10MB"": response = requests.get(url, stream=True)
with open('10MB', 'wb') as handle:
    for data in tqdm(response.iter_content()):
        handle.write(data)<|endoftext|>"
31,"<|endoftext|>argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`: parser.add_argument('--version', action='version', version='%(prog)s 2.0')<|endoftext|>"
32,<|endoftext|>remove key 'c' from dictionary `d`: {i: d[i] for i in d if i != 'c'}<|endoftext|>
33,"<|endoftext|>Create new DataFrame object by merging columns ""key"" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively: pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))<|endoftext|>"
34,"<|endoftext|>Split a string `s` by space with `4` splits: s.split(' ', 4)<|endoftext|>"
35,<|endoftext|>read keyboard-input: input('Enter your input:')<|endoftext|>
36,<|endoftext|>enable debug mode on Flask application `app`: app.run(debug=True)<|endoftext|>
37,"<|endoftext|>python save list `mylist` to file object 'save.txt': pickle.dump(mylist, open('save.txt', 'wb'))<|endoftext|>"
38,"<|endoftext|>Multiply a matrix `P` with a 3d tensor `T` in scipy: scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)<|endoftext|>"
39,"<|endoftext|>Create 3d array of zeroes of size `(3,3,3)`: numpy.zeros((3, 3, 3))<|endoftext|>"
40,"<|endoftext|>cut off the last word of a sentence `content`: """""" """""".join(content.split(' ')[:-1])<|endoftext|>"
41,"<|endoftext|>convert scalar `x` to array: x = np.asarray(x).reshape(1, -1)[(0), :]<|endoftext|>"
42,"<|endoftext|>sum all elements of nested list `L`: sum(sum(i) if isinstance(i, list) else i for i in L)<|endoftext|>"
43,"<|endoftext|>convert hex string '470FC614' to a float number: struct.unpack('!f', '470FC614'.decode('hex'))[0]<|endoftext|>"
44,"<|endoftext|>Multiple each value by `2` for all keys in a dictionary `my_dict`: my_dict.update((x, y * 2) for x, y in list(my_dict.items()))<|endoftext|>"
45,"<|endoftext|>running bash script 'sleep.sh': subprocess.call('sleep.sh', shell=True)<|endoftext|>"
46,"<|endoftext|>Join elements of list `l` with a comma `,`: """""","""""".join(l)<|endoftext|>"
47,"<|endoftext|>make a comma-separated string from a list `myList`: myList = ','.join(map(str, myList))<|endoftext|>"
48,<|endoftext|>reverse the list that contains 1 to 10: list(reversed(list(range(10))))<|endoftext|>
49,"<|endoftext|>remove substring 'bag,' from a string 'lamp, bag, mirror': print('lamp, bag, mirror'.replace('bag,', ''))<|endoftext|>"
50,"<|endoftext|>Reverse the order of words, delimited by `.`, in string `s`: """"""."""""".join(s.split('.')[::-1])<|endoftext|>"
51,<|endoftext|>convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f': datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')<|endoftext|>
52,"<|endoftext|>parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S': time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))<|endoftext|>"
53,<|endoftext|>get the date 7 days before the current date: (datetime.datetime.now() - datetime.timedelta(days=7)).date()<|endoftext|>
54,<|endoftext|>sum elements at index `column` of each list in list `data`: print(sum(row[column] for row in data))<|endoftext|>
55,<|endoftext|>sum columns of a list `array`: [sum(row[i] for row in array) for i in range(len(array[0]))]<|endoftext|>
56,"<|endoftext|>encode binary string 'your string' to base64 code: base64.b64encode(bytes('your string', 'utf-8'))<|endoftext|>"
57,"<|endoftext|>combine list of dictionaries `dicts` with the same keys in each list to a single dictionary: dict((k, [d[k] for d in dicts]) for k in dicts[0])<|endoftext|>"
58,<|endoftext|>Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`: {k: [d[k] for d in dicts] for k in dicts[0]}<|endoftext|>
59,
60,"<|endoftext|>identify duplicate values in list `mylist`: [k for k, v in list(Counter(mylist).items()) if v > 1]<|endoftext|>"
61,"<|endoftext|>Insert directory 'apps' into directory `__file__`: sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))<|endoftext|>"
62,"<|endoftext|>modify sys.path for python module `subdir`: sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))<|endoftext|>"
63,"<|endoftext|>Insert a 'None' value into a SQLite3 table.: db.execute(""INSERT INTO present VALUES('test2', ?, 10)"", (None,))<|endoftext|>"
64,<|endoftext|>flatten list `list_of_menuitems`: [image for menuitem in list_of_menuitems for image in menuitem]<|endoftext|>
65,<|endoftext|>append elements of a set `b` to a list `a`: a.extend(b)<|endoftext|>
66,
67,"<|endoftext|>write the data of dataframe `df` into text file `np.txt`: np.savetxt('c:\\data\\np.txt', df.values, fmt='%d')<|endoftext|>"
68,"<|endoftext|>write content of DataFrame `df` into text file 'c:\\data\\pandas.txt': df.to_csv('c:\\data\\pandas.txt', header=None, index=None, sep=' ', mode='a')<|endoftext|>"
69,<|endoftext|>Split a string `x` by last occurrence of character `-`: print(x.rpartition('-')[0])<|endoftext|>
70,"<|endoftext|>get the last part of a string before the character '-': print(x.rsplit('-', 1)[0])<|endoftext|>"
71,"<|endoftext|>upload file using FTP: ftp.storlines('STOR ' + filename, open(filename, 'r'))<|endoftext|>"
72,"<|endoftext|>add one to the hidden web element with id 'XYZ' with selenium python script: browser.execute_script(""document.getElementById('XYZ').value+='1'"")<|endoftext|>"
73,"<|endoftext|>create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`: np.maximum([2, 3, 4], [1, 5, 2])<|endoftext|>"
74,<|endoftext|>print a list `l` and move first 3 elements to the end of the list: print(l[3:] + l[:3])<|endoftext|>
75,"<|endoftext|>loop over files in directory '.': for fn in os.listdir('.'):
    if os.path.isfile(fn):
        pass<|endoftext|>"
76,"<|endoftext|>loop over files in directory `source`: for (root, dirs, filenames) in os.walk(source):
    for f in filenames:
        pass<|endoftext|>"
77,<|endoftext|>create a random list of integers: [int(1000 * random.random()) for i in range(10000)]<|endoftext|>
78,
79,"<|endoftext|>Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`: db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())<|endoftext|>"
80,<|endoftext|>filter rows in pandas starting with alphabet 'f' using regular expression.: df.b.str.contains('^f')<|endoftext|>
81,<|endoftext|>print a 2 dimensional list `tab` as a table with delimiters: print('\n'.join('\t'.join(str(col) for col in row) for row in tab))<|endoftext|>
82,"<|endoftext|>pandas: delete rows in dataframe `df` based on multiple columns values: df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()<|endoftext|>"
83,"<|endoftext|>format the variables `self.goals` and `self.penalties` using string formatting: """"""({:d} goals, ${:d})"""""".format(self.goals, self.penalties)<|endoftext|>"
84,"<|endoftext|>format string ""({} goals, ${})"" with variables `goals` and `penalties`: """"""({} goals, ${})"""""".format(self.goals, self.penalties)<|endoftext|>"
85,"<|endoftext|>format string ""({0.goals} goals, ${0.penalties})"": """"""({0.goals} goals, ${0.penalties})"""""".format(self)<|endoftext|>"
86,<|endoftext|>convert list of lists `L` to list of integers: [int(''.join(str(d) for d in x)) for x in L]<|endoftext|>
87,<|endoftext|>combine elements of each list in list `L` into digits of a single integer: [''.join(str(d) for d in x) for x in L]<|endoftext|>
88,<|endoftext|>convert a list of lists `L` to list of integers: L = [int(''.join([str(y) for y in x])) for x in L]<|endoftext|>
89,<|endoftext|>write the elements of list `lines` concatenated by special character '\n' to file `myfile`: myfile.write('\n'.join(lines))<|endoftext|>
90,"<|endoftext|>removing an element from a list based on a predicate 'X' or 'N': [x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]<|endoftext|>"
91,"<|endoftext|>Remove duplicate words from a string `text` using regex: text = re.sub('\\b(\\w+)( \\1\\b)+', '\\1', text)<|endoftext|>"
92,<|endoftext|>count non zero values in each column in pandas data frame: df.astype(bool).sum(axis=1)<|endoftext|>
93,"<|endoftext|>search for string that matches regular expression pattern '(?<!Distillr)\\\\AcroTray\\.exe' in string 'C:\\SomeDir\\AcroTray.exe': re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')<|endoftext|>"
94,"<|endoftext|>split string 'QH QD JC KD JS' into a list on white spaces: """"""QH QD JC KD JS"""""".split()<|endoftext|>"
95,"<|endoftext|>search for occurrences of regex pattern '>.*<' in xml string `line`: print(re.search('>.*<', line).group(0))<|endoftext|>"
96,"<|endoftext|>erase all the contents of a file `filename`: open(filename, 'w').close()<|endoftext|>"
97,"<|endoftext|>convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f': datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')<|endoftext|>"
98,"<|endoftext|>find the index of a list with the first element equal to '332' within the list of lists `thelist`: [index for index, item in enumerate(thelist) if item[0] == '332']<|endoftext|>"
99,"<|endoftext|>lower a string `text` and remove non-alphanumeric characters aside from space: re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()<|endoftext|>"
100,"<|endoftext|>remove all non-alphanumeric characters except space from a string `text` and lower it: re.sub('(?!\\s)[\\W_]', '', text).lower().strip()<|endoftext|>"
101,"<|endoftext|>subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.: plt.plot(x, y, label='H\u2082O')<|endoftext|>"
102,"<|endoftext|>subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.: plt.plot(x, y, label='$H_2O$')<|endoftext|>"
103,<|endoftext|>loop over a list `mylist` if sublists length equals 3: [x for x in mylist if len(x) == 3]<|endoftext|>
104,<|endoftext|>initialize a list `lst` of 100 objects Object(): lst = [Object() for _ in range(100)]<|endoftext|>
105,<|endoftext|>create list `lst` containing 100 instances of object `Object`: lst = [Object() for i in range(100)]<|endoftext|>
106,<|endoftext|>get the content of child tag with`href` attribute whose parent has css `someclass`: self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')<|endoftext|>
107,"<|endoftext|>joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes: df1.merge(df2, on='Date_Time')<|endoftext|>"
108,"<|endoftext|>use `%s` operator to print variable values `str1` inside a string: 'first string is: %s, second one is: %s' % (str1, 'geo.tif')<|endoftext|>"
109,
110,"<|endoftext|>check if directory `directory ` exists and create it if necessary: if (not os.path.exists(directory)):
    os.makedirs(directory)<|endoftext|>"
111,"<|endoftext|>check if a directory `path` exists and create it if necessary: try:
    os.makedirs(path)
except OSError:
    if (not os.path.isdir(path)):
        raise<|endoftext|>"
112,<|endoftext|>check if a directory `path` exists and create it if necessary: distutils.dir_util.mkpath(path)<|endoftext|>
113,"<|endoftext|>check if a directory `path` exists and create it if necessary: try:
    os.makedirs(path)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise<|endoftext|>"
114,"<|endoftext|>Replace a separate word 'H3' by 'H1' in a string 'text': re.sub('\\bH3\\b', 'H1', text)<|endoftext|>"
115,"<|endoftext|>substitute ASCII letters in string 'aas30dsa20' with empty string '': re.sub('\\D', '', 'aas30dsa20')<|endoftext|>"
116,"<|endoftext|>get digits only from a string `aas30dsa20` using lambda function: """""""""""".join([x for x in 'aas30dsa20' if x.isdigit()])<|endoftext|>"
117,"<|endoftext|>access a tag called ""name"" in beautifulsoup `soup`: print(soup.find('name').string)<|endoftext|>"
118,"<|endoftext|>get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`: records = dict((record['_id'], record) for record in cursor)<|endoftext|>"
119,"<|endoftext|>Create new matrix object  by concatenating data from matrix A and matrix B: np.concatenate((A, B))<|endoftext|>"
120,"<|endoftext|>concat two matrices `A` and `B` in numpy: np.vstack((A, B))<|endoftext|>"
121,<|endoftext|>Get the characters count in a file `filepath`: os.stat(filepath).st_size<|endoftext|>
122,"<|endoftext|>count the occurrences of item ""a"" in list `l`: l.count('a')<|endoftext|>"
123,<|endoftext|>count the occurrences of items in list `l`: Counter(l)<|endoftext|>
124,"<|endoftext|>count the occurrences of items in list `l`: [[x, l.count(x)] for x in set(l)]<|endoftext|>"
125,"<|endoftext|>count the occurrences of items in list `l`: dict(((x, l.count(x)) for x in set(l)))<|endoftext|>"
126,"<|endoftext|>count the occurrences of item ""b"" in list `l`: l.count('b')<|endoftext|>"
127,"<|endoftext|>copy file `srcfile` to directory `dstdir`: shutil.copy(srcfile, dstdir)<|endoftext|>"
128,"<|endoftext|>find the key associated with the largest value in dictionary `x` whilst key is non-zero value: max(k for k, v in x.items() if v != 0)<|endoftext|>"
129,"<|endoftext|>get the largest key whose not associated with value of 0 in dictionary `x`: (k for k, v in x.items() if v != 0)<|endoftext|>"
130,"<|endoftext|>get the largest key in a dictionary `x` with non-zero value: max(k for k, v in x.items() if v != 0)<|endoftext|>"
131,<|endoftext|>Put the curser at beginning of the file: file.seek(0)<|endoftext|>
132,"<|endoftext|>combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`: df['c'] = np.where(df['a'].isnull, df['b'], df['a'])<|endoftext|>"
133,<|endoftext|>remove key 'ele' from dictionary `d`: del d['ele']<|endoftext|>
134,<|endoftext|>Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years: MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))<|endoftext|>
135,<|endoftext|>merge list `['it']` and list `['was']` and list `['annoying']` into one list: ['it'] + ['was'] + ['annoying']<|endoftext|>
136,<|endoftext|>increment a value with leading zeroes in a number `x`: str(int(x) + 1).zfill(len(x))<|endoftext|>
137,<|endoftext|>check if a pandas dataframe `df`'s index is sorted: all(df.index[:-1] <= df.index[1:])<|endoftext|>
138,<|endoftext|>Convert tuple `t` to list: list(t)<|endoftext|>
139,<|endoftext|>Convert list `t` to tuple: tuple(l)<|endoftext|>
140,"<|endoftext|>Convert tuple `level1` to list: level1 = map(list, level1)<|endoftext|>"
141,"<|endoftext|>send the output of pprint object `dataobject` to file `logFile`: pprint.pprint(dataobject, logFile)<|endoftext|>"
142,<|endoftext|>get index of rows in column 'BoolCol': df.loc[df['BoolCol']]<|endoftext|>
143,<|endoftext|>Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True: df.iloc[np.flatnonzero(df['BoolCol'])]<|endoftext|>
144,<|endoftext|>get list of indexes of rows where column 'BoolCol' values match True: df[df['BoolCol'] == True].index.tolist()<|endoftext|>
145,<|endoftext|>get index of rows in dataframe `df` which column 'BoolCol' matches value True: df[df['BoolCol']].index.tolist()<|endoftext|>
146,<|endoftext|>change working directory to the directory `owd`: os.chdir(owd)<|endoftext|>
147,"<|endoftext|>insert data from a string `testfield` to sqlite db `c`: c.execute(""INSERT INTO test VALUES (?, 'bar')"", (testfield,))<|endoftext|>"
148,"<|endoftext|>decode string ""\\x89\\n"" into a normal string: """"""\\x89\\n"""""".decode('string_escape')<|endoftext|>"
149,<|endoftext|>convert a raw string `raw_string` into a normal string: raw_string.decode('string_escape')<|endoftext|>
150,<|endoftext|>convert a raw string `raw_byte_string` into a normal string: raw_byte_string.decode('unicode_escape')<|endoftext|>
151,"<|endoftext|>split a string `s` with into all strings of repeated characters: [m.group(0) for m in re.finditer('(\\d)\\1*', s)]<|endoftext|>"
152,"<|endoftext|>scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none: plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')<|endoftext|>"
153,"<|endoftext|>do a scatter plot with empty circles: plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')<|endoftext|>"
154,"<|endoftext|>remove a div with a id `main-content` using beautifulsoup: soup.find('div', id='main-content').decompose()<|endoftext|>"
155,<|endoftext|>filter rows containing key word `ball` in column `ids`: df[df['ids'].str.contains('ball')]<|endoftext|>
156,"<|endoftext|>convert index at level 0 into a column in dataframe `df`: df.reset_index(level=0, inplace=True)<|endoftext|>"
157,<|endoftext|>Add indexes in a data frame `df` to a column `index1`: df['index1'] = df.index<|endoftext|>
158,"<|endoftext|>convert pandas index in a dataframe to columns: df.reset_index(level=['tick', 'obs'])<|endoftext|>"
159,<|endoftext|>Get reverse of list items from list 'b' using extended slicing: [x[::-1] for x in b]<|endoftext|>
160,"<|endoftext|>join each element in array `a` with element at the same index in array `b` as a tuple: np.array([zip(x, y) for x, y in zip(a, b)])<|endoftext|>"
161,"<|endoftext|>zip two 2-d arrays `a` and `b`: np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)<|endoftext|>"
162,"<|endoftext|>convert list `list_of_ints` into a comma separated string: """""","""""".join([str(i) for i in list_of_ints])<|endoftext|>"
163,"<|endoftext|>Send a post request with raw data `DATA` and basic authentication with `username` and `password`: requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))<|endoftext|>"
164,"<|endoftext|>Find last occurrence of character '}' in string ""abcd}def}"": 'abcd}def}'.rfind('}')<|endoftext|>"
165,"<|endoftext|>Iterate ove list `[1, 2, 3]` using list comprehension: print([item for item in [1, 2, 3]])<|endoftext|>"
166,"<|endoftext|>extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples: [(x['x'], x['y']) for x in d]<|endoftext|>"
167,<|endoftext|>get the filename without the extension from file 'hemanth.txt': print(os.path.splitext(os.path.basename('hemanth.txt'))[0])<|endoftext|>
168,"<|endoftext|>create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it: dict(x[i:i + 2] for i in range(0, len(x), 2))<|endoftext|>"
169,"<|endoftext|>create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`: values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])<|endoftext|>"
170,<|endoftext|>select rows in a dataframe `df` column 'closing_price' between two values 99 and 101: df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]<|endoftext|>
171,"<|endoftext|>replace all occurences of newlines `\n` with `<br>` in dataframe `df`: df.replace({'\n': '<br>'}, regex=True)<|endoftext|>"
172,"<|endoftext|>replace all occurrences of a string `\n` by string `<br>` in a pandas data frame `df`: df.replace({'\n': '<br>'}, regex=True)<|endoftext|>"
173,"<|endoftext|>create a list containing each two adjacent letters in string `word` as its elements: [(x + y) for x, y in zip(word, word[1:])]<|endoftext|>"
174,"<|endoftext|>Get a list of pairs from a string `word` using lambda function: list(map(lambda x, y: x + y, word[:-1], word[1:]))<|endoftext|>"
175,"<|endoftext|>extract a url from a string `myString`: print(re.findall('(https?://[^\\s]+)', myString))<|endoftext|>"
176,"<|endoftext|>extract a url from a string `myString`: print(re.search('(?P<url>https?://[^\\s]+)', myString).group('url'))<|endoftext|>"
177,"<|endoftext|>remove all special characters, punctuation and spaces from a string `mystring` using regex: re.sub('[^A-Za-z0-9]+', '', mystring)<|endoftext|>"
178,"<|endoftext|>create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01': pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)<|endoftext|>"
179,"<|endoftext|>Create multidimensional array `matrix` with 3 rows and 2 columns in python: matrix = [[a, b], [c, d], [e, f]]<|endoftext|>"
180,"<|endoftext|>replace spaces with underscore: mystring.replace(' ', '_')<|endoftext|>"
181,<|endoftext|>get an absolute file path of file 'mydir/myfile.txt': os.path.abspath('mydir/myfile.txt')<|endoftext|>
182,"<|endoftext|>split string `my_string` on white spaces: """""" """""".join(my_string.split())<|endoftext|>"
183,<|endoftext|>get filename without extension from file `filename`: os.path.splitext(filename)[0]<|endoftext|>
184,"<|endoftext|>get a list containing the sum of each element `i` in list `l` plus the previous elements: [sum(l[:i]) for i, _ in enumerate(l)]<|endoftext|>"
185,"<|endoftext|>split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result: """"""Docs/src/Scripts/temp"""""".replace('/', '/\x00/').split('\x00')<|endoftext|>"
186,<|endoftext|>shuffle columns of an numpy array 'r': np.random.shuffle(np.transpose(r))<|endoftext|>
187,<|endoftext|>copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df': df['D'] = df['B']<|endoftext|>
188,<|endoftext|>find a value within nested json 'data' where the key inside another key 'B' is unknown.: list(data['A']['B'].values())[0]['maindata'][0]['Info']<|endoftext|>
189,<|endoftext|>check characters of string `string` are true predication of function `predicate`: all(predicate(x) for x in string)<|endoftext|>
190,<|endoftext|>determine number of files on a drive with python: os.statvfs('/').f_files - os.statvfs('/').f_ffree<|endoftext|>
191,
192,"<|endoftext|>convert string `user_input` into a list of integers `user_list`: user_list = [int(number) for number in user_input.split(',')]<|endoftext|>"
193,"<|endoftext|>Get a list of integers by splitting  a string `user` with comma: [int(s) for s in user.split(',')]<|endoftext|>"
194,
195,"<|endoftext|>sort a list of objects `ut`, based on a function `cmpfun` in descending order: ut.sort(key=cmpfun, reverse=True)<|endoftext|>"
196,"<|endoftext|>reverse list `ut` based on the `count` attribute of each object: ut.sort(key=lambda x: x.count, reverse=True)<|endoftext|>"
197,"<|endoftext|>sort a list of objects `ut` in reverse order by their `count` property: ut.sort(key=lambda x: x.count, reverse=True)<|endoftext|>"
198,<|endoftext|>click a href button 'Send' with selenium: driver.find_element_by_partial_link_text('Send').click()<|endoftext|>
199,<|endoftext|>click a href button having text `Send InMail` with selenium: driver.findElement(By.linkText('Send InMail')).click()<|endoftext|>
200,<|endoftext|>click a href button with text 'Send InMail' with selenium: driver.find_element_by_link_text('Send InMail').click()<|endoftext|>
201,<|endoftext|>cast an int `i` to a string and concat to string 'ME': 'ME' + str(i)<|endoftext|>
202,
203,"<|endoftext|>prepend the line '#test firstline\n' to the contents of file 'infile' and save as the file 'outfile': open('outfile', 'w').write('#test firstline\n' + open('infile').read())<|endoftext|>"
204,"<|endoftext|>sort a list `l` by length of value in tuple: l.sort(key=lambda t: len(t[1]), reverse=True)<|endoftext|>"
205,"<|endoftext|>split string `s` by words that ends with 'd': re.findall('\\b(\\w+)d\\b', s)<|endoftext|>"
206,"<|endoftext|>return `True` if string `foobarrrr` contains regex `ba[rzd]`: bool(re.search('ba[rzd]', 'foobarrrr'))<|endoftext|>"
207,<|endoftext|>Removing duplicates in list `t`: list(set(t))<|endoftext|>
208,<|endoftext|>Removing duplicates in list `source_list`: list(set(source_list))<|endoftext|>
209,<|endoftext|>Removing duplicates in list `abracadabra`: list(OrderedDict.fromkeys('abracadabra'))<|endoftext|>
210,<|endoftext|>Convert array `a` into a list: numpy.array(a).reshape(-1).tolist()<|endoftext|>
211,<|endoftext|>Convert the first row of numpy matrix `a` to a list: numpy.array(a)[0].tolist()<|endoftext|>
212,"<|endoftext|>In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`: print(soup.find(text='Address:').findNext('td').contents[0])<|endoftext|>"
213,"<|endoftext|>convert elements of each tuple in list `l` into a string  separated by character `@`: """""" """""".join([('%d@%d' % t) for t in l])<|endoftext|>"
214,"<|endoftext|>convert each tuple in list `l` to a string with '@' separating the tuples' elements: """""" """""".join([('%d@%d' % (t[0], t[1])) for t in l])<|endoftext|>"
215,<|endoftext|>get the html from the current web page of a Selenium driver: driver.execute_script('return document.documentElement.outerHTML;')<|endoftext|>
216,"<|endoftext|>Get all matches with regex pattern `\\d+[xX]` in list of string `teststr`: [i for i in teststr if re.search('\\d+[xX]', i)]<|endoftext|>"
217,"<|endoftext|>select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`: df['A'][(df['B'] > 50) & (df['C'] == 900)]<|endoftext|>"
218,<|endoftext|>Sort dictionary `o` in ascending order based on its keys and items: sorted(o.items())<|endoftext|>
219,<|endoftext|>get sorted list of keys of dict `d`: sorted(d)<|endoftext|>
220,
221,"<|endoftext|>convert string ""1"" into integer: int('1')<|endoftext|>"
222,<|endoftext|>function to convert strings into integers: int()<|endoftext|>
223,"<|endoftext|>convert items in `T1` to integers: T2 = [map(int, x) for x in T1]<|endoftext|>"
224,<|endoftext|>call a shell script `./test.sh` using subprocess: subprocess.call(['./test.sh'])<|endoftext|>
225,<|endoftext|>call a shell script `notepad` using subprocess: subprocess.call(['notepad'])<|endoftext|>
226,"<|endoftext|>combine lists `l1` and `l2`  by alternating their elements: [val for pair in zip(l1, l2) for val in pair]<|endoftext|>"
227,<|endoftext|>encode string 'data to be encoded': encoded = base64.b64encode('data to be encoded')<|endoftext|>
228,<|endoftext|>encode a string `data to be encoded` to `ascii` encoding: encoded = 'data to be encoded'.encode('ascii')<|endoftext|>
229,"<|endoftext|>parse tab-delimited CSV file 'text.txt' into a list: lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\t'))<|endoftext|>"
230,"<|endoftext|>Get attribute `my_str` of object `my_object`: getattr(my_object, my_str)<|endoftext|>"
231,"<|endoftext|>group a list of dicts `LD` into one dict by key: print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))<|endoftext|>"
232,
233,"<|endoftext|>convert unicode string u""{'code1':1,'code2':1}"" into dictionary: d = ast.literal_eval(""{'code1':1,'code2':1}"")<|endoftext|>"
234,<|endoftext|>find all words in a string `mystring` that start with the `$` sign: [word for word in mystring.split() if word.startswith('$')]<|endoftext|>
235,"<|endoftext|>remove any url within string `text`: text = re.sub('^https?:\\/\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)<|endoftext|>"
236,"<|endoftext|>replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros: np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)<|endoftext|>"
237,"<|endoftext|>calculate mean across dimension in a 2d array `a`: np.mean(a, axis=1)<|endoftext|>"
238,"<|endoftext|>running r script '/pathto/MyrScript.r' from python: subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])<|endoftext|>"
239,"<|endoftext|>run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r': subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)<|endoftext|>"
240,<|endoftext|>add a header to a csv file: writer.writeheader()<|endoftext|>
241,"<|endoftext|>replacing nan in the dataframe `df` with row average: df.fillna(df.mean(axis=1), axis=1)<|endoftext|>"
242,"<|endoftext|>Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S': time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))<|endoftext|>"
243,"<|endoftext|>Call a base class's class method `do` from derived class `Derived`: super(Derived, cls).do(a)<|endoftext|>"
244,"<|endoftext|>selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1: a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]<|endoftext|>"
245,"<|endoftext|>separate words delimited by one or more spaces into a list: re.split(' +', 'hello world sample text')<|endoftext|>"
246,"<|endoftext|>length of longest element in list `words`: len(max(words, key=len))<|endoftext|>"
247,<|endoftext|>get the value associated with unicode key 'from_user' of first dictionary in list `result`: result[0]['from_user']<|endoftext|>
248,<|endoftext|>Retrieve each line from a file 'File.txt' as a list: [line.split() for line in open('File.txt')]<|endoftext|>
249,"<|endoftext|>swap keys with values in a dictionary `a`: res = dict((v, k) for k, v in a.items())<|endoftext|>"
250,"<|endoftext|>Open a file `path/to/FILE_NAME.ext` in write mode: new_file = open('path/to/FILE_NAME.ext', 'w')<|endoftext|>"
251,
252,<|endoftext|>Check if any key in the dictionary `dict1` starts with the string `EMP$$`: any(key.startswith('EMP$$') for key in dict1)<|endoftext|>
253,"<|endoftext|>create list of values from dictionary `dict1` that have a key that starts with 'EMP$$': [value for key, value in list(dict1.items()) if key.startswith('EMP$$')]<|endoftext|>"
254,"<|endoftext|>convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`: pd.DataFrame({'email': sf.index, 'list': sf.values})<|endoftext|>"
255,"<|endoftext|>print elements of list `list` seperated by tabs `\t`: print('\t'.join(map(str, list)))<|endoftext|>"
256,<|endoftext|>print unicode string '\xd0\xbf\xd1\x80\xd0\xb8' with utf-8: print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape'))<|endoftext|>
257,<|endoftext|>Encode a latin character in string `Sopet\xc3\xb3n` properly: 'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')<|endoftext|>
258,"<|endoftext|>resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`: image = image.resize((x, y), Image.ANTIALIAS)<|endoftext|>"
259,"<|endoftext|>regex, find ""n""s only in the middle of string `s`: re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)<|endoftext|>"
260,<|endoftext|>display the float `1/3*100` as a percentage: print('{0:.0f}%'.format(1.0 / 3 * 100))<|endoftext|>
261,<|endoftext|>sort a list of dictionary `mylist` by the key `title`: mylist.sort(key=lambda x: x['title'])<|endoftext|>
262,<|endoftext|>sort a list `l` of dicts by dict value 'title': l.sort(key=lambda x: x['title'])<|endoftext|>
263,"<|endoftext|>sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.: l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))<|endoftext|>"
264,"<|endoftext|>find 10 largest differences between each respective elements of list `l1` and list `l2`: heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))<|endoftext|>"
265,"<|endoftext|>BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp': soup.find_all('span', {'class': 'starGryB sp'})<|endoftext|>"
266,"<|endoftext|>write records in dataframe `df` to table 'test' in schema 'a_schema': df.to_sql('test', engine, schema='a_schema')<|endoftext|>"
267,"<|endoftext|>Extract brackets from string `s`: brackets = re.sub('[^(){}[\\]]', '', s)<|endoftext|>"
268,"<|endoftext|>remove duplicate elements from list 'L': list(dict((x[0], x) for x in L).values())<|endoftext|>"
269,<|endoftext|>read a file `file` without newlines: [line.rstrip('\n') for line in file]<|endoftext|>
270,"<|endoftext|>get the position of item 1 in `testlist`: [i for (i, x) in enumerate(testlist) if (x == 1)]<|endoftext|>"
271,"<|endoftext|>get the position of item 1 in `testlist`: [i for (i, x) in enumerate(testlist) if (x == 1)]<|endoftext|>"
272,"<|endoftext|>get the position of item 1 in `testlist`: for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:
    pass<|endoftext|>"
273,"<|endoftext|>get the position of item 1 in `testlist`: for i in (i for (i, x) in enumerate(testlist) if (x == 1)):
    pass<|endoftext|>"
274,"<|endoftext|>get the position of item 1 in `testlist`: gen = (i for (i, x) in enumerate(testlist) if (x == 1))
for i in gen:
    pass<|endoftext|>"
275,<|endoftext|>get the position of item `element` in list `testlist`: print(testlist.index(element))<|endoftext|>
276,"<|endoftext|>get the position of item `element` in list `testlist`: try:
    print(testlist.index(element))
except ValueError:
    pass<|endoftext|>"
277,"<|endoftext|>find the first element of the tuple with the maximum second element in a list of tuples `lis`: max(lis, key=lambda item: item[1])[0]<|endoftext|>"
278,"<|endoftext|>get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`: max(lis, key=itemgetter(1))[0]<|endoftext|>"
279,<|endoftext|>Make a delay of 1 second: time.sleep(1)<|endoftext|>
280,"<|endoftext|>convert list of tuples `L` to a string: """""", """""".join('(' + ', '.join(i) + ')' for i in L)<|endoftext|>"
281,"<|endoftext|>Django set default value of field `b` equal to '0000000': b = models.CharField(max_length=7, default='0000000', editable=False)<|endoftext|>"
282,"<|endoftext|>Sort lis `list5` in ascending order based on the degrees value of its elements: sorted(list5, lambda x: (degree(x), x))<|endoftext|>"
283,
284,"<|endoftext|>convert a list  into a generator object: (n for n in [1, 2, 3, 5])<|endoftext|>"
285,"<|endoftext|>remove elements from list `oldlist` that have an index number mentioned in list `removelist`: newlist = [v for i, v in enumerate(oldlist) if i not in removelist]<|endoftext|>"
286,"<|endoftext|>Open a file `yourfile.txt` in write mode: f = open('yourfile.txt', 'w')<|endoftext|>"
287,"<|endoftext|>get attribute 'attr' from object `obj`: getattr(obj, 'attr')<|endoftext|>"
288,"<|endoftext|>convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple: from functools import reduce
reduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))<|endoftext|>"
289,"<|endoftext|>convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line: map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))<|endoftext|>"
290,
291,"<|endoftext|>unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`: zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])<|endoftext|>"
292,"<|endoftext|>unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`: zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])<|endoftext|>"
293,"<|endoftext|>unzip list `original`: result = ([a for (a, b) in original], [b for (a, b) in original])<|endoftext|>"
294,"<|endoftext|>unzip list `original` and return a generator: result = ((a for (a, b) in original), (b for (a, b) in original))<|endoftext|>"
295,"<|endoftext|>unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`: zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])<|endoftext|>"
296,"<|endoftext|>unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None: map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])<|endoftext|>"
297,<|endoftext|>encode `Decimal('3.9')` to a JSON string: json.dumps(Decimal('3.9'))<|endoftext|>
298,"<|endoftext|>Add key ""mynewkey"" to dictionary `d` with value ""mynewvalue"": d['mynewkey'] = 'mynewvalue'<|endoftext|>"
299,"<|endoftext|>Add key 'a' to dictionary `data` with value 1: data.update({'a': 1, })<|endoftext|>"
300,<|endoftext|>Add key 'a' to dictionary `data` with value 1: data.update(dict(a=1))<|endoftext|>
301,<|endoftext|>Add key 'a' to dictionary `data` with value 1: data.update(a=1)<|endoftext|>
302,<|endoftext|>find maximal value in matrix `matrix`: max([max(i) for i in matrix])<|endoftext|>
303,"<|endoftext|>Round number `answer` to 2 precision after the decimal point: answer = str(round(answer, 2))<|endoftext|>"
304,"<|endoftext|>extract ip address from an html string: ip = re.findall('[0-9]+(?:\\.[0-9]+){3}', s)<|endoftext|>"
305,<|endoftext|>filter dataframe `df` by values in column `A` that appear more than once: df.groupby('A').filter(lambda x: len(x) > 1)<|endoftext|>
306,<|endoftext|>append each line in file `myfile` into a list: [x for x in myfile.splitlines() if x != '']<|endoftext|>
307,"<|endoftext|>Get a list of integers `lst` from a file `filename.txt`: lst = map(int, open('filename.txt').readlines())<|endoftext|>"
308,"<|endoftext|>add color bar with image `mappable` to plot `plt`: plt.colorbar(mappable=mappable, cax=ax3)<|endoftext|>"
309,<|endoftext|>count most frequent 100 words in column 'text' of dataframe `df`: Counter(' '.join(df['text']).split()).most_common(100)<|endoftext|>
310,
311,"<|endoftext|>generate all 2-element subsets of tuple `(1, 2, 3)`: list(itertools.combinations((1, 2, 3), 2))<|endoftext|>"
312,<|endoftext|>get a value of datetime.today() in the UTC time zone: datetime.now(pytz.utc)<|endoftext|>
313,<|endoftext|>Get a new list `list2`by removing empty list from a list of lists `list1`: list2 = [x for x in list1 if x != []]<|endoftext|>
314,<|endoftext|>Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`: list2 = [x for x in list1 if x]<|endoftext|>
315,"<|endoftext|>Django response with JSON `data`: return HttpResponse(data, mimetype='application/json')<|endoftext|>"
316,"<|endoftext|>get all text that is not enclosed within square brackets in string `example_str`: re.findall('(.*?)\\[.*?\\]', example_str)<|endoftext|>"
317,"<|endoftext|>Use a regex to get all text in a string `example_str` that is not surrounded by square brackets: re.findall('(.*?)(?:\\[.*?\\]|$)', example_str)<|endoftext|>"
318,"<|endoftext|>get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc': re.findall('\\(.+?\\)|\\w', '(zyx)bc')<|endoftext|>"
319,"<|endoftext|>match regex '\\((.*?)\\)|(\\w)' with string '(zyx)bc': re.findall('\\((.*?)\\)|(\\w)', '(zyx)bc')<|endoftext|>"
320,"<|endoftext|>match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`: re.findall('\\(.*?\\)|\\w', '(zyx)bc')<|endoftext|>"
321,<|endoftext|>formate each string cin list `elements` into pattern '%{0}%': elements = ['%{0}%'.format(element) for element in elements]<|endoftext|>
322,"<|endoftext|>Open a background process 'background-process' with arguments 'arguments': subprocess.Popen(['background-process', 'arguments'])<|endoftext|>"
323,<|endoftext|>get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys': [mydict[x] for x in mykeys]<|endoftext|>
324,"<|endoftext|>convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary: dict([('Name', 'Joe'), ('Age', 22)])<|endoftext|>"
325,"<|endoftext|>average each two columns of array `data`: data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)<|endoftext|>"
326,"<|endoftext|>double backslash escape all double quotes in string `s`: print(s.encode('unicode-escape').replace('""', '\\""'))<|endoftext|>"
327,"<|endoftext|>split a string into a list of words and whitespace: re.split('(\\W+)', s)<|endoftext|>"
328,
329,<|endoftext|>reverse the keys and values in a dictionary `myDictionary`: {i[1]: i[0] for i in list(myDictionary.items())}<|endoftext|>
330,"<|endoftext|>finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.: [i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]<|endoftext|>"
331,"<|endoftext|>check if object `obj` is a string: isinstance(obj, str)<|endoftext|>"
332,"<|endoftext|>check if object `o` is a string: isinstance(o, str)<|endoftext|>"
333,<|endoftext|>check if object `o` is a string: (type(o) is str)<|endoftext|>
334,"<|endoftext|>check if object `o` is a string: isinstance(o, str)<|endoftext|>"
335,"<|endoftext|>check if `obj_to_test` is a string: isinstance(obj_to_test, str)<|endoftext|>"
336,<|endoftext|>append list `list1` to `list2`: list2.extend(list1)<|endoftext|>
337,<|endoftext|>append list `mylog` to `list1`: list1.extend(mylog)<|endoftext|>
338,<|endoftext|>append list `a` to `c`: c.extend(a)<|endoftext|>
339,"<|endoftext|>append items in list `mylog` to `list1`: for line in mylog:
    list1.append(line)<|endoftext|>"
340,"<|endoftext|>append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`: b.append((a[0][0], a[0][2]))<|endoftext|>"
341,<|endoftext|>Initialize `SECRET_KEY` in flask config with `Your_secret_string `: app.config['SECRET_KEY'] = 'Your_secret_string'<|endoftext|>
342,"<|endoftext|>unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2': pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)<|endoftext|>"
343,<|endoftext|>find the index of an element 'MSFT' in a list `stocks_list`: [x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']<|endoftext|>
344,"<|endoftext|>rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable: ax.set_xticklabels(labels, rotation=45)<|endoftext|>"
345,"<|endoftext|>remove symbols from a string `s`: re.sub('[^\\w]', ' ', s)<|endoftext|>"
346,<|endoftext|>Get the current directory of a script: os.path.basename(os.path.dirname(os.path.realpath(__file__)))<|endoftext|>
347,"<|endoftext|>Find octal characters matches from a string `str` using regex: print(re.findall(""'\\\\[0-7]{1,3}'"", str))<|endoftext|>"
348,"<|endoftext|>split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\b)': re.split('[ ](?=[A-Z]+\\b)', input)<|endoftext|>"
349,"<|endoftext|>Split string `input` at every space followed by an upper-case letter: re.split('[ ](?=[A-Z])', input)<|endoftext|>"
350,"<|endoftext|>send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`: r = requests.post(url, files=files, headers=headers, data=data)<|endoftext|>"
351,"<|endoftext|>write bytes `bytes_` to a file `filename` in python 3: open('filename', 'wb').write(bytes_)<|endoftext|>"
352,<|endoftext|>get a list from a list `lst` with values mapped into a dictionary `dct`: [dct[k] for k in lst]<|endoftext|>
353,<|endoftext|>find duplicate names in column 'name' of the dataframe `x`: x.set_index('name').index.get_duplicates()<|endoftext|>
354,"<|endoftext|>truncate float 1.923328437452 to 3 decimal places: round(1.923328437452, 3)<|endoftext|>"
355,"<|endoftext|>sort list `li` in descending order based on the date value in second element of each list in list `li`: sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)<|endoftext|>"
356,<|endoftext|>place the radial ticks in plot `ax` at 135 degrees: ax.set_rlabel_position(135)<|endoftext|>
357,<|endoftext|>check if path `my_path` is an absolute path: os.path.isabs(my_path)<|endoftext|>
358,<|endoftext|>get number of keys in dictionary `yourdict`: len(list(yourdict.keys()))<|endoftext|>
359,<|endoftext|>count the number of keys in dictionary `yourdictfile`: len(set(open(yourdictfile).read().split()))<|endoftext|>
360,<|endoftext|>pandas dataframe get first row of each group by 'id': df.groupby('id').first()<|endoftext|>
361,"<|endoftext|>split a list in first column  into multiple columns keeping other columns as well in pandas data frame: pd.concat([df[0].apply(pd.Series), df[1]], axis=1)<|endoftext|>"
362,"<|endoftext|>extract attributes 'src=""js/([^""]*\\bjquery\\b[^""]*)""' from string `data`: re.findall('src=""js/([^""]*\\bjquery\\b[^""]*)""', data)<|endoftext|>"
363,"<|endoftext|>Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`: sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])<|endoftext|>"
364,<|endoftext|>Call a subprocess with arguments `c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat` that may contain spaces: subprocess.Popen(['c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat'])<|endoftext|>
365,"<|endoftext|>reverse a priority queue `q` in python without using classes: q.put((-n, n))<|endoftext|>"
366,"<|endoftext|>make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`: df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])<|endoftext|>"
367,"<|endoftext|>find all matches of regex pattern '([a-fA-F\\d]{32})' in string `data`: re.findall('([a-fA-F\\d]{32})', data)<|endoftext|>"
368,<|endoftext|>Get the length of list `my_list`: len(my_list)<|endoftext|>
369,<|endoftext|>Getting the length of array `l`: len(l)<|endoftext|>
370,<|endoftext|>Getting the length of array `s`: len(s)<|endoftext|>
371,<|endoftext|>Getting the length of `my_tuple`: len(my_tuple)<|endoftext|>
372,<|endoftext|>Getting the length of `my_string`: len(my_string)<|endoftext|>
373,"<|endoftext|>remove escape character from string ""\\a"": """"""\\a"""""".decode('string_escape')<|endoftext|>"
374,"<|endoftext|>replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.: """"""obama"""""".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')<|endoftext|>"
375,<|endoftext|>remove directory tree '/folder_name': shutil.rmtree('/folder_name')<|endoftext|>
376,<|endoftext|>create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`: data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())<|endoftext|>
377,"<|endoftext|>reverse sort Counter `x` by values: sorted(x, key=x.get, reverse=True)<|endoftext|>"
378,"<|endoftext|>reverse sort counter `x` by value: sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)<|endoftext|>"
379,"<|endoftext|>append a numpy array 'b' to a numpy array 'a': np.vstack((a, b))<|endoftext|>"
380,"<|endoftext|>numpy concatenate two arrays `a` and `b` along the first axis: print(concatenate((a, b), axis=0))<|endoftext|>"
381,"<|endoftext|>numpy concatenate two arrays `a` and `b` along the second axis: print(concatenate((a, b), axis=1))<|endoftext|>"
382,"<|endoftext|>numpy concatenate two arrays `a` and `b` along the first axis: c = np.r_[(a[None, :], b[None, :])]<|endoftext|>"
383,"<|endoftext|>numpy concatenate two arrays `a` and `b` along the first axis: np.array((a, b))<|endoftext|>"
384,"<|endoftext|>fetch address information for host 'google.com' ion port 80: print(socket.getaddrinfo('google.com', 80))<|endoftext|>"
385,"<|endoftext|>add a column 'day' with value 'sat' to dataframe `df`: df.xs('sat', level='day', drop_level=False)<|endoftext|>"
386,"<|endoftext|>return a 401 unauthorized in django: return HttpResponse('Unauthorized', status=401)<|endoftext|>"
387,"<|endoftext|>Flask set folder 'wherever' as the default template folder: Flask(__name__, template_folder='wherever')<|endoftext|>"
388,<|endoftext|>How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?: session.execute('INSERT INTO t1 (SELECT * FROM t2)')<|endoftext|>
389,<|endoftext|>sort a list of lists 'c2' such that third row comes first: c2.sort(key=lambda row: row[2])<|endoftext|>
390,
391,
392,"<|endoftext|>set font `Arial` to display non-ascii characters in matplotlib: matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})<|endoftext|>"
393,<|endoftext|>Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal: df['date'].apply(lambda x: x.toordinal())<|endoftext|>
394,<|endoftext|>get html source of Selenium WebElement `element`: element.get_attribute('innerHTML')<|endoftext|>
395,<|endoftext|>Get the integer location of a key `bob` in a pandas data frame: df.index.get_loc('bob')<|endoftext|>
396,"<|endoftext|>open a 'gnome' terminal from python script and run  'sudo apt-get update' command.: os.system('gnome-terminal -e \'bash -c ""sudo apt-get update; exec bash""\'')<|endoftext|>"
397,<|endoftext|>add an item with key 'third_key' and value 1 to an dictionary `my_dict`: my_dict.update({'third_key': 1})<|endoftext|>
398,<|endoftext|>declare an array: my_list = []<|endoftext|>
399,<|endoftext|>Insert item `12` to a list `my_list`: my_list.append(12)<|endoftext|>
400,"<|endoftext|>add an entry 'wuggah' at the beginning of list `myList`: myList.insert(0, 'wuggah')<|endoftext|>"
401,"<|endoftext|>convert a hex-string representation to actual bytes: """"""\\xF3\\xBE\\x80\\x80"""""".replace('\\x', '').decode('hex')<|endoftext|>"
402,<|endoftext|>select the last column of dataframe `df`: df[df.columns[-1]]<|endoftext|>
403,"<|endoftext|>get the first value from dataframe `df` where column 'Letters' is equal to 'C': df.loc[df['Letters'] == 'C', 'Letters'].values[0]<|endoftext|>"
404,"<|endoftext|>converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix: np.column_stack(([1, 2, 3], [4, 5, 6]))<|endoftext|>"
405,<|endoftext|>get the type of `i`: type(i)<|endoftext|>
406,<|endoftext|>determine the type of variable `v`: type(v)<|endoftext|>
407,<|endoftext|>determine the type of variable `v`: type(v)<|endoftext|>
408,<|endoftext|>determine the type of variable `v`: type(v)<|endoftext|>
409,<|endoftext|>determine the type of variable `v`: type(v)<|endoftext|>
410,<|endoftext|>get the type of variable `variable_name`: print(type(variable_name))<|endoftext|>
411,"<|endoftext|>get the 5th item of a generator: next(itertools.islice(range(10), 5, 5 + 1))<|endoftext|>"
412,"<|endoftext|>Print a string `word` with string format: print('""{}""'.format(word))<|endoftext|>"
413,"<|endoftext|>join a list of strings `list` using a space ' ': """""" """""".join(list)<|endoftext|>"
414,<|endoftext|>create list `y` containing two empty lists: y = [[] for n in range(2)]<|endoftext|>
415,"<|endoftext|>read a file 'C:/name/MyDocuments/numbers' into a list `data`: data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]<|endoftext|>"
416,"<|endoftext|>delete all occurrences of character 'i' in string 'it is icy': """""""""""".join([char for char in 'it is icy' if char != 'i'])<|endoftext|>"
417,"<|endoftext|>delete all instances of a character 'i' in a string 'it is icy': re.sub('i', '', 'it is icy')<|endoftext|>"
418,"<|endoftext|>delete all characters ""i"" in string ""it is icy"": """"""it is icy"""""".replace('i', '')<|endoftext|>"
419,
420,"<|endoftext|>Drop rows of pandas dataframe `df` having NaN in column at index ""1"": df.dropna(subset=[1])<|endoftext|>"
421,"<|endoftext|>get elements from list `myList`, that have a field `n` value 30: [x for x in myList if x.n == 30]<|endoftext|>"
422,<|endoftext|>converting list of strings `intstringlist` to list of integer `nums`: nums = [int(x) for x in intstringlist]<|endoftext|>
423,"<|endoftext|>convert list of string numbers into list of integers: map(int, eval(input('Enter the unfriendly numbers: ')))<|endoftext|>"
424,"<|endoftext|>print ""."" without newline: sys.stdout.write('.')<|endoftext|>"
425,<|endoftext|>round off the float that is the product of `2.52 * 100` and convert it to an int: int(round(2.51 * 100))<|endoftext|>
426,"<|endoftext|>Find all files in directory ""/mydir"" with extension "".txt"": os.chdir('/mydir')
for file in glob.glob('*.txt'):
    pass<|endoftext|>"
427,"<|endoftext|>Find all files in directory ""/mydir"" with extension "".txt"": for file in os.listdir('/mydir'):
    if file.endswith('.txt'):
        pass<|endoftext|>"
428,"<|endoftext|>Find all files in directory ""/mydir"" with extension "".txt"": for (root, dirs, files) in os.walk('/mydir'):
    for file in files:
        if file.endswith('.txt'):
            pass<|endoftext|>"
429,<|endoftext|>plot dataframe `df` without a legend: df.plot(legend=False)<|endoftext|>
430,"<|endoftext|>loop through the IP address range ""192.168.x.x"": for i in range(256):
    for j in range(256):
        ip = ('192.168.%d.%d' % (i, j))
        print(ip)<|endoftext|>"
431,"<|endoftext|>loop through the IP address range ""192.168.x.x"": for (i, j) in product(list(range(256)), list(range(256))):
    pass<|endoftext|>"
432,"<|endoftext|>loop through the IP address range ""192.168.x.x"": generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)<|endoftext|>"
433,"<|endoftext|>Sum the corresponding decimal values for binary values of each boolean element in list `x`: sum(1 << i for i, b in enumerate(x) if b)<|endoftext|>"
434,"<|endoftext|>write multiple strings `line1`, `line2` and `line3` in one line in a file `target`: target.write('%r\n%r\n%r\n' % (line1, line2, line3))<|endoftext|>"
435,"<|endoftext|>Convert list of lists `data` into a flat list: [y for x in data for y in (x if isinstance(x, list) else [x])]<|endoftext|>"
436,<|endoftext|>Print new line character as `\n` in a string `foo\nbar`: print('foo\nbar'.encode('string_escape'))<|endoftext|>
437,"<|endoftext|>remove last comma character ',' in string `s`: """""""""""".join(s.rsplit(',', 1))<|endoftext|>"
438,<|endoftext|>calculate the mean of each element in array `x` with the element previous to it: (x[1:] + x[:-1]) / 2<|endoftext|>
439,<|endoftext|>get an array of the mean of each two consecutive values in numpy array `x`: x[:-1] + (x[1:] - x[:-1]) / 2<|endoftext|>
440,"<|endoftext|>load data containing `utf-8` from file `new.txt` into numpy array `arr`: arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')<|endoftext|>"
441,"<|endoftext|>reverse sort list of dicts `l` by value for key `time`: l = sorted(l, key=itemgetter('time'), reverse=True)<|endoftext|>"
442,"<|endoftext|>Sort a list of dictionary `l` based on key `time` in descending order: l = sorted(l, key=lambda a: a['time'], reverse=True)<|endoftext|>"
443,<|endoftext|>get rows of dataframe `df` that match regex '(Hel|Just)': df.loc[df[0].str.contains('(Hel|Just)')]<|endoftext|>
444,"<|endoftext|>find the string in `your_string` between two special characters ""["" and ""]"": re.search('\\[(.*)\\]', your_string).group(1)<|endoftext|>"
445,
446,"<|endoftext|>count number of times string 'brown' occurred in string 'The big brown fox is brown': """"""The big brown fox is brown"""""".count('brown')<|endoftext|>"
447,<|endoftext|>decode json string `request.body` to python dict: json.loads(request.body)<|endoftext|>
448,"<|endoftext|>download the file from url `url` and save it under file `file_name`: urllib.request.urlretrieve(url, file_name)<|endoftext|>"
449,<|endoftext|>split string `text` by space: text.split()<|endoftext|>
450,"<|endoftext|>split string `text` by "","": text.split(',')<|endoftext|>"
451,<|endoftext|>Split string `line` into a list by whitespace: line.split()<|endoftext|>
452,"<|endoftext|>replace dot characters  '.' associated with ascii letters in list `s` with space ' ': [re.sub('(?<!\\d)\\.(?!\\d)', ' ', i) for i in s]<|endoftext|>"
453,"<|endoftext|>sort list `list_of_strings` based on second index of each string `s`: sorted(list_of_strings, key=lambda s: s.split(',')[1])<|endoftext|>"
454,"<|endoftext|>call multiple bash function ‘vasp’ and ‘tee tee_output’ using ‘|’: subprocess.check_call('vasp | tee tee_output', shell=True)<|endoftext|>"
455,"<|endoftext|>eliminate all strings from list `lst`: [element for element in lst if isinstance(element, int)]<|endoftext|>"
456,"<|endoftext|>get all the elements except strings from the list 'lst'.: [element for element in lst if not isinstance(element, str)]<|endoftext|>"
457,"<|endoftext|>Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`: newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])<|endoftext|>"
458,"<|endoftext|>sort a list of dictionaries `l` by values in key `name` in descending order: newlist = sorted(l, key=itemgetter('name'), reverse=True)<|endoftext|>"
459,
460,
461,
462,"<|endoftext|>join together with "","" elements inside a list indexed with 'category' within a dictionary `trans`: """""","""""".join(trans['category'])<|endoftext|>"
463,"<|endoftext|>concatenate array of strings `['A', 'B', 'C', 'D']` into a string: """""""""""".join(['A', 'B', 'C', 'D'])<|endoftext|>"
464,<|endoftext|>get json data from restful service 'url': json.load(urllib.request.urlopen('url'))<|endoftext|>
465,<|endoftext|>Remove all strings from a list a strings `sents` where the values starts with `@$\t` or `#`: [x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]<|endoftext|>
466,<|endoftext|>django filter by hour: Entry.objects.filter(pub_date__contains='08:00')<|endoftext|>
467,"<|endoftext|>sort a list of dictionary `list` first by key `points` and then by `time`: list.sort(key=lambda item: (item['points'], item['time']))<|endoftext|>"
468,"<|endoftext|>convert datetime object `(1970, 1, 1)` to seconds: (t - datetime.datetime(1970, 1, 1)).total_seconds()<|endoftext|>"
469,"<|endoftext|>insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.: re.sub('(\\_a)?\\.([^\\.]*)$', '_suff.\\2', 'long.file.name.jpg')<|endoftext|>"
470,"<|endoftext|>reload a module `module`: import imp
imp.reload(module)<|endoftext|>"
471,"<|endoftext|>Convert integer `number` into an unassigned integer: struct.unpack('H', struct.pack('h', number))<|endoftext|>"
472,<|endoftext|>convert int values in list `numlist` to float: numlist = [float(x) for x in numlist]<|endoftext|>
473,"<|endoftext|>write dataframe `df`, excluding index, to a csv file: df.to_csv(filename, index=False)<|endoftext|>"
474,<|endoftext|>convert a urllib unquoted string `unescaped` to a json data `json_data`: json_data = json.loads(unescaped)<|endoftext|>
475,<|endoftext|>Create a list containing all ascii characters as its elements: [chr(i) for i in range(127)]<|endoftext|>
476,"<|endoftext|>write `newFileBytes` to a binary file `newFile`: newFile.write(struct.pack('5B', *newFileBytes))<|endoftext|>"
477,"<|endoftext|>python regex - check for a capital letter with a following lowercase in string `string`: re.sub('^[A-Z0-9]*(?![a-z])', '', string)<|endoftext|>"
478,<|endoftext|>get the last key of dictionary `dict`: list(dict.keys())[-1]<|endoftext|>
479,"<|endoftext|>write line ""hi there"" to file `f`: print('hi there', file=f)<|endoftext|>"
480,"<|endoftext|>write line ""hi there"" to file `myfile`: f = open('myfile', 'w')
f.write('hi there\n')
f.close()<|endoftext|>"
481,"<|endoftext|>write line ""Hello"" to file `somefile.txt`: with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')<|endoftext|>"
482,<|endoftext|>convert unicode string `s` to ascii: s.encode('iso-8859-15')<|endoftext|>
483,<|endoftext|>Django get maximum value associated with field 'added' in model `AuthorizedEmail`: AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]<|endoftext|>
484,"<|endoftext|>Find all numbers and dots from a string `text` using regex: re.findall('Test([0-9.]*[0-9]+)', text)<|endoftext|>"
485,"<|endoftext|>python regex  to find all numbers and dots from 'text': re.findall('Test([\\d.]*\\d+)', text)<|endoftext|>"
486,"<|endoftext|>execute script 'script.ps1' using 'powershell.exe' shell: os.system('powershell.exe', 'script.ps1')<|endoftext|>"
487,<|endoftext|>Sort a list of tuples `b` by third item in the tuple: b.sort(key=lambda x: x[1][2])<|endoftext|>
488,<|endoftext|>get a list of all keys in Cassandra database `cf` with pycassa: list(cf.get_range().get_keys())<|endoftext|>
489,<|endoftext|>create a datetime with the current date & time: datetime.datetime.now()<|endoftext|>
490,"<|endoftext|>get the index of an integer `1` from a list `lst` if the list also contains boolean items: next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)<|endoftext|>"
491,<|endoftext|>subtract 13 from every number in a list `a`: a[:] = [(x - 13) for x in a]<|endoftext|>
492,"<|endoftext|>choose a random file from the directory contents of the C drive, `C:\\`: random.choice(os.listdir('C:\\'))<|endoftext|>"
493,"<|endoftext|>get the highest element in absolute value in a numpy matrix `x`: max(x.min(), x.max(), key=abs)<|endoftext|>"
494,"<|endoftext|>Get all urls within text `s`: re.findall('""(http.*?)""', s, re.MULTILINE | re.DOTALL)<|endoftext|>"
495,"<|endoftext|>match urls whose domain doesn't start with `t` from string `document` using regex: re.findall('http://[^t][^s""]+\\.html', document)<|endoftext|>"
496,"<|endoftext|>split a string `mystring` considering the spaces ' ': mystring.replace(' ', '! !').split('!')<|endoftext|>"
497,"<|endoftext|>open file `path` with mode 'r': open(path, 'r')<|endoftext|>"
498,<|endoftext|>sum elements at the same index in list `data`: [[sum(item) for item in zip(*items)] for items in zip(*data)]<|endoftext|>
499,"<|endoftext|>add a new axis to array `a`: a[:, (np.newaxis)]<|endoftext|>"
