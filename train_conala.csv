,text
0,"<|endoftext|>Concatenate elements of a list 'x' of multiple integers to a single integer: sum(d * 10 ** i for i, d in enumerate(x[::-1]))<|endoftext|>"
1,"<|endoftext|>convert a list of integers into a single integer: r = int(''.join(map(str, x)))<|endoftext|>"
2,"<|endoftext|>convert a DateTime string back to a DateTime object of format '%Y-%m-%d %H:%M:%S.%f': datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')<|endoftext|>"
3,"<|endoftext|>get the average of a list values for each key in dictionary `d`): [(i, sum(j) / len(j)) for i, j in list(d.items())]<|endoftext|>"
4,"<|endoftext|>zip two lists `[1, 2]` and `[3, 4]` into a list of two tuples containing elements at the same index in each list: zip([1, 2], [3, 4])<|endoftext|>"
5,<|endoftext|>prepend string 'hello' to all items in list 'a': ['hello{0}'.format(i) for i in a]<|endoftext|>
6,"<|endoftext|>regex for repeating words in a string `s`: re.sub('(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)', '\\1', s)<|endoftext|>"
7,"<|endoftext|>normalize a pandas dataframe `df` by row: df.div(df.sum(axis=1), axis=0)<|endoftext|>"
8,"<|endoftext|>swap values in a tuple/list inside a list `mylist`: map(lambda t: (t[1], t[0]), mylist)<|endoftext|>"
9,"<|endoftext|>Swap values in a tuple/list in list `mylist`: [(t[1], t[0]) for t in mylist]<|endoftext|>"
11,"<|endoftext|>find all occurrences of the pattern '\\[[^\\]]*\\]|\\([^\\)]*\\)|""[^""]*""|\\S+' within `strs`: re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|""[^""]*""|\\S+', strs)<|endoftext|>"
12,"<|endoftext|>generate the combinations of 3 from a set `{1, 2, 3, 4}`: print(list(itertools.combinations({1, 2, 3, 4}, 3)))<|endoftext|>"
13,"<|endoftext|>add multiple columns `hour`, `weekday`, `weeknum` to pandas data frame `df` from lambda function `lambdafunc`: df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)<|endoftext|>"
14,"<|endoftext|>BeautifulSoup search string 'Elsie' inside tag 'a': soup.find_all('a', string='Elsie')<|endoftext|>"
15,"<|endoftext|>Convert a datetime object `my_datetime` into readable format `%B %d, %Y`: my_datetime.strftime('%B %d, %Y')<|endoftext|>"
16,<|endoftext|>parse string `s` to int when string contains a number: int(''.join(c for c in s if c.isdigit()))<|endoftext|>
17,<|endoftext|>add dictionary `{'class': {'section': 5}}` to key 'Test' of dictionary `dic`: dic['Test'].update({'class': {'section': 5}})<|endoftext|>
18,"<|endoftext|>transforming the string `s` into dictionary: dict(map(int, x.split(':')) for x in s.split(','))<|endoftext|>"
20,"<|endoftext|>find rows matching `(0,1)` in a 2 dimensional numpy array `vals`: np.where((vals == (0, 1)).all(axis=1))<|endoftext|>"
22,"<|endoftext|>build a dictionary containing the conversion of each list in list `[['two', 2], ['one', 1]]` to a key/value pair as its items: dict([['two', 2], ['one', 1]])<|endoftext|>"
23,"<|endoftext|>convert list `l` to dictionary having each two adjacent elements as key/value pair: dict(zip(l[::2], l[1::2]))<|endoftext|>"
24,<|endoftext|>assign float 9.8 to variable `GRAVITY`: GRAVITY = 9.8<|endoftext|>
25,"<|endoftext|>separate numbers from characters in string ""30m1000n20m"": re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')<|endoftext|>"
26,"<|endoftext|>separate numbers and characters in string '20M10000N80M': re.findall('([0-9]+|[A-Z])', '20M10000N80M')<|endoftext|>"
27,"<|endoftext|>separate numbers and characters in string '20M10000N80M': re.findall('([0-9]+)([A-Z])', '20M10000N80M')<|endoftext|>"
28,"<|endoftext|>Get a list of  words from a string `Hello world, my name is...James the 2nd!` removing punctuation: re.compile('\\w+').findall('Hello world, my name is...James the 2nd!')<|endoftext|>"
29,"<|endoftext|>Convert string '03:55' into datetime.time object: datetime.datetime.strptime('03:55', '%H:%M').time()<|endoftext|>"
30,"<|endoftext|>request url 'https://www.reporo.com/' without verifying SSL certificates: requests.get('https://www.reporo.com/', verify=False)<|endoftext|>"
31,<|endoftext|>Extract values not equal to 0 from numpy array `a`: a[a != 0]<|endoftext|>
32,"<|endoftext|>map two lists `keys` and `values` into a dictionary: new_dict = {k: v for k, v in zip(keys, values)}<|endoftext|>"
33,"<|endoftext|>map two lists `keys` and `values` into a dictionary: dict((k, v) for k, v in zip(keys, values))<|endoftext|>"
34,"<|endoftext|>map two lists `keys` and `values` into a dictionary: dict([(k, v) for k, v in zip(keys, values)])<|endoftext|>"
35,"<|endoftext|>find the string matches within parenthesis from a string `s` using regex: m = re.search('\\[(\\w+)\\]', s)<|endoftext|>"
36,"<|endoftext|>Enable the SO_REUSEADDR socket option in socket object `s` to fix the error `only one usage of each socket address is normally permitted`: s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)<|endoftext|>"
37,"<|endoftext|>append the sum of each tuple pair in the grouped list `list1` and list `list2` elements to list `list3`: list3 = [(a + b) for a, b in zip(list1, list2)]<|endoftext|>"
38,<|endoftext|>converting hex string `s` to its integer representations: [ord(c) for c in s.decode('hex')]<|endoftext|>
39,"<|endoftext|>sort list `student_tuples` by second element of each tuple in ascending and third element of each tuple in descending: print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))<|endoftext|>"
40,"<|endoftext|>get list of duplicated elements in range of 3: [y for x in range(3) for y in [x, x]]<|endoftext|>"
41,<|endoftext|>read the contents of the file 'file.txt' into `txt`: txt = open('file.txt').read()<|endoftext|>
42,<|endoftext|>divide each element in list `myList` by integer `myInt`: myList[:] = [(x / myInt) for x in myList]<|endoftext|>
44,"<|endoftext|>replace white spaces in dataframe `df` with '_': df.replace(' ', '_', regex=True)<|endoftext|>"
45,"<|endoftext|>convert date `my_date` to datetime: datetime.datetime.combine(my_date, datetime.time.min)<|endoftext|>"
46,<|endoftext|>convert tuple `tst` to string `tst2`: tst2 = str(tst)<|endoftext|>
47,<|endoftext|>get modified time of file `file`: time.ctime(os.path.getmtime(file))<|endoftext|>
48,<|endoftext|>get creation time of file `file`: time.ctime(os.path.getctime(file))<|endoftext|>
49,<|endoftext|>get modification time of file `filename`: t = os.path.getmtime(filename)<|endoftext|>
50,<|endoftext|>get modification time of file `path`: os.path.getmtime(path)<|endoftext|>
51,<|endoftext|>get modified time of file `file`: print(('last modified: %s' % time.ctime(os.path.getmtime(file))))<|endoftext|>
52,<|endoftext|>get the creation time of file `file`: print(('created: %s' % time.ctime(os.path.getctime(file))))<|endoftext|>
53,<|endoftext|>get the creation time of file `path_to_file`: return os.path.getctime(path_to_file)<|endoftext|>
54,<|endoftext|>execute os command ''TASKKILL /F /IM firefox.exe'': os.system('TASKKILL /F /IM firefox.exe')<|endoftext|>
55,"<|endoftext|>split string `string` on whitespaces using a generator: return (x.group(0) for x in re.finditer(""[A-Za-z']+"", string))<|endoftext|>"
56,"<|endoftext|>Unpack each value in list `x` to its placeholder '%' in string '%.2f': """""", """""".join(['%.2f'] * len(x))<|endoftext|>"
57,"<|endoftext|>match regex pattern '(\\d+(\\.\\d+)?)' with string '3434.35353': print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))<|endoftext|>"
58,"<|endoftext|>replace parentheses and all data within it with empty string '' in column 'name' of dataframe `df`: df['name'].str.replace('\\(.*\\)', '')<|endoftext|>"
59,<|endoftext|>create a list `result` containing elements form list `list_a` if first element of list `list_a` is in list `list_b`: result = [x for x in list_a if x[0] in list_b]<|endoftext|>
60,"<|endoftext|>generate all possible string permutations of each two elements in list `['hel', 'lo', 'bye']`: print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])<|endoftext|>"
61,<|endoftext|>get a list of items form nested list `li` where third element of each item contains string 'ar': [x for x in li if 'ar' in x[2]]<|endoftext|>
62,<|endoftext|>Sort lists in the list `unsorted_list` by the element at index 3 of each list: unsorted_list.sort(key=lambda x: x[3])<|endoftext|>
63,<|endoftext|>Log message 'test' on the root logger.: logging.info('test')<|endoftext|>
64,"<|endoftext|>Return a subplot axes positioned by the grid definition `1,1,1` using matpotlib: fig.add_subplot(1, 1, 1)<|endoftext|>"
65,"<|endoftext|>Sort dictionary `x` by value in ascending order: sorted(list(x.items()), key=operator.itemgetter(1))<|endoftext|>"
66,"<|endoftext|>Sort dictionary `dict1` by value in ascending order: sorted(dict1, key=dict1.get)<|endoftext|>"
67,"<|endoftext|>Sort dictionary `d` by value in descending order: sorted(d, key=d.get, reverse=True)<|endoftext|>"
68,"<|endoftext|>Sort dictionary `d` by value in ascending order: sorted(list(d.items()), key=(lambda x: x[1]))<|endoftext|>"
69,"<|endoftext|>elementwise product of 3d arrays `A` and `B`: np.einsum('ijk,ikl->ijl', A, B)<|endoftext|>"
70,<|endoftext|>Print a string `card` with string formatting: print('I have: {0.price}'.format(card))<|endoftext|>
71,<|endoftext|>Write a comment `# Data for Class A\n` to a file object `f`: f.write('# Data for Class A\n')<|endoftext|>
72,<|endoftext|>move the last item in list `a` to the beginning: a = a[-1:] + a[:-1]<|endoftext|>
73,<|endoftext|>Parse DateTime object `datetimevariable` using format '%Y-%m-%d': datetimevariable.strftime('%Y-%m-%d')<|endoftext|>
74,"<|endoftext|>Normalize line ends in a string 'mixed': mixed.replace('\r\n', '\n').replace('\r', '\n')<|endoftext|>"
75,<|endoftext|>find the real user home directory using python: os.path.expanduser('~user')<|endoftext|>
76,<|endoftext|>index a list `L` with another list `Idx`: T = [L[i] for i in Idx]<|endoftext|>
77,<|endoftext|>get a list of words `words` of a file 'myfile': words = open('myfile').read().split()<|endoftext|>
78,<|endoftext|>Get a list of lists with summing the values of the second element from each list of lists `data`: [[sum([x[1] for x in i])] for i in data]<|endoftext|>
79,<|endoftext|>summing the second item in a list of lists of lists: [sum([x[1] for x in i]) for i in data]<|endoftext|>
80,<|endoftext|>sort objects in `Articles` in descending order of counts of `likes`: Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')<|endoftext|>
81,<|endoftext|>return a DateTime object with the current UTC date: today = datetime.datetime.utcnow().date()<|endoftext|>
82,"<|endoftext|>create a list containing the multiplication of each elements at the same index of list `lista` and list `listb`: [(a * b) for a, b in zip(lista, listb)]<|endoftext|>"
83,"<|endoftext|>fetch smilies matching regex pattern '(?::|;|=)(?:-)?(?:\\)|\\(|D|P)' in string `s`: re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)<|endoftext|>"
84,"<|endoftext|>match the pattern '[:;][)(](?![)(])' to the string `str`: re.match('[:;][)(](?![)(])', str)<|endoftext|>"
85,<|endoftext|>convert a list of objects `list_name` to json string `json_string`: json_string = json.dumps([ob.__dict__ for ob in list_name])<|endoftext|>
86,<|endoftext|>create a list `listofzeros` of `n` zeros: listofzeros = [0] * n<|endoftext|>
87,"<|endoftext|>decode the string 'stringnamehere'  to UTF-8: stringnamehere.decode('utf-8', 'ignore')<|endoftext|>"
88,"<|endoftext|>Match regex pattern '((?:A|B|C)D)' on string 'BDE': re.findall('((?:A|B|C)D)', 'BDE')<|endoftext|>"
89,"<|endoftext|>Create a key `key` if it does not exist in dict `dic` and append element `value` to value.: dic.setdefault(key, []).append(value)<|endoftext|>"
90,"<|endoftext|>Get the value of the minimum element in the second column of array `a`: a[np.argmin(a[:, (1)])]<|endoftext|>"
91,<|endoftext|>extend dictionary `a` with key/value pairs of dictionary `b`: a.update(b)<|endoftext|>
92,"<|endoftext|>removing key values pairs with key 'mykey1' from a list of dictionaries `mylist`: [{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]<|endoftext|>"
94,"<|endoftext|>create 3 by 3 matrix of random numbers: numpy.random.random((3, 3))<|endoftext|>"
95,<|endoftext|>make new column 'C' in panda dataframe by adding values from other columns 'A' and 'B': df['C'] = df['A'] + df['B']<|endoftext|>
96,"<|endoftext|>create a list of values from the dictionary `programs` that have a key with a case insensitive match to 'new york': [value for key, value in list(programs.items()) if 'new york' in key.lower()]<|endoftext|>"
97,<|endoftext|>append a path `/path/to/main_folder` in system path: sys.path.append('/path/to/main_folder')<|endoftext|>
98,"<|endoftext|>get all digits in a string `s` after a '[' character: re.findall('\\d+(?=[^[]+$)', s)<|endoftext|>"
99,"<|endoftext|>python pickle/unpickle a list to/from a file 'afile': pickle.load(open('afile', 'rb'))<|endoftext|>"
101,<|endoftext|>count unique index values in column 'A' in pandas dataframe `ex`: ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())<|endoftext|>
102,"<|endoftext|>Create a pandas dataframe of values from a dictionary `d` which contains dictionaries of dictionaries: pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)<|endoftext|>"
103,"<|endoftext|>find out the number of non-matched elements at the same index of list `a` and list `b`: sum(1 for i, j in zip(a, b) if i != j)<|endoftext|>"
104,"<|endoftext|>make all keys lowercase in dictionary `d`: d = {(a.lower(), b): v for (a, b), v in list(d.items())}<|endoftext|>"
105,"<|endoftext|>sort list `list_` based on first element of each tuple and by the length of the second element of each tuple: list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])<|endoftext|>"
106,<|endoftext|>trim whitespace in string `s`: s.strip()<|endoftext|>
107,<|endoftext|>trim whitespace (including tabs) in `s` on the left side: s = s.lstrip()<|endoftext|>
108,<|endoftext|>trim whitespace (including tabs) in `s` on the right side: s = s.rstrip()<|endoftext|>
109,<|endoftext|>trim characters ' \t\n\r' in `s`: s = s.strip(' \t\n\r')<|endoftext|>
110,"<|endoftext|>trim whitespaces (including tabs) in string `s`: print(re.sub('[\\s+]', '', s))<|endoftext|>"
111,"<|endoftext|>In Django, filter `Task.objects` based on all entities in ['A', 'P', 'F']: Task.objects.exclude(prerequisites__status__in=['A', 'P', 'F'])<|endoftext|>"
112,<|endoftext|>Change background color in Tkinter: root.configure(background='black')<|endoftext|>
113,"<|endoftext|>convert dict `result` to numpy structured array: numpy.array([(key, val) for key, val in result.items()], dtype)<|endoftext|>"
114,"<|endoftext|>Concatenate dataframe `df_1` to dataframe `df_2` sorted by values of the column 'y': pd.concat([df_1, df_2.sort_values('y')])<|endoftext|>"
115,"<|endoftext|>replace the last occurence of an expression '</div>' with '</bad>' in a string `s`: re.sub('(.*)</div>', '\\1</bad>', s)<|endoftext|>"
116,"<|endoftext|>get the maximum of 'salary' and 'bonus' values in a dictionary: print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))<|endoftext|>"
117,<|endoftext|>Filter Django objects by `author` with ids `1` and `2`: Book.objects.filter(author__id=1).filter(author__id=2)<|endoftext|>
118,"<|endoftext|>split string 'fooxyzbar' based on case-insensitive matching using string 'XYZ': re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')<|endoftext|>"
119,"<|endoftext|>get list of sums of neighboring integers in string `example`: [sum(map(int, s)) for s in example.split()]<|endoftext|>"
120,<|endoftext|>Get all the keys from dictionary `y` whose value is `1`: [i for i in y if y[i] == 1]<|endoftext|>
121,<|endoftext|>converting byte string `c` in unicode string: c.decode('unicode_escape')<|endoftext|>
122,"<|endoftext|>unpivot first 2 columns into new columns 'year' and 'value' from a pandas dataframe `x`: pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')<|endoftext|>"
123,"<|endoftext|>add key ""item3"" and value ""3"" to dictionary `default_data `: default_data['item3'] = 3<|endoftext|>"
124,"<|endoftext|>add key ""item3"" and value ""3"" to dictionary `default_data `: default_data.update({'item3': 3, })<|endoftext|>"
125,"<|endoftext|>add key value pairs 'item4' , 4 and 'item5' , 5 to dictionary `default_data`: default_data.update({'item4': 4, 'item5': 5, })<|endoftext|>"
126,<|endoftext|>Get the first and last 3 elements of list `l`: l[:3] + l[-3:]<|endoftext|>
127,<|endoftext|>reset index to default in dataframe `df`: df = df.reset_index(drop=True)<|endoftext|>
128,"<|endoftext|>For each index `x` from 0 to 3, append the element at index `x` of list `b` to the list at index `x` of list a.: [a[x].append(b[x]) for x in range(3)]<|endoftext|>"
129,<|endoftext|>get canonical path of the filename `path`: os.path.realpath(path)<|endoftext|>
130,<|endoftext|>check if dictionary `L[0].f.items()` is in dictionary `a3.f.items()`: set(L[0].f.items()).issubset(set(a3.f.items()))<|endoftext|>
131,<|endoftext|>find all the indexes in a Numpy 2D array where the value is 1: zip(*np.where(a == 1))<|endoftext|>
133,<|endoftext|>Collapse hierarchical column index to level 0 in dataframe `df`: df.columns = df.columns.get_level_values(0)<|endoftext|>
134,"<|endoftext|>create a matrix from a list `[1, 2, 3]`: x = scipy.matrix([1, 2, 3]).transpose()<|endoftext|>"
135,"<|endoftext|>add character '@' after word 'get' in string `text`: text = re.sub('(\\bget\\b)', '\\1@', text)<|endoftext|>"
136,"<|endoftext|>get a numpy array that contains the element wise minimum of three 3x1 arrays: np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)<|endoftext|>"
137,"<|endoftext|>add a column 'new_col' to dataframe `df` for index in range: df['new_col'] = list(range(1, len(df) + 1))<|endoftext|>"
138,<|endoftext|>set environment variable 'DEBUSSY' equal to 1: os.environ['DEBUSSY'] = '1'<|endoftext|>
139,<|endoftext|>Get a environment variable `DEBUSSY`: print(os.environ['DEBUSSY'])<|endoftext|>
140,<|endoftext|>set environment variable 'DEBUSSY' to '1': os.environ['DEBUSSY'] = '1'<|endoftext|>
141,"<|endoftext|>update dictionary `b`, overwriting values where keys are identical, with contents of dictionary `d`: b.update(d)<|endoftext|>"
142,<|endoftext|>get all the values in column `b` from pandas data frame `df`: df['b']<|endoftext|>
143,"<|endoftext|>make a line plot with errorbars, `ebar`, from data `x, y, err` and set color of the errorbars to `y` (yellow): ebar = plt.errorbar(x, y, yerr=err, ecolor='y')<|endoftext|>"
144,<|endoftext|>find all files with extension '.c' in directory `folder`: results += [each for each in os.listdir(folder) if each.endswith('.c')]<|endoftext|>
145,<|endoftext|>add unicode string '1' to UTF-8 decoded string '\xc2\xa3': print('\xc2\xa3'.decode('utf8') + '1')<|endoftext|>
146,"<|endoftext|>lower-case the string obtained by replacing the occurrences of regex pattern '(?<=[a-z])([A-Z])' in string `s` with eplacement '-\\1': re.sub('(?<=[a-z])([A-Z])', '-\\1', s).lower()<|endoftext|>"
148,"<|endoftext|>format a string `num` using string formatting: """"""{0:.3g}"""""".format(num)<|endoftext|>"
149,"<|endoftext|>append the first element of array `a` to array `a`: numpy.append(a, a[0])<|endoftext|>"
150,"<|endoftext|>return the column for value 38.15 in dataframe `df`: df.ix[:, (df.loc[0] == 38.15)].columns<|endoftext|>"
151,<|endoftext|>merge 2 dataframes `df1` and `df2` with same values in a column 'revenue' with and index 'date': df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])<|endoftext|>
152,<|endoftext|>load a json data `json_string` into variable `json_data`: json_data = json.loads(json_string)<|endoftext|>
153,<|endoftext|>convert radians 1 to degrees: math.cos(math.radians(1))<|endoftext|>
154,"<|endoftext|>count the number of integers in list `a`: sum(isinstance(x, int) for x in a)<|endoftext|>"
155,"<|endoftext|>replacing  '\u200b' with '*' in a string  using regular expressions: 'used\u200b'.replace('\u200b', '*')<|endoftext|>"
156,<|endoftext|>run function 'SudsMove' simultaneously: threading.Thread(target=SudsMove).start()<|endoftext|>
157,<|endoftext|>sum of squares values in a list `l`: sum(i * i for i in l)<|endoftext|>
158,"<|endoftext|>calculate the sum of the squares of each value in list `l`: sum(map(lambda x: x * x, l))<|endoftext|>"
159,"<|endoftext|>Create a dictionary `d` from list `iterable`: d = dict(((key, value) for (key, value) in iterable))<|endoftext|>"
160,"<|endoftext|>Create a dictionary `d` from list `iterable`: d = {key: value for (key, value) in iterable}<|endoftext|>"
161,"<|endoftext|>Create a dictionary `d` from list of key value pairs `iterable`: d = {k: v for (k, v) in iterable}<|endoftext|>"
162,"<|endoftext|>round off entries in dataframe `df` column `Alabama_exp` to two decimal places, and entries in column `Credit_exp` to three decimal places: df.round({'Alabama_exp': 2, 'Credit_exp': 3})<|endoftext|>"
163,"<|endoftext|>Make function `WRITEFUNCTION` output nothing in curl `p`: p.setopt(pycurl.WRITEFUNCTION, lambda x: None)<|endoftext|>"
164,<|endoftext|>return a random word from a word list 'words': print(random.choice(words))<|endoftext|>
165,"<|endoftext|>Find a max value of the key `count` in a nested dictionary `d`: max(d, key=lambda x: d[x]['count'])<|endoftext|>"
166,"<|endoftext|>get list of string elements in string `data` delimited by commas, putting `0` in place of empty strings: [(int(x) if x else 0) for x in data.split(',')]<|endoftext|>"
167,"<|endoftext|>split string `s` into a list of strings based on ',' then replace empty strings with zero: """""","""""".join(x or '0' for x in s.split(','))<|endoftext|>"
168,<|endoftext|>regular expression match nothing: re.compile('$^')<|endoftext|>
169,<|endoftext|>regular expression syntax for not to match anything: re.compile('.\\A|.\\A*|.\\A+')<|endoftext|>
170,<|endoftext|>create a regular expression object with a pattern that will match nothing: re.compile('a^')<|endoftext|>
171,<|endoftext|>drop all columns in dataframe `df` that holds a maximum value bigger than 0: df.columns[df.max() > 0]<|endoftext|>
172,<|endoftext|>check if date `yourdatetime` is equal to today's date: yourdatetime.date() == datetime.today().date()<|endoftext|>
173,<|endoftext|>print bold text 'Hello': print('\x1b[1m' + 'Hello')<|endoftext|>
174,"<|endoftext|>remove 20 symbols in front of '.' in string 'unique12345678901234567890.mkv': re.sub('.{20}(.mkv)', '\\1', 'unique12345678901234567890.mkv')<|endoftext|>"
175,"<|endoftext|>Define a list with string values `['a', 'c', 'b', 'obj']`: ['a', 'c', 'b', 'obj']<|endoftext|>"
176,"<|endoftext|>substitute multiple whitespace with single whitespace in string `mystring`: """""" """""".join(mystring.split())<|endoftext|>"
177,<|endoftext|>print a floating point number 2.345e-67 without any truncation: print('{:.100f}'.format(2.345e-67))<|endoftext|>
178,<|endoftext|>Check if key 'key1' in `dict`: ('key1' in dict)<|endoftext|>
179,<|endoftext|>Check if key 'a' in `d`: ('a' in d)<|endoftext|>
180,<|endoftext|>Check if key 'c' in `d`: ('c' in d)<|endoftext|>
181,"<|endoftext|>Check if a given key 'key1' exists in dictionary `dict`: if ('key1' in dict):
    pass<|endoftext|>"
182,"<|endoftext|>Check if a given key `key` exists in dictionary `d`: if (key in d):
    pass<|endoftext|>"
183,"<|endoftext|>create a django query for a list of values `1, 4, 7`: Blog.objects.filter(pk__in=[1, 4, 7])<|endoftext|>"
184,"<|endoftext|>read a binary file 'test/test.pdf': f = open('test/test.pdf', 'rb')<|endoftext|>"
185,"<|endoftext|>insert ' ' between every three digit before '.' and replace ',' with '.' in 12345678.46: format(12345678.46, ',').replace(',', ' ').replace('.', ',')<|endoftext|>"
186,"<|endoftext|>Join pandas data frame `frame_1` and `frame_2` with left join by `county_ID` and right join by `countyid`: pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')<|endoftext|>"
187,<|endoftext|>calculate ratio of sparsity in a numpy array `a`: np.isnan(a).sum() / np.prod(a.shape)<|endoftext|>
188,"<|endoftext|>reverse sort items in default dictionary `cityPopulation` by the third item in each key's list of values: sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)<|endoftext|>"
189,"<|endoftext|>Sort dictionary `u` in ascending order based on second elements of its values: sorted(list(u.items()), key=lambda v: v[1])<|endoftext|>"
190,"<|endoftext|>reverse sort dictionary `d` based on its values: sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)<|endoftext|>"
191,"<|endoftext|>sorting a defaultdict `d` by value: sorted(list(d.items()), key=lambda k_v: k_v[1])<|endoftext|>"
192,"<|endoftext|>open a file 'bundled-resource.jpg' in the same directory as a python script: f = open(os.path.join(__location__, 'bundled-resource.jpg'))<|endoftext|>"
193,"<|endoftext|>open the file 'words.txt' in 'rU' mode: f = open('words.txt', 'rU')<|endoftext|>"
194,<|endoftext|>divide the values with same keys of two dictionary `d1` and `d2`: {k: (float(d2[k]) / d1[k]) for k in d2}<|endoftext|>
195,<|endoftext|>divide the value for each key `k` in dict `d2` by the value for the same key `k` in dict `d1`: {k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}<|endoftext|>
196,"<|endoftext|>divide values associated with each key in dictionary `d1` from values associated with the same key in dictionary `d2`: dict((k, float(d2[k]) / d1[k]) for k in d2)<|endoftext|>"
197,"<|endoftext|>write dataframe `df` to csv file `filename` with dates formatted as yearmonthday  `%Y%m%d`: df.to_csv(filename, date_format='%Y%m%d')<|endoftext|>"
198,"<|endoftext|>remove a key 'key' from a dictionary `my_dict`: my_dict.pop('key', None)<|endoftext|>"
199,"<|endoftext|>replace NaN values in array `a` with zeros: b = np.where(np.isnan(a), 0, a)<|endoftext|>"
200,"<|endoftext|>subprocess run command 'start command -flags arguments' through the shell: subprocess.call('start command -flags arguments', shell=True)<|endoftext|>"
201,"<|endoftext|>run command 'command -flags arguments &' on command line tools as separate processes: subprocess.call('command -flags arguments &', shell=True)<|endoftext|>"
202,"<|endoftext|>replace percent-encoded code in request `f` to their single-character equivalent: f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))<|endoftext|>"
203,"<|endoftext|>remove white spaces from the end of string ""    xyz     "": """"""    xyz     """""".rstrip()<|endoftext|>"
204,<|endoftext|>Replace special characters in utf-8 encoded string `s` using the %xx escape: urllib.parse.quote(s.encode('utf-8'))<|endoftext|>
206,"<|endoftext|>Create an array containing the conversion of string '100110' into separate elements: np.array(map(int, '100110'))<|endoftext|>"
207,"<|endoftext|>convert a string 'mystr' to numpy array of integer values: print(np.array(list(mystr), dtype=int))<|endoftext|>"
208,"<|endoftext|>convert an rgb image 'messi5.jpg' into grayscale `img`: img = cv2.imread('messi5.jpg', 0)<|endoftext|>"
209,"<|endoftext|>sort list `lst` in descending order based on the second item of each tuple in it: lst.sort(key=lambda x: x[2], reverse=True)<|endoftext|>"
211,"<|endoftext|>execute shell command 'grep -r PASSED *.log | sort -u | wc -l' with a | pipe in it: subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)<|endoftext|>"
212,<|endoftext|>count the number of trailing question marks in string `my_text`: len(my_text) - len(my_text.rstrip('?'))<|endoftext|>
213,"<|endoftext|>remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats: df[df.columns[1:]].replace('[\\$,]', '', regex=True).astype(float)<|endoftext|>"
214,"<|endoftext|>Merge column  'word' in dataframe `df2` with column 'word' on dataframe `df1`: df1.merge(df2, how='left', on='word')<|endoftext|>"
215,"<|endoftext|>switch positions of each two adjacent characters in string `a`: print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')<|endoftext|>"
216,"<|endoftext|>make a window `root` jump to the front: root.attributes('-topmost', True)<|endoftext|>"
217,<|endoftext|>make a window `root` jump to the front: root.lift()<|endoftext|>
218,"<|endoftext|>Convert list of booleans `walls` into a hex string: hex(int(''.join([str(int(b)) for b in walls]), 2))<|endoftext|>"
219,"<|endoftext|>convert the sum of list `walls` into a hex presentation: hex(sum(b << i for i, b in enumerate(reversed(walls))))<|endoftext|>"
220,"<|endoftext|>print the string `Total score for`, the value of the variable `name`, the string `is` and the value of the variable `score` in one print call.: print(('Total score for', name, 'is', score))<|endoftext|>"
221,"<|endoftext|>print multiple arguments 'name' and 'score'.: print('Total score for {} is {}'.format(name, score))<|endoftext|>"
222,"<|endoftext|>print a string using multiple strings `name` and `score`: print('Total score for %s is %s  ' % (name, score))<|endoftext|>"
223,"<|endoftext|>print string including multiple variables `name` and `score`: print(('Total score for', name, 'is', score))<|endoftext|>"
224,"<|endoftext|>serve a static html page 'your_template.html' at the root of a django project: url('^$', TemplateView.as_view(template_name='your_template.html'))<|endoftext|>"
225,"<|endoftext|>use a list of values `[3,6]` to select rows from a pandas dataframe `df`'s column 'A': df[df['A'].isin([3, 6])]<|endoftext|>"
227,<|endoftext|>execute python code `myscript.py` in a virtualenv `/path/to/my/venv` from matlab: system('/path/to/my/venv/bin/python myscript.py')<|endoftext|>
228,"<|endoftext|>django return a QuerySet list containing the values of field 'eng_name' in model `Employees`: Employees.objects.values_list('eng_name', flat=True)<|endoftext|>"
229,"<|endoftext|>find all digits in string '6,7)' and put them to a list: re.findall('\\d|\\d,\\d\\)', '6,7)')<|endoftext|>"
230,<|endoftext|>prompt string 'Press Enter to continue...' to the console: input('Press Enter to continue...')<|endoftext|>
231,"<|endoftext|>print string ""ABC"" as hex literal: """"""ABC"""""".encode('hex')<|endoftext|>"
232,"<|endoftext|>insert a new field 'geolocCountry' on an existing document  'b' using pymongo: db.Doc.update({'_id': b['_id']}, {'$set': {'geolocCountry': myGeolocCountry}})<|endoftext|>"
233,"<|endoftext|>Write a regex statement to match 'lol' to 'lolllll'.: re.sub('l+', 'l', 'lollll')<|endoftext|>"
234,<|endoftext|>BeautifulSoup find all 'tr' elements in HTML string `soup` at the five stride starting from the fourth element: rows = soup.findAll('tr')[4::5]<|endoftext|>
235,<|endoftext|>reverse all x-axis points in pyplot: plt.gca().invert_xaxis()<|endoftext|>
236,<|endoftext|>reverse y-axis in pyplot: plt.gca().invert_yaxis()<|endoftext|>
237,"<|endoftext|>stack two dataframes next to each other in pandas: pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)<|endoftext|>"
238,"<|endoftext|>create a json response `response_data`: return HttpResponse(json.dumps(response_data), content_type='application/json')<|endoftext|>"
239,<|endoftext|>decode escape sequences in string `myString`: myString.decode('string_escape')<|endoftext|>
240,"<|endoftext|>calculate the md5 checksum of a file named  'filename.exe': hashlib.md5(open('filename.exe', 'rb').read()).hexdigest()<|endoftext|>"
241,"<|endoftext|>Find all keys from a dictionary `d` whose values are `desired_value`: [k for k, v in d.items() if v == desired_value]<|endoftext|>"
242,<|endoftext|>create a set containing all keys' names from dictionary `LoD`: {k for d in LoD for k in list(d.keys())}<|endoftext|>
243,<|endoftext|>create a set containing all keys names from list of dictionaries `LoD`: set([i for s in [list(d.keys()) for d in LoD] for i in s])<|endoftext|>
244,<|endoftext|>extract all keys from a list of dictionaries `LoD`: [i for s in [list(d.keys()) for d in LoD] for i in s]<|endoftext|>
245,"<|endoftext|>unpack keys and values of a dictionary `d` into two lists: keys, values = zip(*list(d.items()))<|endoftext|>"
246,<|endoftext|>convert a string `s` containing a decimal to an integer: int(Decimal(s))<|endoftext|>
248,"<|endoftext|>check if array `b` contains all elements of array `a`: numpy.in1d(b, a).all()<|endoftext|>"
249,<|endoftext|>numpy:  check if array 'a' contains all the numbers in array 'b'.: numpy.array([(x in a) for x in b])<|endoftext|>
250,"<|endoftext|>Draw node labels `labels` on networkx graph `G ` at position `pos`: networkx.draw_networkx_labels(G, pos, labels)<|endoftext|>"
251,<|endoftext|>make a row-by-row copy `y` of array `x`: y = [row[:] for row in x]<|endoftext|>
252,"<|endoftext|>Create 2D numpy array from the data provided in 'somefile.csv' with each row in the file having same number of values: X = numpy.loadtxt('somefile.csv', delimiter=',')<|endoftext|>"
253,<|endoftext|>get a list of items from the list `some_list` that contain string 'abc': matching = [s for s in some_list if 'abc' in s]<|endoftext|>
254,"<|endoftext|>export a pandas data frame `df` to a file `mydf.tsv` and retain the indices: df.to_csv('mydf.tsv', sep='\t')<|endoftext|>"
256,"<|endoftext|>split a string `s` on last delimiter: s.rsplit(',', 1)<|endoftext|>"
257,"<|endoftext|>Check if all elements in list `lst` are tupples of long and int: all(isinstance(x, int) for x in lst)<|endoftext|>"
258,"<|endoftext|>check if all elements in a list 'lst' are the same type 'int': all(isinstance(x, int) for x in lst)<|endoftext|>"
259,<|endoftext|>strip a string `line` of all carriage returns and newlines: line.strip()<|endoftext|>
260,"<|endoftext|>scroll to the bottom of a web page using selenium webdriver: driver.execute_script('window.scrollTo(0, Y)')<|endoftext|>"
261,"<|endoftext|>scroll a to the bottom of a web page using selenium webdriver: driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')<|endoftext|>"
262,"<|endoftext|>convert Date object `dateobject` into a DateTime object: datetime.datetime.combine(dateobject, datetime.time())<|endoftext|>"
263,<|endoftext|>check if any item from list `b` is in list `a`: print(any(x in a for x in b))<|endoftext|>
264,"<|endoftext|>save a numpy array `image_array` as an image 'outfile.jpg': scipy.misc.imsave('outfile.jpg', image_array)<|endoftext|>"
265,"<|endoftext|>Remove anything in parenthesis from string `item` with a regex: item = re.sub(' ?\\([^)]+\\)', '', item)<|endoftext|>"
266,"<|endoftext|>Remove word characters in parenthesis from string `item` with a regex: item = re.sub(' ?\\(\\w+\\)', '', item)<|endoftext|>"
267,"<|endoftext|>Remove all data inside parenthesis in string `item`: item = re.sub(' \\(\\w+\\)', '', item)<|endoftext|>"
268,<|endoftext|>check if any elements in one list `list1` are in another list `list2`: len(set(list1).intersection(list2)) > 0<|endoftext|>
269,"<|endoftext|>convert hex string `s` to decimal: i = int(s, 16)<|endoftext|>"
270,"<|endoftext|>convert hex string ""0xff"" to decimal: int('0xff', 16)<|endoftext|>"
271,"<|endoftext|>convert hex string ""FFFF"" to decimal: int('FFFF', 16)<|endoftext|>"
272,<|endoftext|>convert hex string '0xdeadbeef' to decimal: ast.literal_eval('0xdeadbeef')<|endoftext|>
273,"<|endoftext|>convert hex string 'deadbeef' to decimal: int('deadbeef', 16)<|endoftext|>"
274,<|endoftext|>take screenshot 'screen.png' on mac os x: os.system('screencapture screen.png')<|endoftext|>
275,"<|endoftext|>Set a window size to `1400, 1000` using selenium webdriver: driver.set_window_size(1400, 1000)<|endoftext|>"
276,"<|endoftext|>replace non-ascii chars from a unicode string u'm\xfasica': unicodedata.normalize('NFKD', 'm\xfasica').encode('ascii', 'ignore')<|endoftext|>"
277,"<|endoftext|>concatenate dataframe `df1` with `df2` whilst removing duplicates: pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)<|endoftext|>"
278,"<|endoftext|>Construct an array with data type float32 `a` from data in binary file 'filename': a = numpy.fromfile('filename', dtype=numpy.float32)<|endoftext|>"
279,"<|endoftext|>execute a mv command `mv /home/somedir/subdir/* somedir/` in subprocess: subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)<|endoftext|>"
281,<|endoftext|>print a character that has unicode value `\u25b2`: print('\u25b2'.encode('utf-8'))<|endoftext|>
282,"<|endoftext|>compare contents  at filehandles `file1` and `file2` using difflib: difflib.SequenceMatcher(None, file1.read(), file2.read())<|endoftext|>"
283,"<|endoftext|>Create a dictionary from string `e` separated by `-` and `,`: dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))<|endoftext|>"
284,"<|endoftext|>check if all elements in a tuple `(1, 6)` are in another `(1, 2, 3, 4, 5)`: all(i in (1, 2, 3, 4, 5) for i in (1, 6))<|endoftext|>"
285,<|endoftext|>extract unique dates from time series 'Date' in dataframe `df`: df['Date'].map(lambda t: t.date()).unique()<|endoftext|>
286,"<|endoftext|>right align string `mystring` with a width of 7: """"""{:>7s}"""""".format(mystring)<|endoftext|>"
287,"<|endoftext|>read an excel file 'ComponentReport-DJI.xls': open('ComponentReport-DJI.xls', 'rb').read(200)<|endoftext|>"
288,"<|endoftext|>sort dataframe `df` based on column 'b' in ascending and column 'c' in descending: df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)<|endoftext|>"
289,"<|endoftext|>sort dataframe `df` based on column 'a' in ascending and column 'b' in descending: df.sort_values(['a', 'b'], ascending=[True, False])<|endoftext|>"
290,"<|endoftext|>sort a pandas data frame with column `a` in ascending and `b` in descending order: df1.sort(['a', 'b'], ascending=[True, False], inplace=True)<|endoftext|>"
291,"<|endoftext|>sort a pandas data frame by column `a` in ascending, and by column `b` in descending order: df.sort(['a', 'b'], ascending=[True, False])<|endoftext|>"
292,<|endoftext|>django redirect to view 'Home.views.index': redirect('Home.views.index')<|endoftext|>
293,"<|endoftext|>remove all values within one list `[2, 3, 7]` from another list `a`: [x for x in a if x not in [2, 3, 7]]<|endoftext|>"
294,"<|endoftext|>remove the punctuation '!', '.', ':' from a string `asking`: out = ''.join(c for c in asking if c not in ('!', '.', ':'))<|endoftext|>"
295,"<|endoftext|>BeautifulSoup get value associated with attribute 'content' where attribute 'name' is equal to 'City' in tag 'meta' in HTML parsed string `soup`: soup.find('meta', {'name': 'City'})['content']<|endoftext|>"
296,<|endoftext|>unquote a urlencoded unicode string '%0a': urllib.parse.unquote('%0a')<|endoftext|>
297,<|endoftext|>decode url `url` from UTF-16 code to UTF-8 code: urllib.parse.unquote(url).decode('utf8')<|endoftext|>
298,<|endoftext|>empty a list `lst`: del lst[:]<|endoftext|>
299,<|endoftext|>empty a list `lst`: del lst1[:]<|endoftext|>
300,<|endoftext|>empty a list `lst`: lst[:] = []<|endoftext|>
301,<|endoftext|>empty a list `alist`: alist[:] = []<|endoftext|>
302,<|endoftext|>reset index of series `s`: s.reset_index(0).reset_index(drop=True)<|endoftext|>
303,<|endoftext|>convert unicode text from list `elems` with index 0 to normal text 'utf-8': elems[0].getText().encode('utf-8')<|endoftext|>
304,"<|endoftext|>create a list containing the subtraction of each item in list `L` from the item prior to it: [(y - x) for x, y in zip(L, L[1:])]<|endoftext|>"
305,"<|endoftext|>get value in string `line` matched by regex pattern '\\bLOG_ADDR\\s+(\\S+)': print(re.search('\\bLOG_ADDR\\s+(\\S+)', line).group(1))<|endoftext|>"
306,<|endoftext|>import all classes from module `some.package`: globals().update(importlib.import_module('some.package').__dict__)<|endoftext|>
307,"<|endoftext|>convert a list of characters `['a', 'b', 'c', 'd']` into a string: """""""""""".join(['a', 'b', 'c', 'd'])<|endoftext|>"
308,"<|endoftext|>Slice `url` with '&' as delimiter  to get  ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234"" from url ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3
"": url.split('&')<|endoftext|>"
309,<|endoftext|>sort dictionary `d` by key: od = collections.OrderedDict(sorted(d.items()))<|endoftext|>
310,"<|endoftext|>sort a dictionary `d` by key: OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))<|endoftext|>"
311,"<|endoftext|>Execute a put request to the url `url`: response = requests.put(url, data=json.dumps(data), headers=headers)<|endoftext|>"
312,"<|endoftext|>replace everything that is not an alphabet or a digit with '' in 's'.: re.sub('[\\W_]+', '', s)<|endoftext|>"
313,<|endoftext|>create a list of aggregation of each element from list `l2` to all elements of list `l1`: [(x + y) for x in l2 for y in l1]<|endoftext|>
314,<|endoftext|>convert string `x'  to dictionary splitted by `=` using list comprehension: dict([x.split('=') for x in s.split()])<|endoftext|>
315,<|endoftext|>remove index 2 element from a list `my_list`: my_list.pop(2)<|endoftext|>
316,"<|endoftext|>Delete character ""M"" from a string `s` using python: s = s.replace('M', '')<|endoftext|>"
318,"<|endoftext|>get the sum of the products of each pair of corresponding elements in lists `a` and `b`: sum(x * y for x, y in zip(a, b))<|endoftext|>"
319,"<|endoftext|>sum the products of each two elements at the same index of list `a` and list `b`: list(x * y for x, y in list(zip(a, b)))<|endoftext|>"
320,"<|endoftext|>sum the product of each two items at the same index of list `a` and list `b`: sum(i * j for i, j in zip(a, b))<|endoftext|>"
321,"<|endoftext|>sum the product of elements of two lists named `a` and `b`: sum(x * y for x, y in list(zip(a, b)))<|endoftext|>"
322,"<|endoftext|>write the content of file `xxx.mp4` to file `f`: f.write(open('xxx.mp4', 'rb').read())<|endoftext|>"
323,<|endoftext|>Add 1 to each integer value in list `my_list`: new_list = [(x + 1) for x in my_list]<|endoftext|>
324,<|endoftext|>get a list of all items in list `j` with values greater than `5`: [x for x in j if x >= 5]<|endoftext|>
325,"<|endoftext|>set color marker styles `--bo` in matplotlib: plt.plot(list(range(10)), '--bo')<|endoftext|>"
326,"<|endoftext|>set circle markers on plot for individual points  defined in list   `[1,2,3,4,5,6,7,8,9,10]` created by range(10): plt.plot(list(range(10)), linestyle='--', marker='o', color='b')<|endoftext|>"
327,"<|endoftext|>split strings in list `l` on the first occurring tab `\t` and enter only the first resulting substring in a new list: [i.split('\t', 1)[0] for i in l]<|endoftext|>"
328,<|endoftext|>Split each string in list `myList` on the tab character: myList = [i.split('\t')[0] for i in myList]<|endoftext|>
329,<|endoftext|>Sum numbers in a list 'your_list': sum(your_list)<|endoftext|>
330,<|endoftext|>attach debugger pdb to class `ForkedPdb`: ForkedPdb().set_trace()<|endoftext|>
331,"<|endoftext|>Compose keys from dictionary `d1` with respective values in dictionary `d2`: result = {k: d2.get(v) for k, v in list(d1.items())}<|endoftext|>"
332,"<|endoftext|>add one day and three hours to the present time from datetime.now(): datetime.datetime.now() + datetime.timedelta(days=1, hours=3)<|endoftext|>"
334,"<|endoftext|>switch keys and values in a dictionary `my_dict`: dict((v, k) for k, v in my_dict.items())<|endoftext|>"
335,"<|endoftext|>sort a list `L` by number after second '.': print(sorted(L, key=lambda x: int(x.split('.')[2])))<|endoftext|>"
336,"<|endoftext|>Check if the value of the key ""name"" is ""Test"" in a list of dictionaries `label`: any(d['name'] == 'Test' for d in label)<|endoftext|>"
337,"<|endoftext|>remove all instances of [1, 1] from list `a`: a[:] = [x for x in a if x != [1, 1]]<|endoftext|>"
338,"<|endoftext|>remove all instances of `[1, 1]` from a list `a`: [x for x in a if x != [1, 1]]<|endoftext|>"
339,"<|endoftext|>convert a list 'a' to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value: b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}<|endoftext|>"
340,<|endoftext|>check whether elements in list `a` appear only once: len(set(a)) == len(a)<|endoftext|>
341,"<|endoftext|>Generate MD5 checksum of file in the path `full_path` in hashlib: print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())<|endoftext|>"
343,"<|endoftext|>randomly switch letters' cases in string `s`: """""""""""".join(x.upper() if random.randint(0, 1) else x for x in s)<|endoftext|>"
344,"<|endoftext|>force bash interpreter '/bin/bash' to be used instead of shell: os.system('GREPDB=""echo 123""; /bin/bash -c ""$GREPDB""')<|endoftext|>"
345,"<|endoftext|>Run a command `echo hello world` in bash instead of shell: os.system('/bin/bash -c ""echo hello world""')<|endoftext|>"
346,"<|endoftext|>access the class variable `a_string` from a class object `test`: getattr(test, a_string)<|endoftext|>"
347,<|endoftext|>Display a image file `pathToFile`: Image.open('pathToFile').show()<|endoftext|>
348,"<|endoftext|>replace single quote character in string ""didn't"" with empty string '': """"""didn't"""""".replace(""'"", '')<|endoftext|>"
349,<|endoftext|>sort list `files` based on variable `file_number`: files.sort(key=file_number)<|endoftext|>
350,"<|endoftext|>remove all whitespace in a string `sentence`: sentence.replace(' ', '')<|endoftext|>"
351,"<|endoftext|>remove all whitespace in a string `sentence`: pattern = re.compile('\\s+')
sentence = re.sub(pattern, '', sentence)<|endoftext|>"
352,<|endoftext|>remove whitespace in string `sentence` from beginning and end: sentence.strip()<|endoftext|>
353,"<|endoftext|>remove all whitespaces in string `sentence`: sentence = re.sub('\\s+', '', sentence, flags=re.UNICODE)<|endoftext|>"
354,<|endoftext|>remove all whitespaces in a string `sentence`: sentence = ''.join(sentence.split())<|endoftext|>
355,<|endoftext|>sum all the values in a counter variable `my_counter`: sum(my_counter.values())<|endoftext|>
356,<|endoftext|>find the euclidean distance between two 3-d arrays `A` and `B`: np.sqrt(((A - B) ** 2).sum(-1))<|endoftext|>
357,"<|endoftext|>create list `levels` containing 3 empty dictionaries: levels = [{}, {}, {}]<|endoftext|>"
358,"<|endoftext|>find the sums of length 7 subsets of a list `daily`: weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]<|endoftext|>"
359,<|endoftext|>Delete an element `key` from a dictionary `d`: del d[key]<|endoftext|>
360,<|endoftext|>Delete an element 0 from a dictionary `a`: {i: a[i] for i in a if (i != 0)}<|endoftext|>
361,"<|endoftext|>Delete an element ""hello"" from a dictionary `lol`: lol.pop('hello')<|endoftext|>"
362,<|endoftext|>Delete an element with key `key` dictionary `r`: del r[key]<|endoftext|>
363,"<|endoftext|>solve for the least squares' solution of matrices `a` and `b`: np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))<|endoftext|>"
364,"<|endoftext|>split dictionary/list inside a pandas column 'b' into separate columns in dataframe `df`: pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)<|endoftext|>"
365,"<|endoftext|>loop through 0 to 10 with step 2: for i in range(0, 10, 2):
    pass<|endoftext|>"
366,"<|endoftext|>loop through `mylist` with step 2: for i in mylist[::2]:
    pass<|endoftext|>"
367,<|endoftext|>lowercase string values with key 'content' in a list of dictionaries `messages`: [{'content': x['content'].lower()} for x in messages]<|endoftext|>
368,"<|endoftext|>convert a list `my_list` into string with values separated by spaces: """""" """""".join(my_list)<|endoftext|>"
369,"<|endoftext|>replace each occurrence of the pattern '(http://\\S+|\\S*[^\\w\\s]\\S*)' within `a` with '': re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)<|endoftext|>"
370,<|endoftext|>check if string `str` is palindrome: str(n) == str(n)[::-1]<|endoftext|>
371,"<|endoftext|>upload binary file `myfile.txt` with ftplib: ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))<|endoftext|>"
372,"<|endoftext|>remove all characters from string `stri` upto character 'I': re.sub('.*I', 'I', stri)<|endoftext|>"
373,"<|endoftext|>parse a comma-separated string number '1,000,000' into int: int('1,000,000'.replace(',', ''))<|endoftext|>"
374,"<|endoftext|>combine  dataframe `df1` and dataframe `df2` by index number: pd.merge(df1, df2, left_index=True, right_index=True, how='outer')<|endoftext|>"
376,<|endoftext|>check if all boolean values in a python dictionary `dict` are true: all(dict.values())<|endoftext|>
377,"<|endoftext|>use regex pattern '^12(?=.{4}$)' to remove digit 12 if followed by 4 other digits in column `c_contofficeID` of dataframe `df`: df.c_contofficeID.str.replace('^12(?=.{4}$)', '')<|endoftext|>"
378,<|endoftext|>reverse a list `L`: L[::(-1)]<|endoftext|>
379,<|endoftext|>reverse a list `array`: reversed(array)<|endoftext|>
380,<|endoftext|>reverse a list `L`: L.reverse()<|endoftext|>
381,<|endoftext|>reverse a list `array`: list(reversed(array))<|endoftext|>
382,<|endoftext|>get first element of each tuple in list `A`: [tup[0] for tup in A]<|endoftext|>
383,"<|endoftext|>replace character 'a' with character 'e' and character 's' with character '3' in file `contents`: newcontents = contents.replace('a', 'e').replace('s', '3')<|endoftext|>"
384,<|endoftext|>serialise SqlAlchemy RowProxy object `row` to a json object: json.dumps([dict(list(row.items())) for row in rs])<|endoftext|>
385,<|endoftext|>get file '~/foo.ini': config_file = os.path.expanduser('~/foo.ini')<|endoftext|>
386,<|endoftext|>get multiple parameters with same name from a url in pylons: request.params.getall('c')<|endoftext|>
387,<|endoftext|>Convert array `x` into a correlation matrix: np.corrcoef(x)<|endoftext|>
388,"<|endoftext|>Find the greatest number in set `(1, 2, 3)`: print(max(1, 2, 3))<|endoftext|>"
389,<|endoftext|>Retrieve parameter 'var_name' from a GET request.: self.request.get('var_name')<|endoftext|>
390,"<|endoftext|>Add 100 to each element of column ""x"" in dataframe `a`: a['x'].apply(lambda x, y: x + y, args=(100,))<|endoftext|>"
391,<|endoftext|>Django get first 10 records of model `User` ordered by criteria 'age' of model 'pet': User.objects.order_by('-pet__age')[:10]<|endoftext|>
392,"<|endoftext|>delay for ""5"" seconds: time.sleep(5)<|endoftext|>"
393,<|endoftext|>make a 60 seconds time delay: time.sleep(60)<|endoftext|>
394,<|endoftext|>make a 0.1 seconds time delay: sleep(0.1)<|endoftext|>
395,<|endoftext|>make a 60 seconds time delay: time.sleep(60)<|endoftext|>
396,<|endoftext|>make a 0.1 seconds time delay: time.sleep(0.1)<|endoftext|>
397,"<|endoftext|>From a list of strings `my_list`, remove the values that contains numbers.: [x for x in my_list if not any(c.isdigit() for c in x)]<|endoftext|>"
398,<|endoftext|>get the middle two characters of a string 'state' in a pandas dataframe `df`: df['state'].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])<|endoftext|>
399,<|endoftext|>draw a grid line on every tick of plot `plt`: plt.grid(True)<|endoftext|>
400,"<|endoftext|>sort list `lst` based on each element's number of occurrences: sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))<|endoftext|>"
401,<|endoftext|>Get the value with the maximum length in each column in array `foo`: [max(len(str(x)) for x in line) for line in zip(*foo)]<|endoftext|>
402,<|endoftext|>get the count of each unique value in column `Country` of dataframe `df` and store in column `Sum of Accidents`: df.Country.value_counts().reset_index(name='Sum of Accidents')<|endoftext|>
403,<|endoftext|>calculat the difference between each row and the row previous to it in dataframe `data`: data.set_index('Date').diff()<|endoftext|>
404,"<|endoftext|>append values `[3, 4]` to a set `a`: a.update([3, 4])<|endoftext|>"
405,<|endoftext|>set every two-stride far element to -1 starting from second element in array `a`: a[1::2] = -1<|endoftext|>
406,"<|endoftext|>Get rank of rows from highest to lowest of dataframe `df`, grouped by value in column `group`, according to value in column `value`: df.groupby('group')['value'].rank(ascending=False)<|endoftext|>"
407,"<|endoftext|>convert js date object 'Tue, 22 Nov 2011 06:00:00 GMT' to python datetime: datetime.strptime('Tue, 22 Nov 2011 06:00:00 GMT', '%a, %d %b %Y %H:%M:%S %Z')<|endoftext|>"
408,"<|endoftext|>Convert a binary value '1633837924' to string: struct.pack('<I', 1633837924)<|endoftext|>"
409,<|endoftext|>append string `foo` to list `list`: list.append('foo')<|endoftext|>
410,"<|endoftext|>insert string `foo` at position `0` of list `list`: list.insert(0, 'foo')<|endoftext|>"
411,<|endoftext|>convert keys in dictionary `thedict` into case insensitive: theset = set(k.lower() for k in thedict)<|endoftext|>
412,"<|endoftext|>pad 'dog' up to a length of 5 characters with 'x': """"""{s:{c}^{n}}"""""".format(s='dog', n=5, c='x')<|endoftext|>"
413,"<|endoftext|>check if type of variable `s` is a string: isinstance(s, str)<|endoftext|>"
414,"<|endoftext|>check if type of a variable `s` is string: isinstance(s, str)<|endoftext|>"
415,<|endoftext|>Convert list of dictionaries `L` into a flat dictionary: dict(pair for d in L for pair in list(d.items()))<|endoftext|>
416,"<|endoftext|>merge a list of dictionaries in list `L` into a single dict: {k: v for d in L for k, v in list(d.items())}<|endoftext|>"
417,"<|endoftext|>sort a pandas data frame according to column `Peak` in ascending and `Weeks` in descending order: df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)<|endoftext|>"
418,"<|endoftext|>sort a pandas data frame by column `Peak` in ascending and `Weeks` in descending order: df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)<|endoftext|>"
419,"<|endoftext|>run the code contained in string ""print('Hello')"": eval(""print('Hello')"")<|endoftext|>"
420,"<|endoftext|>creating a list of dictionaries [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]: [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]<|endoftext|>"
422,<|endoftext|>get all possible combination of items from 2-dimensional list `a`: list(itertools.product(*a))<|endoftext|>
423,"<|endoftext|>Get sum of values of columns  'Y1961', 'Y1962', 'Y1963' after group by on columns ""Country"" and ""Item_code"" in dataframe `df`.: df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()<|endoftext|>"
424,"<|endoftext|>create list `done` containing permutations of each element in list `[a, b, c, d]` with variable `x` as tuples: done = [(el, x) for el in [a, b, c, d]]<|endoftext|>"
425,<|endoftext|>remove Nan values from array `x`: x = x[numpy.logical_not(numpy.isnan(x))]<|endoftext|>
426,<|endoftext|>remove first directory from path '/First/Second/Third/Fourth/Fifth': os.path.join(*x.split(os.path.sep)[2:])<|endoftext|>
427,"<|endoftext|>Replace `;` with `:` in a string `line`: line = line.replace(';', ':')<|endoftext|>"
428,"<|endoftext|>call bash command 'tar c my_dir | md5sum' with pipe: subprocess.call('tar c my_dir | md5sum', shell=True)<|endoftext|>"
429,"<|endoftext|>Convert a hex string `437c2123 ` according to ascii value.: """"""437c2123"""""".decode('hex')<|endoftext|>"
430,"<|endoftext|>Get a list of all fields in class `User` that are marked `required`: [k for k, v in User._fields.items() if v.required]<|endoftext|>"
431,"<|endoftext|>remove column by index `[:, 0:2]` in dataframe `df`: df = df.ix[:, 0:2]<|endoftext|>"
432,"<|endoftext|>change a string of integers `x` separated by spaces to a list of int: x = map(int, x.split())<|endoftext|>"
433,<|endoftext|>convert a string of integers `x` separated by spaces to a list of integers: x = [int(i) for i in x.split()]<|endoftext|>
434,"<|endoftext|>find element by css selector ""input[onclick*='1 Bedroom Deluxe']"": driver.find_element_by_css_selector(""input[onclick*='1 Bedroom Deluxe']"")<|endoftext|>"
436,<|endoftext|>display a pdf  file that has been downloaded as `my_pdf.pdf`: webbrowser.open('file:///my_pdf.pdf')<|endoftext|>
437,"<|endoftext|>replace backslashes in string `result` with empty string '': result = result.replace('\\', '')<|endoftext|>"
438,"<|endoftext|>remove backslashes from string `result`: result.replace('\\', '')<|endoftext|>"
439,"<|endoftext|>replace value '-' in any column of pandas dataframe to ""NaN"": df.replace('-', 'NaN')<|endoftext|>"
440,<|endoftext|>convert datetime object to date object in python: datetime.datetime.now().date()<|endoftext|>
442,<|endoftext|>get all sub-elements of an element `a` in an elementtree: [elem.tag for elem in a.iter()]<|endoftext|>
443,<|endoftext|>get all sub-elements of an element tree `a` excluding the root element: [elem.tag for elem in a.iter() if elem is not a]<|endoftext|>
445,"<|endoftext|>move dictionaries in list `lst` to the end of the list if value of key 'language' in each dictionary is not equal to 'en': sorted(lst, key=lambda x: x['language'] != 'en')<|endoftext|>"
446,<|endoftext|>check if all values of a dictionary `your_dict` are zero `0`: all(value == 0 for value in list(your_dict.values()))<|endoftext|>
447,"<|endoftext|>produce a pivot table as dataframe using column 'Y' in datafram `df` to form the axes of the resulting dataframe: df.pivot_table('Y', rows='X', cols='X2')<|endoftext|>"
448,"<|endoftext|>call `doSomething()` in a try-except without handling the exception: try:
    doSomething()
except:
    pass<|endoftext|>"
449,"<|endoftext|>call `doSomething()` in a try-except without handling the exception: try:
    doSomething()
except Exception:
    pass<|endoftext|>"
450,<|endoftext|>get a sum of 4d array `M`: M.sum(axis=0).sum(axis=0)<|endoftext|>
451,<|endoftext|>Convert a datetime object `dt` to microtime: time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0<|endoftext|>
452,<|endoftext|>select all rows in dataframe `df` where the values of column 'columnX' is bigger than or equal to `x` and smaller than or equal to `y`: df[(x <= df['columnX']) & (df['columnX'] <= y)]<|endoftext|>
453,"<|endoftext|>sort a list of lists `L` by index 2 of the inner list: sorted(L, key=itemgetter(2))<|endoftext|>"
454,<|endoftext|>sort a list of lists `l` by index 2 of the inner list: l.sort(key=(lambda x: x[2]))<|endoftext|>
455,"<|endoftext|>sort list `l` by index 2 of the item: sorted(l, key=(lambda x: x[2]))<|endoftext|>"
456,"<|endoftext|>sort a list of lists `list_to_sort` by indices 2,0,1 of the inner list: sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))<|endoftext|>"
457,"<|endoftext|>find rows of 2d array in 3d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]': np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))<|endoftext|>"
458,"<|endoftext|>From multiIndexed dataframe `data` select columns `a` and `c` within each higher order column `one` and `two`: data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]<|endoftext|>"
459,"<|endoftext|>select only specific columns 'a' and 'c' from a dataframe 'data' with multiindex columns: data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]<|endoftext|>"
460,"<|endoftext|>match a sharp, followed by letters (including accent characters) in string `str1` using a regex: hashtags = re.findall('#(\\w+)', str1, re.UNICODE)<|endoftext|>"
461,"<|endoftext|>Rename file from `src` to `dst`: os.rename(src, dst)<|endoftext|>"
462,<|endoftext|>Get all texts and tags from a tag `strong` from etree tag `some_tag` using lxml: print(etree.tostring(some_tag.find('strong')))<|endoftext|>
463,"<|endoftext|>Serialize dictionary `data` and its keys to a JSON formatted string: json.dumps({str(k): v for k, v in data.items()})<|endoftext|>"
464,<|endoftext|>parse UTF-8 encoded HTML response `response` to BeautifulSoup object: soup = BeautifulSoup(response.read().decode('utf-8'))<|endoftext|>
465,<|endoftext|>delete file `filename`: os.remove(filename)<|endoftext|>
466,<|endoftext|>get the next value greatest to `2` from a list of numbers `num_list`: min([x for x in num_list if x > 2])<|endoftext|>
467,<|endoftext|>Replace each value in column 'prod_type' of dataframe `df` with string 'responsive': df['prod_type'] = 'responsive'<|endoftext|>
468,"<|endoftext|>sort list `lst` with positives coming before negatives with values sorted respectively: sorted(lst, key=lambda x: (x < 0, x))<|endoftext|>"
469,<|endoftext|>get the date 6 months from today: six_months = (date.today() + relativedelta(months=(+ 6)))<|endoftext|>
470,"<|endoftext|>get the date 1 month from today: (date(2010, 12, 31) + relativedelta(months=(+ 1)))<|endoftext|>"
471,"<|endoftext|>get the date 2 months from today: (date(2010, 12, 31) + relativedelta(months=(+ 2)))<|endoftext|>"
472,<|endoftext|>calculate the date six months from the current date: print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())<|endoftext|>
473,"<|endoftext|>get a list of keys of dictionary `things` sorted by the value of nested dictionary key 'weight': sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)<|endoftext|>"
474,<|endoftext|>get all the values from a numpy array `a` excluding index 3: a[np.arange(len(a)) != 3]<|endoftext|>
475,<|endoftext|>delete all elements from a list `x` if a function `fn` taking value as parameter returns `0`: [x for x in lst if fn(x) != 0]<|endoftext|>
476,<|endoftext|>set dataframe `df` index using column 'month': df.set_index('month')<|endoftext|>
477,"<|endoftext|>read lines from a csv file `./urls-eu.csv` into a list of lists `arr`: arr = [line.split(',') for line in open('./urls-eu.csv')]<|endoftext|>"
478,<|endoftext|>list comprehension that produces integers between 11 and 19: [i for i in range(100) if i > 10 if i < 20]<|endoftext|>
479,"<|endoftext|>Get only digits from a string `strs`: """""""""""".join([c for c in strs if c.isdigit()])<|endoftext|>"
480,"<|endoftext|>split a string `yas` based on tab '\t': re.split('\\t+', yas.rstrip('\t'))<|endoftext|>"
481,<|endoftext|>scalar multiply matrix `a` by `b`: (a.T * b).T<|endoftext|>
482,"<|endoftext|>remove trailing newline in string ""test string\n"": 'test string\n'.rstrip()<|endoftext|>"
483,<|endoftext|>remove trailing newline in string 'test string \n\n': 'test string \n\n'.rstrip('\n')<|endoftext|>
484,<|endoftext|>remove newline in string `s`: s.strip()<|endoftext|>
485,<|endoftext|>remove newline in string `s` on the right side: s.rstrip()<|endoftext|>
486,<|endoftext|>remove newline in string `s` on the left side: s.lstrip()<|endoftext|>
487,<|endoftext|>remove newline in string 'Mac EOL\r': 'Mac EOL\r'.rstrip('\r\n')<|endoftext|>
488,<|endoftext|>remove newline in string 'Windows EOL\r\n' on the right side: 'Windows EOL\r\n'.rstrip('\r\n')<|endoftext|>
489,<|endoftext|>remove newline in string 'Unix EOL\n' on the right side: 'Unix EOL\n'.rstrip('\r\n')<|endoftext|>
490,"<|endoftext|>remove newline in string ""Hello\n\n\n"" on the right side: 'Hello\n\n\n'.rstrip('\n')<|endoftext|>"
491,"<|endoftext|>split string `text` into chunks of 16 characters each: re.findall('.{,16}\\b', text)<|endoftext|>"
492,<|endoftext|>Get a list comprehension in list of lists `X`: [[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]<|endoftext|>
493,<|endoftext|>convert unicode string '\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0' to byte string: '\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0'.encode('latin-1')<|endoftext|>
494,<|endoftext|>split dataframe `df` where the value of column `a` is equal to 'B': df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())<|endoftext|>
495,"<|endoftext|>save json output from a url ‘http://search.twitter.com/search.json?q=hi’ to file ‘hi.json’ in Python 2: urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')<|endoftext|>"
496,<|endoftext|>Find indices of elements equal to zero from numpy array `x`: numpy.where((x == 0))[0]<|endoftext|>
497,<|endoftext|>flush output of python print: sys.stdout.flush()<|endoftext|>
498,<|endoftext|>convert `i` to string: str(i)<|endoftext|>
499,<|endoftext|>convert `a` to string: a.__str__()<|endoftext|>
500,<|endoftext|>convert `a` to string: str(a)<|endoftext|>
501,<|endoftext|>sort list of lists `L` by the second item in each list: L.sort(key=operator.itemgetter(1))<|endoftext|>
502,<|endoftext|>Print variable `count` and variable `conv` with space string '    ' in between: print(str(count) + '    ' + str(conv))<|endoftext|>
503,"<|endoftext|>change NaN values in dataframe `df` using preceding values in the frame: df.fillna(method='ffill', inplace=True)<|endoftext|>"
504,<|endoftext|>change the state of the Tkinter `Text` widget to read only i.e. `disabled`: text.config(state=DISABLED)<|endoftext|>
505,"<|endoftext|>python sum of ascii values of all characters in a string `string`: sum(map(ord, string))<|endoftext|>"
506,<|endoftext|>apply itertools.product to elements of a list of lists `arrays`: list(itertools.product(*arrays))<|endoftext|>
507,"<|endoftext|>print number `value` as thousands separators: '{:,}'.format(value)<|endoftext|>"
508,"<|endoftext|>print number 1255000 as thousands separators: locale.setlocale(locale.LC_ALL, 'en_US')
locale.format('%d', 1255000, grouping=True)<|endoftext|>"
509,"<|endoftext|>get rows of dataframe `df` where column `Col1` has values `['men', 'rocks', 'mountains']`: df[df.Col1.isin(['men', 'rocks', 'mountains'])]<|endoftext|>"
510,<|endoftext|>get the value at index 1 for each tuple in the list of tuples `L`: [x[1] for x in L]<|endoftext|>
511,"<|endoftext|>split unicode string ""раз два три"" into words: '\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438'.split()<|endoftext|>"
512,<|endoftext|>sort query set by number of characters in a field `length` in django model `MyModel`: MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')<|endoftext|>
513,"<|endoftext|>get a dictionary in list `dicts` which key 'ratio' is closer to a global value 1.77672955975: min(dicts, key=lambda x: (abs(1.77672955975 - x['ratio']), -x['pixels']))<|endoftext|>"
514,<|endoftext|>get the non-masked values of array `m`: m[~m.mask]<|endoftext|>
515,"<|endoftext|>Find all words containing letters between A and Z in string `formula`: re.findall('\\b[A-Z]', formula)<|endoftext|>"
516,"<|endoftext|>create a list `matrix` containing 5 lists, each of 5 items  all set to 0: matrix = [([0] * 5) for i in range(5)]<|endoftext|>"
517,"<|endoftext|>creating a numpy array of 3d coordinates from three 1d arrays `x_p`, `y_p` and `z_p`: np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T<|endoftext|>"
518,<|endoftext|>find the minimum value in a numpy array `arr` excluding 0: arr[arr != 0].min()<|endoftext|>
519,"<|endoftext|>get the text of multiple elements found by xpath ""//*[@type='submit']/@value"": browser.find_elements_by_xpath(""//*[@type='submit']/@value"").text<|endoftext|>"
520,"<|endoftext|>find all the values in attribute `value` for the tags whose `type` attribute is `submit` in selenium: browser.find_elements_by_xpath(""//*[@type='submit']"").get_attribute('value')<|endoftext|>"
521,"<|endoftext|>parse a YAML file ""example.yaml"": with open('example.yaml', 'r') as stream:
    try:
        print((yaml.load(stream)))
    except yaml.YAMLError as exc:
        print(exc)<|endoftext|>"
522,"<|endoftext|>parse a YAML file ""example.yaml"": with open('example.yaml') as stream:
    try:
        print((yaml.load(stream)))
    except yaml.YAMLError as exc:
        print(exc)<|endoftext|>"
523,"<|endoftext|>Sort the values of the dataframe `df` and align the columns accordingly based on the obtained indices after np.argsort.: pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))<|endoftext|>"
524,<|endoftext|>Getting today's date in YYYY-MM-DD: datetime.datetime.today().strftime('%Y-%m-%d')<|endoftext|>
525,<|endoftext|>urlencode a querystring 'string_of_characters_like_these:$#@=?%^Q^$' in python 2: urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')<|endoftext|>
526,"<|endoftext|>sort a dictionary `d` by length of its values and print as string: print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))<|endoftext|>"
527,"<|endoftext|>convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists: map(list, zip(*[(1, 2), (3, 4), (5, 6)]))<|endoftext|>"
530,"<|endoftext|>create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list 'myList': [(x, y) for x, y in zip(myList, myList[1:]) if y == 9]<|endoftext|>"
531,<|endoftext|>navigate to webpage given by url `http://www.python.org` using Selenium: driver.get('http://www.google.com.br')<|endoftext|>
532,<|endoftext|>reverse a UTF-8 string 'a': b = a.decode('utf8')[::-1].encode('utf8')<|endoftext|>
533,"<|endoftext|>extract date from a string 'monkey 2010-07-32 love banana': dparser.parse('monkey 2010-07-32 love banana', fuzzy=True)<|endoftext|>"
534,"<|endoftext|>extract date from a string 'monkey 20/01/1980 love banana': dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)<|endoftext|>"
535,"<|endoftext|>extract date from a string `monkey 10/01/1980 love banana`: dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)<|endoftext|>"
536,"<|endoftext|>Convert a list `['A:1', 'B:2', 'C:3', 'D:4']` to dictionary: dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))<|endoftext|>"
537,"<|endoftext|>check if string `the_string` contains any upper or lower-case ASCII letters: re.search('[a-zA-Z]', the_string)<|endoftext|>"
538,"<|endoftext|>convert a pandas `df1` groupby object to dataframe: DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()<|endoftext|>"
539,"<|endoftext|>remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `: re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')<|endoftext|>"
540,<|endoftext|>get items from list `a` that don't appear in list `b`: [y for y in a if y not in b]<|endoftext|>
541,<|endoftext|>extract the first four rows of the column `ID` from a pandas dataframe `df`: df.groupby('ID').head(4)<|endoftext|>
542,<|endoftext|>Unzip a list of tuples `l` into a list of lists: zip(*l)<|endoftext|>
543,"<|endoftext|>combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary: dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))<|endoftext|>"
544,"<|endoftext|>combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary: dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))<|endoftext|>"
545,<|endoftext|>retrieve the path from a Flask request: request.url<|endoftext|>
546,"<|endoftext|>replace carriage return in string `somestring` with empty string '': somestring.replace('\\r', '')<|endoftext|>"
547,"<|endoftext|>serialize dictionary `d` as a JSON formatted string with each key formatted to pattern '%d,%d': simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))<|endoftext|>"
548,"<|endoftext|>parse string ""Jun 1 2005  1:33PM"" into datetime by format ""%b %d %Y %I:%M%p"": datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')<|endoftext|>"
549,"<|endoftext|>parse string ""Aug 28 1999 12:00AM"" into datetime: parser.parse('Aug 28 1999 12:00AM')<|endoftext|>"
550,<|endoftext|>Get absolute folder path and filename for file `existGDBPath `: os.path.split(os.path.abspath(existGDBPath))<|endoftext|>
551,<|endoftext|>extract folder path from file path: os.path.dirname(os.path.abspath(existGDBPath))<|endoftext|>
552,"<|endoftext|>Execute a post request to url `http://httpbin.org/post` with json data `{'test': 'cheers'}`: requests.post('http://httpbin.org/post', json={'test': 'cheers'})<|endoftext|>"
553,<|endoftext|>remove dictionary from list `a` if the value associated with its key 'link' is in list `b`: a = [x for x in a if x['link'] not in b]<|endoftext|>
554,<|endoftext|>get a request parameter `a` in jinja2: {{request.args.get('a')}}<|endoftext|>
555,"<|endoftext|>create a list of integers between 2 values `11` and `17`: list(range(11, 17))<|endoftext|>"
556,<|endoftext|>Change data type of data in column 'grade' of dataframe `data_df` into float and then to int: data_df['grade'] = data_df['grade'].astype(float).astype(int)<|endoftext|>
557,"<|endoftext|>Find the list in a list of lists `alkaline_earth_values` with the max value of the second element.: max(alkaline_earth_values, key=lambda x: x[1])<|endoftext|>"
558,<|endoftext|>remove leading and trailing zeros in the string 'your_Strip': your_string.strip('0')<|endoftext|>
559,"<|endoftext|>generate a list of all unique pairs of integers in `range(9)`: list(permutations(list(range(9)), 2))<|endoftext|>"
560,"<|endoftext|>create a regular expression that matches the pattern '^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)' over multiple lines of text: re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)<|endoftext|>"
561,"<|endoftext|>regular expression ""^(.+)\\n((?:\\n.+)+)"" matching a multiline block of text: re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)<|endoftext|>"
562,"<|endoftext|>Run 'test2.py' file with python location 'path/to/python' and arguments 'neededArgumetGoHere' as a subprocess: call(['path/to/python', 'test2.py', 'neededArgumetGoHere'])<|endoftext|>"
563,"<|endoftext|>sort a multidimensional list `a` by second and third column: a.sort(key=operator.itemgetter(2, 3))<|endoftext|>"
564,"<|endoftext|>Add a tuple with value `another_choice` to a tuple `my_choices`: final_choices = ((another_choice,) + my_choices)<|endoftext|>"
565,"<|endoftext|>Add a tuple with value `another_choice` to a tuple `my_choices`: final_choices = ((another_choice,) + my_choices)<|endoftext|>"
566,<|endoftext|>find the current directory: os.getcwd()<|endoftext|>
567,<|endoftext|>find the current directory: os.path.realpath(__file__)<|endoftext|>
568,<|endoftext|>get the directory name of `path`: os.path.dirname(path)<|endoftext|>
569,<|endoftext|>get the canonical path of file `path`: os.path.realpath(path)<|endoftext|>
570,<|endoftext|>Find name of current directory: dir_path = os.path.dirname(os.path.realpath(__file__))<|endoftext|>
571,<|endoftext|>Find current directory: cwd = os.getcwd()<|endoftext|>
572,<|endoftext|>Find the full path of current directory: full_path = os.path.realpath(__file__)<|endoftext|>
573,"<|endoftext|>sort array `arr` in ascending order by values of the 3rd column: arr[arr[:, (2)].argsort()]<|endoftext|>"
574,"<|endoftext|>sort rows of numpy matrix `arr` in ascending order according to all column values: numpy.sort(arr, axis=0)<|endoftext|>"
575,"<|endoftext|>split string 'a b.c' on space "" "" and dot character ""."": re.split('[ .]', 'a b.c')<|endoftext|>"
576,"<|endoftext|>copy the content of file 'file.txt' to file 'file2.txt': shutil.copy('file.txt', 'file2.txt')<|endoftext|>"
577,<|endoftext|>generate random upper-case ascii string of 12 characters length: print(''.join(choice(ascii_uppercase) for i in range(12)))<|endoftext|>
578,"<|endoftext|>merge the elements in a list `lst` sequentially: [''.join(seq) for seq in zip(lst, lst[1:])]<|endoftext|>"
579,"<|endoftext|>rename column 'gdp' in dataframe `data` to 'log(gdp)': data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)<|endoftext|>"
580,<|endoftext|>convert a beautiful soup html `soup` to text: print(soup.get_text())<|endoftext|>
581,"<|endoftext|>Sort list `li` in descending order based on the second element of each list inside list`li`: sorted(li, key=operator.itemgetter(1), reverse=True)<|endoftext|>"
582,"<|endoftext|>replace value 0 with 'Female' and value 1 with 'Male' in column 'sex' of dataframe `data`: data['sex'].replace([0, 1], ['Female', 'Male'], inplace=True)<|endoftext|>"
583,"<|endoftext|>split string 'Words, words, words.' on punctuation: re.split('\\W+', 'Words, words, words.')<|endoftext|>"
584,"<|endoftext|>Extract first two substrings in string `phrase` that end in `.`, `?` or `!`: re.match('(.*?[.?!](?:\\s+.*?[.?!]){0,1})', phrase).group(1)<|endoftext|>"
585,"<|endoftext|>split string `s` into strings of repeating elements: print([a for a, b in re.findall('((\\w)\\2*)', s)])<|endoftext|>"
586,<|endoftext|>Create new string with unique characters from `s` seperated by ' ': print(' '.join(OrderedDict.fromkeys(s)))<|endoftext|>
587,<|endoftext|>create a set from string `s` to remove duplicate characters: print(' '.join(set(s)))<|endoftext|>
588,<|endoftext|>list folders in zip file 'file' that ends with '/': [x for x in file.namelist() if x.endswith('/')]<|endoftext|>
589,<|endoftext|>find the count of a word 'Hello' in a string `input_string`: input_string.count('Hello')<|endoftext|>
590,"<|endoftext|>reduce the first element of list of strings `data` to a string, separated by '.': print('.'.join([item[0] for item in data]))<|endoftext|>"
591,<|endoftext|>Move the cursor of file pointer `fh1` at the end of the file.: fh1.seek(2)<|endoftext|>
592,"<|endoftext|>convert a flat list into a list of tuples of every two items in the list, in order: print(zip(my_list[0::2], my_list[1::2]))<|endoftext|>"
593,"<|endoftext|>group a list of ints into a list of tuples of each 2 elements: my_new_list = zip(my_list[0::2], my_list[1::2])<|endoftext|>"
594,<|endoftext|>set the default encoding to 'utf-8': sys.setdefaultencoding('utf8')<|endoftext|>
595,<|endoftext|>Formate current date and time to a string using pattern '%Y-%m-%d %H:%M:%S': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')<|endoftext|>
596,"<|endoftext|>retrieve arabic texts from string `my_string`: print(re.findall('[\\u0600-\\u06FF]+', my_string))<|endoftext|>"
597,<|endoftext|>group dataframe `df` based on minute interval: df.groupby(df.index.map(lambda t: t.minute))<|endoftext|>
598,<|endoftext|>access value associated with key 'American' of key 'Apple' from dictionary `dict`: dict['Apple']['American']<|endoftext|>
599,"<|endoftext|>remove all null values from columns 'three', 'four' and 'five' of dataframe `df2`: df2.dropna(subset=['three', 'four', 'five'], how='all')<|endoftext|>"
600,"<|endoftext|>insert a list `k` at the front of list `a`: a.insert(0, k)<|endoftext|>"
601,<|endoftext|>insert elements of list `k` into list `a` at position `n`: a = a[:n] + k + a[n:]<|endoftext|>
602,<|endoftext|>calculate the mean of the nonzero values' indices of dataframe `df`: np.flatnonzero(x).mean()<|endoftext|>
603,<|endoftext|>get date from dataframe `df` column 'dates' to column 'just_date': df['just_date'] = df['dates'].dt.date<|endoftext|>
604,<|endoftext|>remove elements in list `b` from list `a`: [x for x in a if x not in b]<|endoftext|>
605,<|endoftext|>join elements of each tuple in list `a` into one string: [''.join(x) for x in a]<|endoftext|>
606,"<|endoftext|>join items of each tuple in list of tuples `a` into a list of strings: list(map(''.join, a))<|endoftext|>"
607,"<|endoftext|>match blank lines in `s` with regular expressions: re.split('\n\\s*\n', s)<|endoftext|>"
608,"<|endoftext|>merge a list of integers `[1, 2, 3, 4, 5]` into a single integer: from functools import reduce
reduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])<|endoftext|>"
609,"<|endoftext|>Convert float 24322.34 to comma-separated string: """"""{0:,.2f}"""""".format(24322.34)<|endoftext|>"
610,<|endoftext|>pass dictionary items `data` as keyword arguments in function `my_function`: my_function(**data)<|endoftext|>
611,<|endoftext|>get line count of file 'myfile.txt': sum((1 for line in open('myfile.txt')))<|endoftext|>
612,"<|endoftext|>get line count of file `filename`: def bufcount(filename):
    f = open(filename)
    lines = 0
    buf_size = (1024 * 1024)
    read_f = f.read
    buf = read_f(buf_size)
    while buf:
        lines += buf.count('\n')
        buf = read_f(buf_size)
    return lines<|endoftext|>"
613,"<|endoftext|>round 1123.456789 to be an integer: print(round(1123.456789, -1))<|endoftext|>"
614,"<|endoftext|>sort list `X` based on values from another list `Y`: [x for y, x in sorted(zip(Y, X))]<|endoftext|>"
615,"<|endoftext|>sorting list 'X' based on values from another list 'Y': [x for y, x in sorted(zip(Y, X))]<|endoftext|>"
616,"<|endoftext|>get equivalent week number from a date `2010/6/16` using  isocalendar: datetime.date(2010, 6, 16).isocalendar()[1]<|endoftext|>"
617,"<|endoftext|>select multiple ranges of columns 1-10, 15, 17, and 50-100 in pandas dataframe `df`: df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]<|endoftext|>"
618,"<|endoftext|>apply two different aggregating functions `mean` and `sum` to the same column `dummy` in pandas data frame `df`: df.groupby('dummy').agg({'returns': [np.mean, np.sum]})<|endoftext|>"
619,<|endoftext|>convert string `s` to lowercase: s.lower()<|endoftext|>
620,<|endoftext|>convert utf-8 string `s` to lowercase: s.decode('utf-8').lower()<|endoftext|>
622,"<|endoftext|>handle the `urlfetch_errors ` exception for imaplib request to url `url`: urlfetch.fetch(url, deadline=10 * 60)<|endoftext|>"
623,<|endoftext|>output first 100 characters in a string `my_string`: print(my_string[0:100])<|endoftext|>
624,<|endoftext|>make matplotlib plot legend put marker in legend only once: legend(numpoints=1)<|endoftext|>
625,"<|endoftext|>get set intersection between dictionaries `d1` and `d2`: dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())<|endoftext|>"
626,"<|endoftext|>convert csv file 'test.csv' into two-dimensional matrix: numpy.loadtxt(open('test.csv', 'rb'), delimiter=',', skiprows=1)<|endoftext|>"
627,"<|endoftext|>filter the objects in django model 'Sample' between date range `2011-01-01` and `2011-01-31`: Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])<|endoftext|>"
628,"<|endoftext|>filter objects month wise in django model `Sample` for year `2011`: Sample.objects.filter(date__year='2011', date__month='01')<|endoftext|>"
629,"<|endoftext|>create a dictionary `{'spam': 5, 'ham': 6}` into another dictionary `d` field 'dict3': d['dict3'] = {'spam': 5, 'ham': 6}<|endoftext|>"
630,"<|endoftext|>apply `numpy.linalg.norm` to each row of a matrix `a`: numpy.apply_along_axis(numpy.linalg.norm, 1, a)<|endoftext|>"
631,"<|endoftext|>merge dictionaries form array `dicts` in a single expression: dict((k, v) for d in dicts for k, v in list(d.items()))<|endoftext|>"
632,<|endoftext|>Convert escaped utf string to utf string in `your string`: print('your string'.decode('string_escape'))<|endoftext|>
633,"<|endoftext|>counting the number of true booleans in a python list `[True, True, False, False, False, True]`: sum([True, True, False, False, False, True])<|endoftext|>"
634,"<|endoftext|>set the size of figure `fig` in inches to width height of `w`, `h`: fig.set_size_inches(w, h, forward=True)<|endoftext|>"
635,<|endoftext|>format string with dict `{'5': 'you'}` with integer keys: 'hello there %(5)s' % {'5': 'you'}<|endoftext|>
636,"<|endoftext|>Convert a string of numbers `example_string` separated by `,` into a list of integers: map(int, example_string.split(','))<|endoftext|>"
637,"<|endoftext|>Convert a string of numbers 'example_string' separated by comma into a list of numbers: [int(s) for s in example_string.split(',')]<|endoftext|>"
638,<|endoftext|>Flatten list `x`: x = [i[0] for i in x]<|endoftext|>
639,"<|endoftext|>convert list `x` into a flat list: y = map(operator.itemgetter(0), x)<|endoftext|>"
640,<|endoftext|>get a list `y` of the first element of every tuple in list `x`: y = [i[0] for i in x]<|endoftext|>
641,<|endoftext|>extract all the values of a specific key named 'values' from a list of dictionaries: results = [item['value'] for item in test_data]<|endoftext|>
642,<|endoftext|>get current datetime in ISO format: datetime.datetime.now().isoformat()<|endoftext|>
643,<|endoftext|>get UTC datetime in ISO format: datetime.datetime.utcnow().isoformat()<|endoftext|>
644,"<|endoftext|>Merge all columns in dataframe `df` into one column: df.apply(' '.join, axis=0)<|endoftext|>"
645,"<|endoftext|>pandas subtract a row from dataframe `df2` from dataframe `df`: pd.DataFrame(df.values - df2.values, columns=df.columns)<|endoftext|>"
646,"<|endoftext|>read file 'myfile.txt' using universal newline mode 'U': print(open('myfile.txt', 'U').read())<|endoftext|>"
647,<|endoftext|>print line `line` from text file with 'utf-16-le' format: print(line.decode('utf-16-le').split())<|endoftext|>
648,"<|endoftext|>open a text file `data.txt` in io module with encoding `utf-16-le`: file = io.open('data.txt', 'r', encoding='utf-16-le')<|endoftext|>"
649,"<|endoftext|>Join data of dataframe `df1` with data in dataframe `df2` based on similar values of column 'user_id' in both dataframes: s1 = pd.merge(df1, df2, how='inner', on=['user_id'])<|endoftext|>"
650,<|endoftext|>check if string `foo` is UTF-8 encoded: foo.decode('utf8').encode('utf8')<|endoftext|>
651,<|endoftext|>get the dimensions of numpy array `a`: a.shape<|endoftext|>
652,<|endoftext|>get the dimensions of numpy array `a`: N.shape(a)<|endoftext|>
653,<|endoftext|>get the dimensions of array `a`: N.shape(a)<|endoftext|>
654,<|endoftext|>get the dimensions of numpy array `a`: a.shape<|endoftext|>
655,"<|endoftext|>get the indices of tuples in list of tuples `L` where the first value is 53: [i for i, v in enumerate(L) if v[0] == 53]<|endoftext|>"
656,"<|endoftext|>convert string of bytes `y\xcc\xa6\xbb` into an int: struct.unpack('<L', 'y\xcc\xa6\xbb')[0]<|endoftext|>"
657,"<|endoftext|>get the first row, second column; second row, first column, and first row third column values of numpy array `arr`: arr[[0, 1, 1], [1, 0, 2]]<|endoftext|>"
658,<|endoftext|>create a list with permutations of string 'abcd': list(powerset('abcd'))<|endoftext|>
659,"<|endoftext|>Convert string to boolean from defined set of strings: s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']<|endoftext|>"
660,<|endoftext|>replace special characters in url 'http://spam.com/go/' using the '%xx' escape: urllib.parse.quote('http://spam.com/go/')<|endoftext|>
661,<|endoftext|>Save plot `plt` as svg file 'test.svg': plt.savefig('test.svg')<|endoftext|>
662,<|endoftext|>count the number of elements in array `myArray`: len(myArray)<|endoftext|>
663,"<|endoftext|>insert directory './path/to/your/modules/' to current directory: sys.path.insert(0, './path/to/your/modules/')<|endoftext|>"
665,"<|endoftext|>Insert records in bulk from ""table1"" of ""master"" DB to ""table1"" of  sqlite3 `cursor` object: cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')<|endoftext|>"
666,"<|endoftext|>Match regex '[a-zA-Z][\\w-]*\\Z' on string 'A\n': re.match('[a-zA-Z][\\w-]*\\Z', 'A\n')<|endoftext|>"
667,"<|endoftext|>match regex '[a-zA-Z][\\w-]*$' on string '!A_B': re.match('[a-zA-Z][\\w-]*$', '!A_B')<|endoftext|>"
668,"<|endoftext|>Convert hex string ""deadbeef"" to integer: int('deadbeef', 16)<|endoftext|>"
669,"<|endoftext|>Convert hex string ""a"" to integer: int('a', 16)<|endoftext|>"
670,"<|endoftext|>Convert hex string ""0xa"" to integer: int('0xa', 16)<|endoftext|>"
671,"<|endoftext|>Convert hex string `s` to integer: int(s, 16)<|endoftext|>"
672,"<|endoftext|>Convert hex string `hexString` to int: int(hexString, 16)<|endoftext|>"
673,"<|endoftext|>print variable `value ` without spaces: print('Value is ""' + str(value) + '""')<|endoftext|>"
674,"<|endoftext|>Print a string `value` with string formatting: print('Value is ""{}""'.format(value))<|endoftext|>"
675,<|endoftext|>Jinja join elements of array `tags` with space string ' ': {{tags | join(' ')}}<|endoftext|>
676,<|endoftext|>get a list of locally installed Python modules: help('modules')<|endoftext|>
677,<|endoftext|>Get only first element in each of the innermost of the multidimensional list `listD`: [[[x[0]] for x in listD[i]] for i in range(len(listD))]<|endoftext|>
678,"<|endoftext|>Sort a string `s` in lexicographic order: sorted(s, key=str.upper)<|endoftext|>"
679,"<|endoftext|>sort string `s` in lexicographic order: sorted(sorted(s), key=str.upper)<|endoftext|>"
680,"<|endoftext|>get a sorted list of the characters of string `s` in lexicographic order, with lowercase letters first: sorted(s, key=str.lower)<|endoftext|>"
681,"<|endoftext|>find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1', for the columns 'A', 'B', 'C' and 'D'.: pd.merge(df1, df2, on=['A', 'B', 'C', 'D'], how='inner')<|endoftext|>"
682,"<|endoftext|>Reverse key-value pairs in a dictionary `map`: dict((v, k) for k, v in map.items())<|endoftext|>"
683,<|endoftext|>decode unicode string `s` into a readable unicode literal: s.decode('unicode_escape')<|endoftext|>
684,<|endoftext|>convert list of strings `str_list` into list of integers: [int(i) for i in str_list]<|endoftext|>
685,"<|endoftext|>convert a list with string `['1', '2', '3']` into list with integers: map(int, ['1', '2', '3'])<|endoftext|>"
686,"<|endoftext|>convert list with str into list with int: list(map(int, ['1', '2', '3']))<|endoftext|>"
687,"<|endoftext|>find all anchor tags in html `soup` whose url begins with `http://www.iwashere.com`: soup.find_all('a', href=re.compile('http://www\\.iwashere\\.com/'))<|endoftext|>"
688,"<|endoftext|>find all anchors with a hyperlink that matches the pattern '^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))': soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))<|endoftext|>"
689,"<|endoftext|>execute a jar file 'Blender.jar' using subprocess: subprocess.call(['java', '-jar', 'Blender.jar'])<|endoftext|>"
690,"<|endoftext|>insert row into mysql database with column 'column1' set to the value `value`: cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))<|endoftext|>"
691,"<|endoftext|>remove a substring "".com"" from the end of string `url`: if url.endswith('.com'):
    url = url[:(-4)]<|endoftext|>"
692,"<|endoftext|>remove a substring "".com"" from the end of string `url`: url = re.sub('\\.com$', '', url)<|endoftext|>"
693,"<|endoftext|>remove a substring "".com"" from the end of string `url`: print(url.replace('.com', ''))<|endoftext|>"
694,"<|endoftext|>remove a substring `suffix` from the end of string `text`: if (not text.endswith(suffix)):
    return text
return text[:(len(text) - len(suffix))]<|endoftext|>"
695,"<|endoftext|>print each first value from a list of tuples `mytuple` with string formatting: print(', ,'.join([str(i[0]) for i in mytuple]))<|endoftext|>"
696,"<|endoftext|>clamping floating number `my_value` to be between `min_value` and `max_value`: max(min(my_value, max_value), min_value)<|endoftext|>"
697,"<|endoftext|>split a unicode string `text` into a list of words and punctuation characters with a regex: re.findall('\\w+|[^\\w\\s]', text, re.UNICODE)<|endoftext|>"
698,<|endoftext|>execute raw sql queue '<sql here>' in database `db` in sqlalchemy-flask app: result = db.engine.execute('<sql here>')<|endoftext|>
699,<|endoftext|>quit program: sys.exit(0)<|endoftext|>
700,"<|endoftext|>get digits in string `my_string`: """""""""""".join(c for c in my_string if c.isdigit())<|endoftext|>"
701,"<|endoftext|>split string `str1` on one or more spaces with a regular expression: re.split(' +', str1)<|endoftext|>"
703,"<|endoftext|>Evaluate a nested dictionary `myobject.id.number` to get `number` if `myobject` is present with getattr: getattr(getattr(myobject, 'id', None), 'number', None)<|endoftext|>"
704,<|endoftext|>convert generator object to a dictionary: {i: (i * 2) for i in range(10)}<|endoftext|>
705,"<|endoftext|>convert generator object to a dictionary: dict((i, i * 2) for i in range(10))<|endoftext|>"
706,<|endoftext|>Matplotlib clear the current axes.: plt.cla()<|endoftext|>
707,"<|endoftext|>split string `s` into float values and write sum to `total`: total = sum(float(item) for item in s.split(','))<|endoftext|>"
708,<|endoftext|>Convert ascii value 'P' to binary: bin(ord('P'))<|endoftext|>
709,"<|endoftext|>print a string after a specific substring ', ' in string `my_string `: print(my_string.split(', ', 1)[1])<|endoftext|>"
710,<|endoftext|>get value of key `post code` associated with first index of key `places` of dictionary `data`: print(data['places'][0]['post code'])<|endoftext|>
711,"<|endoftext|>remove colon character surrounded by vowels letters in string `word`: word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\1\\2', word)<|endoftext|>"
712,"<|endoftext|>extract data field 'bar' from json object: json.loads('{""foo"": 42, ""bar"": ""baz""}')['bar']<|endoftext|>"
713,<|endoftext|>Convert JSON array `array` to Python object: data = json.loads(array)<|endoftext|>
714,<|endoftext|>Convert JSON array `array` to Python object: data = json.loads(array)<|endoftext|>
715,"<|endoftext|>pars a string 'http://example.org/#comments' to extract hashtags into an array: re.findall('#(\\w+)', 'http://example.org/#comments')<|endoftext|>"
716,<|endoftext|>do a boolean check if a string `lestring` contains any of the items in list `lelist`: any(e in lestring for e in lelist)<|endoftext|>
718,"<|endoftext|>Parsing HTML string `html` using BeautifulSoup: parsed_html = BeautifulSoup(html)
print(parsed_html.body.find('div', attrs={'class': 'container', }).text)<|endoftext|>"
719,"<|endoftext|>Parsing webpage 'http://www.google.com/' using BeautifulSoup: page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)<|endoftext|>"
720,"<|endoftext|>change figure size to 3 by 4 in matplotlib: plt.figure(figsize=(3, 4))<|endoftext|>"
721,"<|endoftext|>Strip punctuation from string `s`: s.translate(None, string.punctuation)<|endoftext|>"
722,<|endoftext|>django urlsafe base64 decode string `uenc` with decryption: base64.urlsafe_b64decode(uenc.encode('ascii'))<|endoftext|>
723,<|endoftext|>get the number of all keys in the nested dictionary `dict_list`: len(dict_test) + sum(len(v) for v in dict_test.values())<|endoftext|>
724,<|endoftext|>return the conversion of decimal `d` to hex without the '0x' prefix: hex(d).split('x')[1]<|endoftext|>
725,<|endoftext|>create a list containing digits of number 123 as its elements: list(str(123))<|endoftext|>
726,<|endoftext|>converting integer `num` to list: [int(x) for x in str(num)]<|endoftext|>
727,<|endoftext|>select a first form with no name in mechanize: br.select_form(nr=0)<|endoftext|>
728,"<|endoftext|>Open file 'sample.json' in read mode with encoding of 'utf-8-sig': json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))<|endoftext|>"
729,<|endoftext|>load json file 'sample.json' with utf-8 bom header: json.loads(open('sample.json').read().decode('utf-8-sig'))<|endoftext|>
730,"<|endoftext|>setup a smtp mail server to `smtp.gmail.com` with port `587`: server = smtplib.SMTP('smtp.gmail.com', 587)<|endoftext|>"
731,"<|endoftext|>revers correlating bits of integer `n`: int('{:08b}'.format(n)[::-1], 2)<|endoftext|>"
732,"<|endoftext|>add column `d` to index of dataframe `df`: df.set_index(['d'], append=True)<|endoftext|>"
733,"<|endoftext|>Iterating over a dictionary `d` using for loops: for (key, value) in d.items():
    pass<|endoftext|>"
734,"<|endoftext|>Iterating over a dictionary `d` using for loops: for (key, value) in list(d.items()):
    pass<|endoftext|>"
735,"<|endoftext|>Iterating key and items over dictionary `d`: for (letter, number) in list(d.items()):
    pass<|endoftext|>"
736,"<|endoftext|>Iterating key and items over dictionary `d`: for (k, v) in list(d.items()):
    pass<|endoftext|>"
737,<|endoftext|>get keys and items of dictionary `d`: list(d.items())<|endoftext|>
738,<|endoftext|>get keys and items of dictionary `d` as a list: list(d.items())<|endoftext|>
739,"<|endoftext|>Iterating key and items over dictionary `d`: for (k, v) in list(d.items()):
    pass<|endoftext|>"
740,"<|endoftext|>Iterating key and items over dictionary `d`: for (letter, number) in list(d.items()):
    pass<|endoftext|>"
741,"<|endoftext|>Iterating key and items over dictionary `d`: for (letter, number) in list(d.items()):
    pass<|endoftext|>"
742,<|endoftext|>query all data from table `Task` where the value of column `time_spent` is bigger than 3 hours: session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()<|endoftext|>
743,<|endoftext|>compile Visual Studio project `project.sln` from the command line through python: os.system('msbuild project.sln /p:Configuration=Debug')<|endoftext|>
744,"<|endoftext|>get max key in dictionary `MyCount`: max(list(MyCount.keys()), key=int)<|endoftext|>"
745,<|endoftext|>execute command 'source .bashrc; shopt -s expand_aliases; nuke -x scriptPath' from python script: os.system('source .bashrc; shopt -s expand_aliases; nuke -x scriptPath')<|endoftext|>
746,<|endoftext|>get a name of function `my_function` as a string: my_function.__name__<|endoftext|>
748,"<|endoftext|>check if all values in the columns of a numpy matrix `a` are same: np.all(a == a[(0), :], axis=0)<|endoftext|>"
749,"<|endoftext|>sort list `a` in ascending order based on the addition of the second and third elements of each tuple in it: sorted(a, key=lambda x: (sum(x[1:3]), x[0]))<|endoftext|>"
750,"<|endoftext|>sort a list of tuples `a` by the sum of second and third element of each tuple: sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)<|endoftext|>"
751,"<|endoftext|>sorting a list of tuples `lst` by the sum of the second elements onwards, and third element of the tuple: sorted(lst, key=lambda x: (sum(x[1:]), x[0]))<|endoftext|>"
752,"<|endoftext|>sort the list of tuples `lst` by the sum of every value except the first and by the first value in reverse order: sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)<|endoftext|>"
753,"<|endoftext|>add header 'WWWAuthenticate' in a flask app with value 'Basic realm=""test""': response.headers['WWW-Authenticate'] = 'Basic realm=""test""'<|endoftext|>"
754,<|endoftext|>clear session key 'mykey': del request.session['mykey']<|endoftext|>
755,"<|endoftext|>convert date string '24052010' to date object in format '%d%m%Y': datetime.datetime.strptime('24052010', '%d%m%Y').date()<|endoftext|>"
756,"<|endoftext|>Replace non-ASCII characters in string `text` with a single space: re.sub('[^\\x00-\\x7F]+', ' ', text)<|endoftext|>"
758,<|endoftext|>Get a list `myList` from 1 to 10: myList = [i for i in range(10)]<|endoftext|>
759,<|endoftext|>use regex pattern '((.+?)\\2+)' to split string '44442(2)2(2)44': [m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]<|endoftext|>
760,"<|endoftext|>use regular expression '((\\d)(?:[()]*\\2*[()]*)*)' to split string `s`: [i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]<|endoftext|>"
761,"<|endoftext|>remove the space between subplots in matplotlib.pyplot: fig.subplots_adjust(wspace=0, hspace=0)<|endoftext|>"
762,<|endoftext|>Reverse list `x`: x[::-1]<|endoftext|>
764,<|endoftext|>write a list of strings `row` to csv object `csvwriter`: csvwriter.writerow(row)<|endoftext|>
765,<|endoftext|>Jinja2 formate date `item.date` accorto pattern 'Y M d': {{(item.date | date): 'Y M d'}}<|endoftext|>
766,"<|endoftext|>Split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind: re.split('(?<=[\\.\\?!]) ', text)<|endoftext|>"
767,<|endoftext|>create a regular expression object with the pattern '\xe2\x80\x93': re.compile('\xe2\x80\x93')<|endoftext|>
768,<|endoftext|>declare an array `variable`: variable = []<|endoftext|>
769,<|endoftext|>declare an array with element 'i': intarray = array('i')<|endoftext|>
770,"<|endoftext|>given list `to_reverse`, reverse the all sublists and the list itself: [sublist[::-1] for sublist in to_reverse[::-1]]<|endoftext|>"
772,"<|endoftext|>unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`: """""""""""".join(['I ', '<', '3s U ', '&', ' you luvz me'])<|endoftext|>"
773,<|endoftext|>disable logging while running unit tests in python django: logging.disable(logging.CRITICAL)<|endoftext|>
774,"<|endoftext|>adding url `url` to mysql row: cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))<|endoftext|>"
775,<|endoftext|>convert column of date objects 'DateObj' in pandas dataframe `df` to strings in new column 'DateStr': df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')<|endoftext|>
776,<|endoftext|>split string `s` by '@' and get the first element: s.split('@')[0]<|endoftext|>
777,<|endoftext|>drop rows of dataframe `df` whose index is smaller than the value of `start_remove` or bigger than the value of`end_remove`: df.query('index < @start_remove or index > @end_remove')<|endoftext|>
778,<|endoftext|>Drop the rows in pandas timeseries `df` from the row containing index `start_remove` to the row containing index `end_remove`: df.loc[(df.index < start_remove) | (df.index > end_remove)]<|endoftext|>
779,<|endoftext|>Get the number of NaN values in each column of dataframe `df`: df.isnull().sum()<|endoftext|>
780,<|endoftext|>reset index of dataframe `df`so that existing index values are transferred into `df`as columns: df.reset_index(inplace=True)<|endoftext|>
781,<|endoftext|>generate a list containing values associated with the key 'value' of each dictionary inside list `list_of_dicts`: [x['value'] for x in list_of_dicts]<|endoftext|>
784,"<|endoftext|>convert numpy array into python list structure: np.array([[1, 2, 3], [4, 5, 6]]).tolist()<|endoftext|>"
785,"<|endoftext|>converting string '(1,2,3,4)' to a tuple: ast.literal_eval('(1,2,3,4)')<|endoftext|>"
786,<|endoftext|>keep a list `dataList` of lists sorted as it is created by second element: dataList.sort(key=lambda x: x[1])<|endoftext|>
787,"<|endoftext|>remove duplicated items from list of lists `testdata`: list(map(list, set(map(lambda i: tuple(i), testdata))))<|endoftext|>"
788,<|endoftext|>uniqueness for list of lists `testdata`: [list(i) for i in set(tuple(i) for i in testdata)]<|endoftext|>
789,"<|endoftext|>in django, check if a user is in a group 'Member': return user.groups.filter(name='Member').exists()<|endoftext|>"
790,"<|endoftext|>check if a user `user` is in a group from list of groups `['group1', 'group2']`: return user.groups.filter(name__in=['group1', 'group2']).exists()<|endoftext|>"
791,<|endoftext|>Change log level dynamically to 'DEBUG' without restarting the application: logging.getLogger().setLevel(logging.DEBUG)<|endoftext|>
792,"<|endoftext|>Concat each values in a tuple `(34.2424, -64.2344, 76.3534, 45.2344)` to get a string: """""""""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))<|endoftext|>"
793,"<|endoftext|>swap each pair of characters in string `s`: """""""""""".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])<|endoftext|>"
794,"<|endoftext|>save current figure to file 'graph.png' with resolution of 1000 dpi: plt.savefig('graph.png', dpi=1000)<|endoftext|>"
795,<|endoftext|>delete items from list `my_list` if the item exist in list `to_dell`: my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]<|endoftext|>
796,<|endoftext|>find all the elements that consists value '1' in a list of tuples 'a': [item for item in a if 1 in item]<|endoftext|>
797,<|endoftext|>find all elements in a list of tuples `a` where the first element of each tuple equals 1: [item for item in a if item[0] == 1]<|endoftext|>
798,"<|endoftext|>Get the index value in list `p_list` using enumerate in list comprehension: {p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}<|endoftext|>"
800,"<|endoftext|>load a file `file.py` into the python console: exec(compile(open('file.py').read(), 'file.py', 'exec'))<|endoftext|>"
801,<|endoftext|>SQLAlchemy count the number of rows in table `Congress`: rows = session.query(Congress).count()<|endoftext|>
803,"<|endoftext|>read excel file `file_name` using pandas: dfs = pd.read_excel(file_name, sheetname=None)<|endoftext|>"
804,"<|endoftext|>unpack the binary data represented by the hexadecimal string '4081637ef7d0424a' to a float: struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))<|endoftext|>"
805,<|endoftext|>Get index of numpy array `a` with another numpy array `b`: a[tuple(b)]<|endoftext|>
806,"<|endoftext|>find all possible sequences of elements in a list `[2, 3, 4]`: map(list, permutations([2, 3, 4]))<|endoftext|>"
807,"<|endoftext|>sort a list `unsorted_list` based on another sorted list `presorted_list`: sorted(unsorted_list, key=presorted_list.index)<|endoftext|>"
809,"<|endoftext|>create a dataframe `d` filled with zeros with indices from 0 to length of `data` and column names from `feature_list`: d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)<|endoftext|>"
810,<|endoftext|>find the index of sub string 'World' in `x`: x.find('World')<|endoftext|>
811,<|endoftext|>find the index of sub string 'Aloha' in `x`: x.find('Aloha')<|endoftext|>
812,<|endoftext|>find the index of sub string 'cc' in string 'sdfasdf': 'sdfasdf'.index('cc')<|endoftext|>
813,<|endoftext|>find the index of sub string 'df' in string 'sdfasdf': 'sdfasdf'.index('df')<|endoftext|>
814,<|endoftext|>find the index of sub string 'a' in string `str`: str.find('a')<|endoftext|>
815,<|endoftext|>find the index of sub string 'g' in string `str`: str.find('g')<|endoftext|>
816,"<|endoftext|>find the index of sub string 's' in string `str` starting from index 11: str.find('s', 11)<|endoftext|>"
817,"<|endoftext|>find the index of sub string 's' in string `str` starting from index 15: str.find('s', 15)<|endoftext|>"
818,"<|endoftext|>find the index of sub string 's' in string `str` starting from index 16: str.find('s', 16)<|endoftext|>"
819,"<|endoftext|>find the index of sub string 's' in string `str` starting from index 11 and ending at index 14: str.find('s', 11, 14)<|endoftext|>"
820,"<|endoftext|>sort list of date strings 'd': sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))<|endoftext|>"
821,"<|endoftext|>Get all the sentences from a string `text` using regex: re.split('\\.\\s', text)<|endoftext|>"
823,"<|endoftext|>get all characters in string 'foobar' up to the fourth index: """"""foobar""""""[:4]<|endoftext|>"
824,<|endoftext|>cut a string by delimiter '&': s.rfind('&')<|endoftext|>
825,<|endoftext|>cut a string using delimiter '&': s[:s.rfind('&')]<|endoftext|>
826,"<|endoftext|>find a tag `option` whose `value` attribute is `state` in selenium: driver.find_element_by_xpath(""//option[@value='"" + state + ""']"").click()<|endoftext|>"
827,"<|endoftext|>append line ""appended text"" to file ""test.txt"": with open('test.txt', 'a') as myfile:
    myfile.write('appended text')<|endoftext|>"
828,"<|endoftext|>append line ""cool beans..."" to file ""foo"": with open('foo', 'a') as f:
    f.write('cool beans...')<|endoftext|>"
829,"<|endoftext|>append to file 'test1' content 'koko': with open('test1', 'ab') as f:
    pass<|endoftext|>"
830,"<|endoftext|>append to file 'test' content 'koko': open('test', 'a+b').write('koko')<|endoftext|>"
831,"<|endoftext|>split string 'x+13.5*10x-4e1' into tokens: print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])<|endoftext|>"
832,"<|endoftext|>Find all Chinese characters in string `ipath`: re.findall('[\u4e00-\u9fff]+', ipath)<|endoftext|>"
833,<|endoftext|>split string `s` by letter 's': s.split('s')<|endoftext|>
834,"<|endoftext|>run shell command 'rm -r some.file' in the background: subprocess.Popen(['rm', '-r', 'some.file'])<|endoftext|>"
835,"<|endoftext|>convert a list of dictionaries `listofdict into a dictionary of dictionaries: dict((d['name'], d) for d in listofdict)<|endoftext|>"
836,<|endoftext|>print current date and time in a regular format: datetime.datetime.now().strftime('%Y-%m-%d %H:%M')<|endoftext|>
837,<|endoftext|>print current date and time in a regular format: time.strftime('%Y-%m-%d %H:%M')<|endoftext|>
838,"<|endoftext|>find consecutive consonants in a word `CONCENTRATION` using regex: re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)<|endoftext|>"
839,"<|endoftext|>get a list of indices of non zero elements in a list `a`: [i for i, e in enumerate(a) if e != 0]<|endoftext|>"
840,"<|endoftext|>get multiple integer values from a string 'string1': map(int, re.findall('\\d+', string1))<|endoftext|>"
841,<|endoftext|>get the path of Python executable under windows: os.path.dirname(sys.executable)<|endoftext|>
842,<|endoftext|>move an x-axis label to the top of a plot `ax` in matplotlib: ax.xaxis.set_label_position('top')<|endoftext|>
843,<|endoftext|>move x-axis to the top of a plot `ax`: ax.xaxis.tick_top()<|endoftext|>
844,<|endoftext|>Move x-axis of the pyplot object `ax` to the top of a plot in matplotlib: ax.xaxis.set_ticks_position('top')<|endoftext|>
845,"<|endoftext|>parse string '2015/01/01 12:12am' to DateTime object using format '%Y/%m/%d %I:%M%p': datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')<|endoftext|>"
846,"<|endoftext|>Open image 'picture.jpg': img = Image.open('picture.jpg')
img.show()<|endoftext|>"
847,"<|endoftext|>Open image ""picture.jpg"": img = Image.open('picture.jpg')
Img.show<|endoftext|>"
848,<|endoftext|>terminate the script using status value 0: sys.exit(0)<|endoftext|>
849,<|endoftext|>abort the execution of the script using message 'aa! errors!': sys.exit('aa! errors!')<|endoftext|>
850,<|endoftext|>abort the execution of a python script: sys.exit()<|endoftext|>
851,"<|endoftext|>find maximum with lookahead = 4 in a list `arr`: [max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]<|endoftext|>"
852,<|endoftext|>set the current working directory to 'c:\\Users\\uname\\desktop\\python': os.chdir('c:\\Users\\uname\\desktop\\python')<|endoftext|>
853,<|endoftext|>set the current working directory to path `path`: os.chdir(path)<|endoftext|>
854,"<|endoftext|>get a list `no_integers` of all the items in list `mylist` that are not of type `int`: no_integers = [x for x in mylist if not isinstance(x, int)]<|endoftext|>"
855,"<|endoftext|>match contents of an element to 'Example' in xpath (lxml): tree.xpath("".//a[text()='Example']"")[0].tag<|endoftext|>"
856,"<|endoftext|>concatenate key/value pairs in dictionary `a` with string ', ' into a single string: """""", """""".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])<|endoftext|>"
857,"<|endoftext|>Strip all non-ASCII characters from a unicode string, `\xa3\u20ac\xa3\u20ac`: print(set(re.sub('[\x00-\x7f]', '', '\xa3\u20ac\xa3\u20ac')))<|endoftext|>"
858,"<|endoftext|>Get all non-ascii characters in a unicode string `\xa3100 is worth more than \u20ac100`: print(re.sub('[\x00-\x7f]', '', '\xa3100 is worth more than \u20ac100'))<|endoftext|>"
859,"<|endoftext|>build a dict of key:value pairs from a string representation of a dict, `{'muffin' : 'lolz', 'foo' : 'kitty'}`: ast.literal_eval(""{'muffin' : 'lolz', 'foo' : 'kitty'}"")<|endoftext|>"
860,<|endoftext|>Print string `t` with proper unicode representations: print(t.decode('unicode_escape'))<|endoftext|>
861,<|endoftext|>Normalize string `str` from 'cp1252' code to 'utf-8' code: print(str.encode('cp1252').decode('utf-8').encode('cp1252').decode('utf-8'))<|endoftext|>
862,"<|endoftext|>merge lists `list_a` and `list_b` into a list of tuples: zip(list_a, list_b)<|endoftext|>"
863,"<|endoftext|>merge lists `a` and `a` into a list of tuples: list(zip(a, b))<|endoftext|>"
864,<|endoftext|>convert pandas DataFrame `df` to a dictionary using `id` field as the key: df.set_index('id').to_dict()<|endoftext|>
865,"<|endoftext|>convert pandas dataframe `df` with fields 'id', 'value' to dictionary: df.set_index('id')['value'].to_dict()<|endoftext|>"
867,"<|endoftext|>remove parentheses and text within it in string `filename`: re.sub('\\([^)]*\\)', '', filename)<|endoftext|>"
868,"<|endoftext|>Check if string 'a b' only contains letters and spaces: """"""a b"""""".replace(' ', '').isalpha()<|endoftext|>"
869,"<|endoftext|>sum each element `x` in list `first` with element `y` at the same index in list `second`.: [(x + y) for x, y in zip(first, second)]<|endoftext|>"
870,"<|endoftext|>sort a python dictionary `a_dict` by element `1` of the value: sorted(list(a_dict.items()), key=lambda item: item[1][1])<|endoftext|>"
872,"<|endoftext|>get index of the biggest 2 values of a list `a`: sorted(list(range(len(a))), key=lambda i: a[i])[-2:]<|endoftext|>"
873,"<|endoftext|>get indexes of the largest `2` values from a list `a` using itemgetter: zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]<|endoftext|>"
874,"<|endoftext|>get the indexes of the largest `2` values from a list of integers `a`: sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]<|endoftext|>"
875,<|endoftext|>get index of key 'c' in dictionary `x`: list(x.keys()).index('c')<|endoftext|>
876,<|endoftext|>Print +1 using format '{0:+d}': print('{0:+d}'.format(score))<|endoftext|>
877,"<|endoftext|>remove adjacent duplicate elements from a list `[1, 2, 2, 3, 2, 2, 4]`: [k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]<|endoftext|>"
878,"<|endoftext|>split string ""0,1,2"" based on delimiter ',': """"""0,1,2"""""".split(',')<|endoftext|>"
879,"<|endoftext|>convert the string '0,1,2' to a list of integers: [int(x) for x in '0,1,2'.split(',')]<|endoftext|>"
880,"<|endoftext|>convert list of key-value tuples `[('A', 1), ('B', 2), ('C', 3)]` into dictionary: dict([('A', 1), ('B', 2), ('C', 3)])<|endoftext|>"
881,"<|endoftext|>save numpy array `x` into text file 'test.txt': np.savetxt('test.txt', x)<|endoftext|>"
882,"<|endoftext|>store the output of command 'ls' in variable `direct_output`: direct_output = subprocess.check_output('ls', shell=True)<|endoftext|>"
883,<|endoftext|>get all column name of dataframe `df` except for column 'T1_V6': df[df.columns - ['T1_V6']]<|endoftext|>
884,<|endoftext|>get count of values in numpy array `a` that are between values `25` and `100`: ((25 < a) & (a < 100)).sum()<|endoftext|>
885,<|endoftext|>Get day name from a datetime object: date.today().strftime('%A')<|endoftext|>
887,<|endoftext|>Jinja parse datetime object `car.date_of_manufacture` to use format pattern `datetime`: {{car.date_of_manufacture | datetime}}<|endoftext|>
888,<|endoftext|>Get the date object `date_of_manufacture` of object `car` in string  format '%Y-%m-%d': {{car.date_of_manufacture.strftime('%Y-%m-%d')}}<|endoftext|>
889,<|endoftext|>make a flat list from list of lists `sublist`: [item for sublist in l for item in sublist]<|endoftext|>
890,<|endoftext|>make a flat list from list of lists `list2d`: list(itertools.chain(*list2d))<|endoftext|>
891,<|endoftext|>make a flat list from list of lists `list2d`: list(itertools.chain.from_iterable(list2d))<|endoftext|>
892,<|endoftext|>convert ascii value 'a' to int: ord('a')<|endoftext|>
893,"<|endoftext|>replace white spaces in string '  a\n b\n c\nd  e' with empty string '': re.sub('(?m)^[^\\S\\n]+', '', '  a\n b\n c\nd  e')<|endoftext|>"
894,"<|endoftext|>remove white spaces from all the lines using a regular expression in string 'a\n b\n c': re.sub('(?m)^\\s+', '', 'a\n b\n c')<|endoftext|>"
895,"<|endoftext|>destruct elements of list `[1, 2, 3]` to variables `a`, `b` and `c`: a, b, c = [1, 2, 3]<|endoftext|>"
896,"<|endoftext|>split list `mylist` into a list of lists whose elements have the same first five characters: [list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]<|endoftext|>"
897,"<|endoftext|>remove all instances of parenthesesis containing text beginning with `as ` from string `line`: line = re.sub('\\(+as .*?\\) ', '', line)<|endoftext|>"
898,<|endoftext|>skip the newline while printing `line`: print(line.rstrip('\n'))<|endoftext|>
899,<|endoftext|>get index values of pandas dataframe `df` as list: df.index.values.tolist()<|endoftext|>
900,"<|endoftext|>check if list `a` is empty: if (not a):
    pass<|endoftext|>"
901,"<|endoftext|>check if list `seq` is empty: if (not seq):
    pass<|endoftext|>"
902,"<|endoftext|>check if list `li` is empty: if (len(li) == 0):
    pass<|endoftext|>"
903,"<|endoftext|>create a list containing the indices of elements greater than 4 in list `a`: [i for i, v in enumerate(a) if v > 4]<|endoftext|>"
904,"<|endoftext|>reverse list `yourdata`: sorted(yourdata, reverse=True)<|endoftext|>"
905,"<|endoftext|>sort list of nested dictionaries `yourdata` in reverse based on values associated with each dictionary's key 'subkey': sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)<|endoftext|>"
906,"<|endoftext|>sort list of nested dictionaries `yourdata` in reverse order of 'key' and 'subkey': yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)<|endoftext|>"
907,<|endoftext|>remove decimal points in pandas data frame using round: df.round()<|endoftext|>
908,<|endoftext|>Get data from matplotlib plot: gca().get_lines()[n].get_xydata()<|endoftext|>
909,"<|endoftext|>get the maximum 2 values per row in array `A`: A[:, -2:]<|endoftext|>"
910,"<|endoftext|>Get value for  ""username"" parameter in GET request  in Django: request.GET.get('username', '')<|endoftext|>"
911,<|endoftext|>pretty-print ordered dictionary `o`: pprint(dict(list(o.items())))<|endoftext|>
912,"<|endoftext|>Confirm urls in Django properly: url('^$', include('sms.urls')),<|endoftext|>"
913,"<|endoftext|>Configure url in django properly: url('^', include('sms.urls')),<|endoftext|>"
914,"<|endoftext|>get the tuple in list `a_list` that has the largest item in the second index: max_item = max(a_list, key=operator.itemgetter(1))<|endoftext|>"
915,"<|endoftext|>find tuple in list of tuples `a_list` with the largest second element: max(a_list, key=operator.itemgetter(1))<|endoftext|>"
916,"<|endoftext|>resample series `s` into 3 months bins and sum each bin: s.resample('3M', how='sum')<|endoftext|>"
917,"<|endoftext|>extract elements at indices (1, 2, 5) from a list `a`: [a[i] for i in (1, 2, 5)]<|endoftext|>"
918,<|endoftext|>filter lines from a text file 'textfile' which contain a word 'apple': [line for line in open('textfile') if 'apple' in line]<|endoftext|>
919,"<|endoftext|>convert a date string `s` to a datetime object: datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')<|endoftext|>"
920,"<|endoftext|>reading tab-delimited csv file `filename` with pandas on mac: pandas.read_csv(filename, sep='\t', lineterminator='\r')<|endoftext|>"
921,"<|endoftext|>replace only first occurence of string `TEST` from a string `longlongTESTstringTEST`: 'longlongTESTstringTEST'.replace('TEST', '?', 1)<|endoftext|>"
922,"<|endoftext|>zip file `pdffile` using its basename as directory name: archive.write(pdffile, os.path.basename(pdffile))<|endoftext|>"
923,<|endoftext|>create a dictionary of pairs from a list of tuples `myListOfTuples`: dict(x[1:] for x in reversed(myListOfTuples))<|endoftext|>
924,"<|endoftext|>subtract elements of list `List1` from elements of list `List2`: [(x1 - x2) for x1, x2 in zip(List1, List2)]<|endoftext|>"
925,<|endoftext|>check if string `string` starts with a number: string[0].isdigit()<|endoftext|>
926,"<|endoftext|>Check if string `strg` starts with any of the elements in list ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'): strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))<|endoftext|>"
927,<|endoftext|>print script's directory: print(os.path.dirname(os.path.realpath(__file__)))<|endoftext|>
928,"<|endoftext|>split string `text` by the occurrences of regex pattern '(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)': re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)<|endoftext|>"
929,<|endoftext|>Make a scatter plot using unpacked values of list `li`: plt.scatter(*zip(*li))<|endoftext|>
930,<|endoftext|>rearrange tuple of tuples `t`: tuple(zip(*t))<|endoftext|>
931,"<|endoftext|>Get average for every three columns in `df` dataframe: df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()<|endoftext|>"
932,"<|endoftext|>convert a list `L` of ascii values to a string: """""""""""".join(chr(i) for i in L)<|endoftext|>"
933,<|endoftext|>count the number of pairs in dictionary `d` whose value equal to `chosen_value`: sum(x == chosen_value for x in list(d.values()))<|endoftext|>
934,<|endoftext|>count the number of values in `d` dictionary that are predicate to function `some_condition`: sum(1 for x in list(d.values()) if some_condition(x))<|endoftext|>
935,"<|endoftext|>convert double 0.00582811585976 to float: struct.unpack('f', struct.pack('f', 0.00582811585976))<|endoftext|>"
936,"<|endoftext|>convert datetime.date `dt` to utc timestamp: timestamp = (dt - datetime(1970, 1, 1)).total_seconds()<|endoftext|>"
937,<|endoftext|>sort column `m` in panda dataframe `df`: df.sort('m')<|endoftext|>
938,"<|endoftext|>Sort a data `a` in descending order based on the `modified` attribute of elements using lambda function: a = sorted(a, key=lambda x: x.modified, reverse=True)<|endoftext|>"
939,<|endoftext|>print the truth value of `a`: print(bool(a))<|endoftext|>
940,<|endoftext|>rename `last` row index label in dataframe `df` to `a`: df = df.rename(index={last: 'a'})<|endoftext|>
941,"<|endoftext|>Fit Kmeans function to a one-dimensional array `x` by reshaping it to be a multidimensional array of single values: km.fit(x.reshape(-1, 1))<|endoftext|>"
942,"<|endoftext|>Sort a list of strings 'words' such that items starting with 's' come first.: sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)<|endoftext|>"
943,<|endoftext|>open the login site 'http://somesite.com/adminpanel/index.php' in the browser: webbrowser.open('http://somesite.com/adminpanel/index.php')<|endoftext|>
944,"<|endoftext|>fetch all elements in a dictionary `parent_dict`, falling between two keys 2 and 4: dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)<|endoftext|>"
945,"<|endoftext|>fetch all elements in a dictionary 'parent_dict' where the key is between the range of 2 to 4: dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)<|endoftext|>"
946,"<|endoftext|>sort two lists `list1` and `list2` together using lambda function: [list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]<|endoftext|>"
947,<|endoftext|>get the number of values in list `j` that is greater than 5: sum(((i > 5) for i in j))<|endoftext|>
948,<|endoftext|>get the number of values in list `j` that is greater than 5: len([1 for i in j if (i > 5)])<|endoftext|>
949,"<|endoftext|>get the number of values in list `j` that is greater than `i`: j = np.array(j)
sum((j > i))<|endoftext|>"
950,"<|endoftext|>zip list `a`, `b`, `c` into a list of tuples: [(x + tuple(y)) for x, y in zip(zip(a, b), c)]<|endoftext|>"
951,"<|endoftext|>changing permission of file `path` to `stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH`: os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)<|endoftext|>"
952,"<|endoftext|>argparse associate zero or more arguments with flag 'file': parser.add_argument('file', nargs='*')<|endoftext|>"
953,"<|endoftext|>get a list of booleans `z` that shows wether the corresponding items in list `x` and `y` are equal: z = [(i == j) for i, j in zip(x, y)]<|endoftext|>"
954,<|endoftext|>create a list which indicates whether each element in `x` and `y` is identical: [(x[i] == y[i]) for i in range(len(x))]<|endoftext|>
956,<|endoftext|>create an empty data frame `df2` with index from another data frame `df1`: df2 = pd.DataFrame(index=df1.index)<|endoftext|>
957,"<|endoftext|>unpack first and second bytes of byte string `pS` into integer: struct.unpack('h', pS[0:2])<|endoftext|>"
958,"<|endoftext|>print list `t` into a table-like shape: print('\n'.join('  '.join(map(str, row)) for row in t))<|endoftext|>"
960,<|endoftext|>check if a checkbox is checked in selenium python webdriver: driver.find_element_by_name('<check_box_name>').is_selected()<|endoftext|>
961,<|endoftext|>determine if checkbox with id '<check_box_id>' is checked in selenium python webdriver: driver.find_element_by_id('<check_box_id>').is_selected()<|endoftext|>
962,"<|endoftext|>replace `0` with `2` in the list `[0, 1, 0, 3]`: [(a if a else 2) for a in [0, 1, 0, 3]]<|endoftext|>"
963,<|endoftext|>Produce a string that is suitable as Unicode literal from string 'M\\N{AMPERSAND}M\\N{APOSTROPHE}s': 'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.encode().decode('unicode-escape')<|endoftext|>
964,<|endoftext|>Parse a unicode string `M\\N{AMPERSAND}M\\N{APOSTROPHE}s`: 'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')<|endoftext|>
965,"<|endoftext|>convert Unicode codepoint to utf8 hex: chr(int('fd9b', 16)).encode('utf-8')<|endoftext|>"
966,<|endoftext|>use upper case letters to print hex value `value`: print('0x%X' % value)<|endoftext|>
967,<|endoftext|>get a list `cleaned` that contains all non-empty elements in list `your_list`: cleaned = [x for x in your_list if x]<|endoftext|>
968,<|endoftext|>create a slice object using string `string_slice`: slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])<|endoftext|>
969,"<|endoftext|>Find all the tags `a` and `div` from Beautiful Soup object `soup`: soup.find_all(['a', 'div'])<|endoftext|>"
970,<|endoftext|>get the name of function `func` as a string: print(func.__name__)<|endoftext|>
971,"<|endoftext|>convert dictionary `adict` into string: """""""""""".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))<|endoftext|>"
972,"<|endoftext|>convert dictionary `adict` into string: """""""""""".join('{}{}'.format(key, val) for key, val in list(adict.items()))<|endoftext|>"
973,<|endoftext|>copy list `old_list` as `new_list`: new_list = old_list[:]<|endoftext|>
974,<|endoftext|>copy list `old_list` as `new_list`: new_list = list(old_list)<|endoftext|>
975,<|endoftext|>copy list `old_list` as `new_list`: new_list = copy.copy(old_list)<|endoftext|>
976,<|endoftext|>deep copy list `old_list` as `new_list`: new_list = copy.deepcopy(old_list)<|endoftext|>
977,<|endoftext|>make a copy of list `old_list`: [i for i in old_list]<|endoftext|>
978,<|endoftext|>remove frame of legend in plot `plt`: plt.legend(frameon=False)<|endoftext|>
979,"<|endoftext|>Print a emoji from a string `\\ud83d\\ude4f` having surrogate pairs: """"""\\ud83d\\ude4f"""""".encode('utf-16', 'surrogatepass').decode('utf-16')<|endoftext|>"
980,<|endoftext|>calling a function named 'myfunction' in the module: globals()['myfunction']()<|endoftext|>
981,"<|endoftext|>Check the status code of url ""http://www.stackoverflow.com"": urllib.request.urlopen('http://www.stackoverflow.com').getcode()<|endoftext|>"
982,"<|endoftext|>Check the status code of url ""www.python.org"": conn = httplib.HTTPConnection('www.python.org')
conn.request('HEAD', '/')
r1 = conn.getresponse()
print(r1.status, r1.reason)<|endoftext|>"
983,"<|endoftext|>Check the status code of url `url`: r = requests.head(url)
return (r.status_code == 200)<|endoftext|>"
984,"<|endoftext|>Checking if website ""http://www.stackoverflow.com"" is up: print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())<|endoftext|>"
985,"<|endoftext|>Selenium `driver` click a hyperlink with the pattern ""a[href^='javascript']"": driver.find_element_by_css_selector(""a[href^='javascript']"").click()<|endoftext|>"
986,"<|endoftext|>store data frame `df` to file `file_name` using pandas, python: df.to_pickle(file_name)<|endoftext|>"
987,"<|endoftext|>calculate the mean of columns with same name in dataframe `df`: df.groupby(by=df.columns, axis=1).mean()<|endoftext|>"
988,"<|endoftext|>sort list `bar` by each element's attribute `attrb1` and attribute `attrb2` in reverse order: bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)<|endoftext|>"
989,<|endoftext|>get alpha value `alpha` of a png image `img`: alpha = img.split()[-1]<|endoftext|>
991,"<|endoftext|>BeautifulSoup find tag 'div' with styling 'width=300px;' in HTML string `soup`: soup.findAll('div', style='width=300px;')<|endoftext|>"
992,"<|endoftext|>Execute SQL statement `sql` with values of dictionary `myDict` as parameters: cursor.execute(sql, list(myDict.values()))<|endoftext|>"
993,"<|endoftext|>Convert CSV file `Result.csv` to Pandas dataframe using separator ' ': df.to_csv('Result.csv', index=False, sep=' ')<|endoftext|>"
994,<|endoftext|>update the `globals()` dictionary with the contents of the `vars(args)` dictionary: globals().update(vars(args))<|endoftext|>
995,"<|endoftext|>find all substrings in `mystring` beginning and ending with square brackets: re.findall('\\[(.*?)\\]', mystring)<|endoftext|>"
996,"<|endoftext|>Format all floating variables `var1`, `var2`, `var3`, `var1` to print to two decimal places.: print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))<|endoftext|>"
997,"<|endoftext|>Remove all items from a dictionary `d` where the values are less than `1`: d = dict((k, v) for k, v in d.items() if v > 0)<|endoftext|>"
998,"<|endoftext|>Filter dictionary `d` to have items with value greater than 0: d = {k: v for k, v in list(d.items()) if v > 0}<|endoftext|>"
999,<|endoftext|>convert a string of date strings `date_stngs ` to datetime objects and put them in a dataframe: pd.to_datetime(pd.Series(date_stngs))<|endoftext|>
1000,"<|endoftext|>get  value at index `[2, 0]` in dataframe `df`: df.iloc[2, 0]<|endoftext|>"
1001,<|endoftext|>change the font size on plot `matplotlib` to 22: matplotlib.rcParams.update({'font.size': 22})<|endoftext|>
1002,"<|endoftext|>converting dictionary `d` into a dataframe `pd` with keys as data for column 'Date' and the corresponding values as data for column 'DateValue': pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])<|endoftext|>"
1003,"<|endoftext|>create a dataframe containing the multiplication of element-wise in dataframe `df` and dataframe `df2` using index name and column labels of dataframe `df`: pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)<|endoftext|>"
1004,"<|endoftext|>extract floating number from string 'Current Level: 13.4 db.': re.findall('\\d+\\.\\d+', 'Current Level: 13.4 db.')<|endoftext|>"
1005,"<|endoftext|>extract floating point numbers from a string 'Current Level: -13.2 db or 14.2 or 3': re.findall('[-+]?\\d*\\.\\d+|\\d+', 'Current Level: -13.2 db or 14.2 or 3')<|endoftext|>"
1006,"<|endoftext|>pair each element in list `it` 3 times into a tuple: zip(it, it, it)<|endoftext|>"
1007,<|endoftext|>lowercase a python dataframe string in column 'x' if it has missing values in dataframe `df`: df['x'].str.lower()<|endoftext|>
1008,"<|endoftext|>append dict `{'f': var6, 'g': var7, 'h': var8}` to value of key `e` in dict `jsobj['a']['b']`: jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8})<|endoftext|>"
1009,"<|endoftext|>Concat a list of strings `lst` using string formatting: """""""""""".join(lst)<|endoftext|>"
1010,<|endoftext|>sum values greater than 0 in dictionary `d`: sum(v for v in list(d.values()) if v > 0)<|endoftext|>
1011,<|endoftext|>run flask application `app` in debug mode.: app.run(debug=True)<|endoftext|>
1012,"<|endoftext|>drop rows whose index value in list `[1, 3]` in dataframe `df`: df.drop(df.index[[1, 3]], inplace=True)<|endoftext|>"
1013,"<|endoftext|>replace nan values in a pandas data frame with the average of columns: df.apply(lambda x: x.fillna(x.mean()), axis=0)<|endoftext|>"
1014,<|endoftext|>extract attribute `my_attr` from each object in list `my_list`: [o.my_attr for o in my_list]<|endoftext|>
1015,"<|endoftext|>python get time stamp on file `file` in '%m/%d/%Y' format: time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))<|endoftext|>"
1016,<|endoftext|>check if dictionary `subset` is a subset of dictionary `superset`: all(item in list(superset.items()) for item in list(subset.items()))<|endoftext|>
1017,<|endoftext|>Convert integer elements in list `wordids` to strings: [str(wi) for wi in wordids]<|endoftext|>
1018,<|endoftext|>Reset the indexes of a pandas data frame: df2 = df.reset_index()<|endoftext|>
1019,<|endoftext|>format datetime in `dt` as string in format `'%m/%d/%Y`: dt.strftime('%m/%d/%Y')<|endoftext|>
1020,"<|endoftext|>format floating point number  `TotalAmount` to be rounded off to two decimal places and have a comma thousands' seperator: print('Total cost is: ${:,.2f}'.format(TotalAmount))<|endoftext|>"
1021,"<|endoftext|>sum the values in each row of every two adjacent columns in dataframe `df`: df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')<|endoftext|>"
1022,<|endoftext|>create list `randomList` with 10 random floating point numbers between 0.0 and 1.0: randomList = [random.random() for _ in range(10)]<|endoftext|>
1023,"<|endoftext|>find href value that has string 'follow?page' inside it: print(soup.find('a', href=re.compile('.*follow\\?page.*')))<|endoftext|>"
1024,<|endoftext|>immediately see output of print statement that doesn't end in a newline: sys.stdout.flush()<|endoftext|>
1025,"<|endoftext|>get a random key `country` and value `capital` form a dictionary `d`: country, capital = random.choice(list(d.items()))<|endoftext|>"
1026,<|endoftext|>split string `Word to Split` into a list of characters: list('Word to Split')<|endoftext|>
1027,"<|endoftext|>Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text': [w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]<|endoftext|>"
1028,"<|endoftext|>Validate IP address using Regex: pat = re.compile('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')<|endoftext|>"
1029,"<|endoftext|>execute file 'filename.py': exec(compile(open('filename.py').read(), 'filename.py', 'exec'))<|endoftext|>"
1030,<|endoftext|>SQLAlchemy count the number of rows with distinct values in column `name` of table `Tag`: session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()<|endoftext|>
1031,"<|endoftext|>remove null columns in a dataframe `df`: df = df.dropna(axis=1, how='all')<|endoftext|>"
1032,<|endoftext|>check if all lists in list `L` have three elements of integer 1: all(x.count(1) == 3 for x in L)<|endoftext|>
1033,<|endoftext|>Get a list comparing two lists of tuples `l1` and `l2` if any first value in `l1` matches with first value in `l2`: [x[0] for x in l1 if any(x[0] == y[0] for y in l2)]<|endoftext|>
1034,"<|endoftext|>clear the textbox `text` in tkinter: tex.delete('1.0', END)<|endoftext|>"
1035,<|endoftext|>Convert long int `myNumber` into date and time represented in the the string format '%Y-%m-%d %H:%M:%S': datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')<|endoftext|>
1036,<|endoftext|>Spawn a process to run python script `myscript.py` in C++: system('python myscript.py')<|endoftext|>
1037,<|endoftext|>sort a list `your_list` of class objects by their values for the attribute `anniversary_score`: your_list.sort(key=operator.attrgetter('anniversary_score'))<|endoftext|>
1038,<|endoftext|>sort list `your_list` by the `anniversary_score` attribute of each object: your_list.sort(key=lambda x: x.anniversary_score)<|endoftext|>
1039,"<|endoftext|>convert a tensor with list of constants `[1, 2, 3]` into a numpy array in tensorflow: print(type(tf.Session().run(tf.constant([1, 2, 3]))))<|endoftext|>"
1040,<|endoftext|>convert list `a` from being consecutive sequences of tuples into a single sequence of elements: list(itertools.chain(*a))<|endoftext|>
1041,"<|endoftext|>Set value for key `a` in dict `count` to `0` if key `a` does not exist or if value is `none`: count.setdefault('a', 0)<|endoftext|>"
1042,<|endoftext|>Do group by on `cluster` column in `df` and get its mean: df.groupby(['cluster']).mean()<|endoftext|>
1043,"<|endoftext|>get number in list `myList` closest in value to number `myNumber`: min(myList, key=lambda x: abs(x - myNumber))<|endoftext|>"
1044,<|endoftext|>check if any of the items in  `search` appear in `string`: any(x in string for x in search)<|endoftext|>
1045,<|endoftext|>search for occurrences of regex pattern `pattern` in string `url`: print(pattern.search(url).group(1))<|endoftext|>
1046,<|endoftext|>factorize all string values in dataframe `s` into floats: (s.factorize()[0] + 1).astype('float')<|endoftext|>
1047,"<|endoftext|>Get a list `C` by subtracting values in one list `B` from corresponding values in another list `A`: C = [(a - b) for a, b in zip(A, B)]<|endoftext|>"
1048,"<|endoftext|>derive the week start for the given week number and year ‘2011, 4, 0’: datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')<|endoftext|>"
1049,"<|endoftext|>convert a list of strings `['1', '-1', '1']` to a list of numbers: map(int, ['1', '-1', '1'])<|endoftext|>"
1050,"<|endoftext|>create datetime object from ""16sep2012"": datetime.datetime.strptime('16Sep2012', '%d%b%Y')<|endoftext|>"
1051,<|endoftext|>update fields in Django model `Book` with arguments in dictionary `d` where primary key is equal to `pk`: Book.objects.filter(pk=pk).update(**d)<|endoftext|>
1052,<|endoftext|>update the fields in django model `Book` using dictionary `d`: Book.objects.create(**d)<|endoftext|>
1053,<|endoftext|>print a digit `your_number` with exactly 2 digits after decimal: print('{0:.2f}'.format(your_number))<|endoftext|>
1054,"<|endoftext|>generate a 12-digit random number: random.randint(100000000000, 999999999999)<|endoftext|>"
1055,"<|endoftext|>generate a random 12-digit number: int(''.join(str(random.randint(0, 9)) for _ in range(12)))<|endoftext|>"
1056,"<|endoftext|>generate a random 12-digit number: """""""""""".join(str(random.randint(0, 9)) for _ in range(12))<|endoftext|>"
1057,"<|endoftext|>generate a 12-digit random number: '%0.12d' % random.randint(0, 999999999999)<|endoftext|>"
1058,"<|endoftext|>remove specific elements in a numpy array `a`: numpy.delete(a, index)<|endoftext|>"
1059,"<|endoftext|>sort list `trial_list` based on values of dictionary `trail_dict`: sorted(trial_list, key=lambda x: trial_dict[x])<|endoftext|>"
1060,<|endoftext|>read a single character from stdin: sys.stdin.read(1)<|endoftext|>
1061,"<|endoftext|>get a list of characters in string `x` matching regex pattern `pattern`: print(re.findall(pattern, x))<|endoftext|>"
1062,<|endoftext|>get the context of a search by keyword 'My keywords' in beautifulsoup `soup`: k = soup.find(text=re.compile('My keywords')).parent.text<|endoftext|>
1063,"<|endoftext|>convert rows in pandas data frame `df` into list: df.apply(lambda x: x.tolist(), axis=1)<|endoftext|>"
1064,"<|endoftext|>convert a 1d `A` array to a 2d array `B`: B = np.reshape(A, (-1, 2))<|endoftext|>"
1065,"<|endoftext|>run app `app` on host '192.168.0.58' and port 9000 in Flask: app.run(host='192.168.0.58', port=9000, debug=False)<|endoftext|>"
1066,<|endoftext|>encode unicode string '\xc5\xc4\xd6' to utf-8 code: print('\xc5\xc4\xd6'.encode('UTF8'))<|endoftext|>
1067,<|endoftext|>get the first element of each tuple from a list of tuples `G`: [x[0] for x in G]<|endoftext|>
1068,"<|endoftext|>regular expression matching all but 'aa' and 'bb' for string `string`: re.findall('-(?!aa-|bb-)([^-]+)', string)<|endoftext|>"
1069,"<|endoftext|>regular expression matching all but 'aa' and 'bb': re.findall('-(?!aa|bb)([^-]+)', string)<|endoftext|>"
1070,"<|endoftext|>remove false entries from a dictionary `hand`: {k: v for k, v in list(hand.items()) if v}<|endoftext|>"
1071,"<|endoftext|>Get a dictionary from a dictionary `hand` where the values are present: dict((k, v) for k, v in hand.items() if v)<|endoftext|>"
1072,"<|endoftext|>sort list `L` based on the value of variable 'resultType' for each object in list `L`: sorted(L, key=operator.itemgetter('resultType'))<|endoftext|>"
1073,<|endoftext|>sort a list of objects `s` by a member variable 'resultType': s.sort(key=operator.attrgetter('resultType'))<|endoftext|>
1074,<|endoftext|>sort a list of objects 'somelist' where the object has member number variable `resultType`: somelist.sort(key=lambda x: x.resultType)<|endoftext|>
1075,"<|endoftext|>join multiple dataframes `d1`, `d2`, and `d3` on column 'name': df1.merge(df2, on='name').merge(df3, on='name')<|endoftext|>"
1076,<|endoftext|>generate random Decimal: decimal.Decimal(random.randrange(10000)) / 100<|endoftext|>
1077,"<|endoftext|>list all files of a directory `mypath`: onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]<|endoftext|>"
1078,"<|endoftext|>list all files of a directory `mypath`: f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break<|endoftext|>"
1079,"<|endoftext|>list all "".txt"" files of a directory ""/home/adam/"": print(glob.glob('/home/adam/*.txt'))<|endoftext|>"
1080,"<|endoftext|>list all files of a directory ""somedirectory"": os.listdir('somedirectory')<|endoftext|>"
1081,"<|endoftext|>execute sql query 'INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)' with all parameters in list `tup`: cur.executemany('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)<|endoftext|>"
1082,<|endoftext|>get keys with same value in dictionary `d`: print([key for key in d if d[key] == 1])<|endoftext|>
1083,"<|endoftext|>get keys with same value in dictionary `d`: print([key for key, value in d.items() if value == 1])<|endoftext|>"
1084,"<|endoftext|>Get keys from a dictionary 'd' where the value is '1'.: print([key for key, value in list(d.items()) if value == 1])<|endoftext|>"
1085,<|endoftext|>create list of 'size' empty strings: strs = ['' for x in range(size)]<|endoftext|>
1086,"<|endoftext|>generate pdf file `output_filename` from markdown file `input_filename`: with open(input_filename, 'r') as f:
    html_text = markdown(f.read(), output_format='html4')
pdfkit.from_string(html_text, output_filename)<|endoftext|>"
1087,<|endoftext|>remove duplicate dict in list `l`: [dict(t) for t in set([tuple(d.items()) for d in l])]<|endoftext|>
1088,<|endoftext|>Set time zone `Europe/Istanbul` in Django: TIME_ZONE = 'Europe/Istanbul'<|endoftext|>
1089,"<|endoftext|>append `date` to list value of `key` in dictionary `dates_dict`, or create key `key` with value `date` in a list if it does not exist: dates_dict.setdefault(key, []).append(date)<|endoftext|>"
1090,<|endoftext|>Group the values from django model `Article` with group by value `pub_date` and annotate by `title`: Article.objects.values('pub_date').annotate(article_count=Count('title'))<|endoftext|>
1091,<|endoftext|>clear Tkinter Canvas `canvas`: canvas.delete('all')<|endoftext|>
1092,"<|endoftext|>Initialize a pandas series object `s` with columns `['A', 'B', 'A1R', 'B2', 'AABB4']`: s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])<|endoftext|>"
1093,"<|endoftext|>None: datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')<|endoftext|>"
1094,<|endoftext|>sort list `a` using the first dimension of the element as the key to list `b`: a.sort(key=lambda x: b.index(x[0]))<|endoftext|>
1096,<|endoftext|>Save plot `plt` as png file 'filename.png': plt.savefig('filename.png')<|endoftext|>
1097,"<|endoftext|>Save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`: plt.savefig('filename.png', dpi=300)<|endoftext|>"
1098,<|endoftext|>get output from process `p1`: p1.communicate()[0]<|endoftext|>
1100,<|endoftext|>searche in HTML string for elements that have text 'Python': soup.body.findAll(text='Python')<|endoftext|>
1101,<|endoftext|>BeautifulSoup find string 'Python Jobs' in HTML body `body`: soup.body.findAll(text='Python Jobs')<|endoftext|>
1102,"<|endoftext|>Sort items in dictionary `d`  using the first part of the key after splitting the key: sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))<|endoftext|>"
1103,"<|endoftext|>create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]: set([1, 2, 3]) ^ set([3, 4, 5])<|endoftext|>"
1104,<|endoftext|>Get a list values of a dictionary item `pass_id` from post requests in django: request.POST.getlist('pass_id')<|endoftext|>
1105,"<|endoftext|>Filter duplicate entries w.r.t. value in 'id' from a list of dictionaries 'L': list(dict((x['id'], x) for x in L).values())<|endoftext|>"
1106,"<|endoftext|>Get pandas GroupBy object with sum over the rows with same column names within  dataframe `df`: df.groupby(df.columns, axis=1).sum()<|endoftext|>"
1107,"<|endoftext|>convert the zip of range `(1, 5)` and range `(7, 11)` into a dictionary: dict(zip(list(range(1, 5)), list(range(7, 11))))<|endoftext|>"
1108,<|endoftext|>Get all indexes of boolean numpy array where boolean value `mask` is True: numpy.where(mask)<|endoftext|>
1109,"<|endoftext|>case insensitive comparison of strings `string1` and `string2`: if (string1.lower() == string2.lower()):
    print('The strings are the same (case insensitive)')
else:
    print('The strings are not the same (case insensitive)')<|endoftext|>"
1110,"<|endoftext|>case insensitive string comparison between `string1` and `string2`: if (string1.lower() == string2.lower()):
    pass<|endoftext|>"
1111,<|endoftext|>case insensitive string comparison between `string1` and `string2`: (string1.lower() == string2.lower())<|endoftext|>
1112,<|endoftext|>case insensitive string comparison between `first` and `second`: (first.lower() == second.lower())<|endoftext|>
1113,<|endoftext|>case insensitive comparison between strings `first` and `second`: (first.upper() == second.upper())<|endoftext|>
1114,"<|endoftext|>Taking the results of a bash command ""awk '{print $10, $11}' test.txt > test2.txt"": os.system(""awk '{print $10, $11}' test.txt > test2.txt"")<|endoftext|>"
1115,<|endoftext|>remove multiple values from a list `my_list` at the same time with index starting at `2` and ending just before `6`.: del my_list[2:6]<|endoftext|>
1116,"<|endoftext|>convert a string `s` to its base-10 representation: int(s.encode('hex'), 16)<|endoftext|>"
1117,"<|endoftext|>match regex pattern 'TAA(?:[ATGC]{3})+?TAA' on string `seq`: re.findall('TAA(?:[ATGC]{3})+?TAA', seq)<|endoftext|>"
1118,"<|endoftext|>sort a set `s` by numerical value: sorted(s, key=float)<|endoftext|>"
1119,<|endoftext|>convert an int 65 to hex string: hex(65)<|endoftext|>
1120,<|endoftext|>append a pandas series `b` to the series `a` and get a continuous index: a.append(b).reset_index(drop=True)<|endoftext|>
1121,"<|endoftext|>simple way to append a pandas series `a` and `b` with same index: pd.concat([a, b], ignore_index=True)<|endoftext|>"
1122,"<|endoftext|>Get a list of tuples with multiple iterators using list comprehension: [(i, j) for i in range(1, 3) for j in range(1, 5)]<|endoftext|>"
1123,"<|endoftext|>reverse sort items in dictionary `mydict` by value: sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)<|endoftext|>"
1124,"<|endoftext|>select the last business day of the month for each month in 2014 in pandas: pd.date_range('1/1/2014', periods=12, freq='BM')<|endoftext|>"
1125,"<|endoftext|>disable the certificate check in https requests for url `https://kennethreitz.com`: requests.get('https://kennethreitz.com', verify=False)<|endoftext|>"
1126,<|endoftext|>return dataframe `df` with last row dropped: df.ix[:-1]<|endoftext|>
1127,"<|endoftext|>check if ""blah"" is in string `somestring`: if ('blah' not in somestring):
    pass<|endoftext|>"
1128,"<|endoftext|>check if string `needle` is in `haystack`: if (needle in haystack):
    pass<|endoftext|>"
1129,"<|endoftext|>check if string ""substring"" is in string: string.find('substring')<|endoftext|>"
1130,"<|endoftext|>check if string `s` contains ""is"": if (s.find('is') == (-1)):
    print(""No 'is' here!"")
else:
    print(""Found 'is' in the string."")<|endoftext|>"
1131,"<|endoftext|>extract first and last row of a dataframe `df`: pd.concat([df.head(1), df.tail(1)])<|endoftext|>"
1132,<|endoftext|>filter a Django model `MyModel` to have charfield length of max `255`: MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])<|endoftext|>
1133,<|endoftext|>Filter queryset for all objects in Django model `MyModel` where texts length are greater than `254`: MyModel.objects.filter(text__regex='^.{254}.*')<|endoftext|>
1134,"<|endoftext|>count the number of rows with missing values in a pandas dataframe `df`: sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)<|endoftext|>"
1136,"<|endoftext|>set the font 'Purisa' of size 12 for a canvas' text item `k`: canvas.create_text(x, y, font=('Purisa', 12), text=k)<|endoftext|>"
1137,<|endoftext|>create a list containing all values associated with key 'baz' in dictionaries of list `foos` using list comprehension: [y['baz'] for x in foos for y in x['bar']]<|endoftext|>
1138,"<|endoftext|>read pandas data frame csv `comma.csv` with extra commas in column specifying string delimiter `'`: df = pd.read_csv('comma.csv', quotechar=""'"")<|endoftext|>"
1139,"<|endoftext|>replace string 'in.' with ' in. ' in dataframe `df` column 'a': df['a'] = df['a'].str.replace('in.', ' in. ')<|endoftext|>"
1140,<|endoftext|>Get all indexes of a list `a` where each value is greater than `2`: [i for i in range(len(a)) if a[i] > 2]<|endoftext|>
1141,<|endoftext|>check if a local variable `myVar` exists: ('myVar' in locals())<|endoftext|>
1142,<|endoftext|>check if a global variable `myVar` exists: ('myVar' in globals())<|endoftext|>
1143,"<|endoftext|>check if object `obj` has attribute 'attr_name': hasattr(obj, 'attr_name')<|endoftext|>"
1144,"<|endoftext|>check if a local variable 'myVar' exists: if ('myVar' in locals()):
    pass<|endoftext|>"
1145,"<|endoftext|>check if a global variable 'myVar' exists: if ('myVar' in globals()):
    pass<|endoftext|>"
1146,"<|endoftext|>lambda function that adds two operands: lambda x, y: x + y<|endoftext|>"
1147,<|endoftext|>count the number of items in a generator/iterator `it`: sum(1 for i in it)<|endoftext|>
1148,"<|endoftext|>get tuples of the corresponding elements from lists `lst` and `lst2`: [(x, lst2[i]) for i, x in enumerate(lst)]<|endoftext|>"
1149,"<|endoftext|>create tuples containing elements that are at the same index of list `lst` and list `lst2`: [(i, j) for i, j in zip(lst, lst2)]<|endoftext|>"
1150,"<|endoftext|>get tuples from lists `lst` and `lst2` using list comprehension in python 2: [(lst[i], lst2[i]) for i in range(len(lst))]<|endoftext|>"
1151,"<|endoftext|>convert hex triplet string `rgbstr` to rgb tuple: struct.unpack('BBB', rgbstr.decode('hex'))<|endoftext|>"
1152,"<|endoftext|>Check if 3 is not in a list [2, 3, 4]: (3 not in [2, 3, 4])<|endoftext|>"
1153,"<|endoftext|>Check if tuple (2, 3) is not in a list [(2, 3), (5, 6), (9, 1)]: ((2, 3) not in [(2, 3), (5, 6), (9, 1)])<|endoftext|>"
1154,"<|endoftext|>Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), ""hi""]: ((2, 3) not in [(2, 7), (7, 3), 'hi'])<|endoftext|>"
1155,"<|endoftext|>Check if 3 is not in the list [4,5,6]: (3 not in [4, 5, 6])<|endoftext|>"
1156,"<|endoftext|>create a list by appending components from list `a` and reversed list `b` interchangeably: [value for pair in zip(a, b[::-1]) for value in pair]<|endoftext|>"
1157,"<|endoftext|>delete the last column of numpy array `a` and assign resulting array to `b`: b = np.delete(a, -1, 1)<|endoftext|>"
1158,<|endoftext|>commit all the changes after executing a query.: dbb.commit()<|endoftext|>
1159,"<|endoftext|>join two dataframes based on values in selected columns: pd.merge(a, b, on=['A', 'B'], how='outer')<|endoftext|>"
1160,<|endoftext|>set text color as `red` and background color as `#A3C1DA` in qpushbutton: setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')<|endoftext|>
1161,<|endoftext|>find the mean of elements in list `l`: sum(l) / float(len(l))<|endoftext|>
1162,"<|endoftext|>Find all the items from a dictionary `D` if the key contains the string `Light`: [(k, v) for k, v in D.items() if 'Light' in k]<|endoftext|>"
1163,<|endoftext|>Get a md5 hash from string `thecakeisalie`: k = hashlib.md5('thecakeisalie').hexdigest()<|endoftext|>
1165,"<|endoftext|>sort datetime objects `birthdays` by `month` and `day`: birthdays.sort(key=lambda d: (d.month, d.day))<|endoftext|>"
1166,<|endoftext|>extract table data from table `rows` using beautifulsoup: [[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]<|endoftext|>
1167,"<|endoftext|>strip the string `.txt` from anywhere in the string `Boat.txt.txt`: """"""Boat.txt.txt"""""".replace('.txt', '')<|endoftext|>"
1168,<|endoftext|>get a list of the row names from index of a pandas data frame: list(df.index)<|endoftext|>
1169,<|endoftext|>get the row names from index in a pandas data frame: df.index<|endoftext|>
1170,"<|endoftext|>create a list of all unique characters in string 'aaabcabccd': """""""""""".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))<|endoftext|>"
1171,<|endoftext|>get list of all unique characters in a string 'aaabcabccd': list(set('aaabcabccd'))<|endoftext|>
1173,"<|endoftext|>find rows with non zero values in a subset of columns where `df.dtypes` is not equal to `object` in pandas dataframe: df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]<|endoftext|>"
1175,"<|endoftext|>check if  dictionary `d` contains all keys in list `['somekey', 'someotherkey', 'somekeyggg']`: all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])<|endoftext|>"
1176,"<|endoftext|>hide output of subprocess `['espeak', text]`: subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)<|endoftext|>"
1177,"<|endoftext|>replace nans by preceding values in pandas dataframe `df`: df.fillna(method='ffill', inplace=True)<|endoftext|>"
1178,"<|endoftext|>create 4 numbers in range between 1 and 3: print(np.linspace(1, 3, num=4, endpoint=False))<|endoftext|>"
1179,"<|endoftext|>Create numpy array of `5` numbers starting from `1` with interval of `3`: print(np.linspace(1, 3, num=5))<|endoftext|>"
1180,"<|endoftext|>create a symlink directory `D:\\testdirLink` for directory `D:\\testdir` with unicode support using ctypes library: kdll.CreateSymbolicLinkW('D:\\testdirLink', 'D:\\testdir', 1)<|endoftext|>"
1181,"<|endoftext|>get a list `slice` of array slices of the first two rows and columns from array `arr`: slice = [arr[i][0:2] for i in range(0, 2)]<|endoftext|>"
1182,"<|endoftext|>upload uploaded file from path '/upload' to Google cloud storage 'my_bucket' bucket: upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')<|endoftext|>"
1183,<|endoftext|>change directory to the directory of a python script: os.chdir(os.path.dirname(__file__))<|endoftext|>
1184,<|endoftext|>call a function with argument list `args`: func(*args)<|endoftext|>
1185,"<|endoftext|>split column 'AB' in dataframe `df` into two columns by first whitespace ' ': df['AB'].str.split(' ', 1, expand=True)<|endoftext|>"
1186,"<|endoftext|>pandas dataframe, how do i split a column 'AB' into two 'A' and 'B' on delimiter ' ': df['A'], df['B'] = df['AB'].str.split(' ', 1).str<|endoftext|>"
1187,"<|endoftext|>sort list `xs` based on the length of its elements: print(sorted(xs, key=len))<|endoftext|>"
1188,"<|endoftext|>sort list `xs` in ascending order of length of elements: xs.sort(lambda x, y: cmp(len(x), len(y)))<|endoftext|>"
1189,<|endoftext|>sort list of strings `xs` by the length of string: xs.sort(key=lambda s: len(s))<|endoftext|>
1190,<|endoftext|>plot point marker '.' on series `ts`: ts.plot(marker='.')<|endoftext|>
1191,"<|endoftext|>get all combination of n binary values: lst = list(itertools.product([0, 1], repeat=n))<|endoftext|>"
1192,"<|endoftext|>get all combination of n binary values: lst = map(list, itertools.product([0, 1], repeat=n))<|endoftext|>"
1193,"<|endoftext|>get all combination of 3 binary values: bin = [0, 1]
[(x, y, z) for x in bin for y in bin for z in bin]<|endoftext|>"
1194,"<|endoftext|>get all combination of 3 binary values: lst = list(itertools.product([0, 1], repeat=3))<|endoftext|>"
1195,<|endoftext|>append string 'str' at the beginning of each value in column 'col' of dataframe `df`: df['col'] = 'str' + df['col'].astype(str)<|endoftext|>
1196,"<|endoftext|>get a dict of variable names `['some', 'list', 'of', 'vars']` as a string and their values: dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])<|endoftext|>"
1197,"<|endoftext|>add a colorbar to plot `plt` using image `im` on axes `ax`: plt.colorbar(im, ax=ax)<|endoftext|>"
1198,<|endoftext|>convert nested list 'Cards' into a flat list: [a for c in Cards for b in c for a in b]<|endoftext|>
1199,"<|endoftext|>create a list containing keys of dictionary `d` and sort it alphabetically: sorted(d, key=d.get)<|endoftext|>"
1200,<|endoftext|>print the number of occurences of not `none` in a list `lst` in Python 2: print(len([x for x in lst if x is not None]))<|endoftext|>
1201,<|endoftext|>lookup dictionary key `key1` in Django template `json`: {{json.key1}}<|endoftext|>
1202,<|endoftext|>remove duplicates from list `myset`: mynewlist = list(myset)<|endoftext|>
1203,"<|endoftext|>get unique values from the list `['a', 'b', 'c', 'd']`: set(['a', 'b', 'c', 'd'])<|endoftext|>"
1204,"<|endoftext|>set size of `figure` to landscape A4 i.e. `11.69, 8.27` inches: figure(figsize=(11.69, 8.27))<|endoftext|>"
1205,"<|endoftext|>get every thing after last `/`: url.rsplit('/', 1)<|endoftext|>"
1206,"<|endoftext|>get everything after last slash in a url stored in variable 'url': url.rsplit('/', 1)[-1]<|endoftext|>"
1207,"<|endoftext|>open file '5_1.txt' in directory `direct`: x_file = open(os.path.join(direct, '5_1.txt'), 'r')<|endoftext|>"
1208,<|endoftext|>create a list with the characters of a string `5+6`: list('5+6')<|endoftext|>
1209,<|endoftext|>concatenate a list of numpy arrays `input_list` together into a flattened list of values: np.concatenate(input_list).ravel().tolist()<|endoftext|>
1210,<|endoftext|>convert dictionary `dict` into a flat list: print([y for x in list(dict.items()) for y in x])<|endoftext|>
1211,<|endoftext|>Convert a dictionary `dict` into a list with key and values as list items.: [y for x in list(dict.items()) for y in x]<|endoftext|>
1212,<|endoftext|>get a random record from model 'MyModel' using django's orm: MyModel.objects.order_by('?').first()<|endoftext|>
1213,<|endoftext|>change current working directory to directory 'chapter3': os.chdir('chapter3')<|endoftext|>
1214,<|endoftext|>change current working directory: os.chdir('C:\\Users\\username\\Desktop\\headfirstpython\\chapter3')<|endoftext|>
1215,<|endoftext|>change current working directory: os.chdir('.\\chapter3')<|endoftext|>
1216,"<|endoftext|>create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`: dict((key, sum(d[key] for d in dictList)) for key in dictList[0])<|endoftext|>"
1217,"<|endoftext|>sort pandas data frame `df` using values from columns `c1` and `c2` in ascending order: df.sort(['c1', 'c2'], ascending=[True, True])<|endoftext|>"
1218,<|endoftext|>Converting string lists `s` to float list: floats = [float(x) for x in s.split()]<|endoftext|>
1219,"<|endoftext|>Converting string lists `s` to float list: floats = map(float, s.split())<|endoftext|>"
1220,"<|endoftext|>set labels `[1, 2, 3, 4, 5]` on axis X in plot `plt`: plt.xticks([1, 2, 3, 4, 5])<|endoftext|>"
1221,"<|endoftext|>read line by line from stdin: for line in fileinput.input():
    pass<|endoftext|>"
1222,"<|endoftext|>read line by line from stdin: for line in sys.stdin:
    pass<|endoftext|>"
1223,<|endoftext|>check if string `one` exists in the values of dictionary `d`: 'one' in list(d.values())<|endoftext|>
1224,<|endoftext|>Check if value 'one' is among the values of dictionary `d`: 'one' in iter(d.values())<|endoftext|>
1225,"<|endoftext|>call parent class `Instructor` of child class constructor: super(Instructor, self).__init__(name, year)<|endoftext|>"
1226,"<|endoftext|>create a dictionary using two lists`x` and `y`: dict(zip(x, y))<|endoftext|>"
1227,"<|endoftext|>sort a list of dictionaries `a` by dictionary values in descending order: sorted(a, key=lambda i: list(i.values())[0], reverse=True)<|endoftext|>"
1228,"<|endoftext|>sorting a list of dictionary `a` by values in descending order: sorted(a, key=dict.values, reverse=True)<|endoftext|>"
1229,"<|endoftext|>Use multiple groupby and agg operations `sum`, `count`, `std` for pandas data frame `df`: df.groupby(level=0).agg(['sum', 'count', 'std'])<|endoftext|>"
1230,"<|endoftext|>for a dictionary `a`, set default value for key `somekey` as list and append value `bob`  in that key: a.setdefault('somekey', []).append('bob')<|endoftext|>"
1231,<|endoftext|>sum values in list of dictionaries `example_list` with key 'gold': sum(item['gold'] for item in example_list)<|endoftext|>
1232,<|endoftext|>get a sum of all values from key `gold` in a list of dictionary `example_list`: sum([item['gold'] for item in example_list])<|endoftext|>
1233,<|endoftext|>Get all the values in key `gold` summed from a list of dictionary `myLIst`: sum(item['gold'] for item in myLIst)<|endoftext|>
1234,<|endoftext|>writing string 'text to write\n' to file `f`: f.write('text to write\n')<|endoftext|>
1235,<|endoftext|>Write a string `My String` to a file `file` including new line character: file.write('My String\n')<|endoftext|>
1236,<|endoftext|>find consecutive segments from a column 'A' in a pandas data frame 'df': df.reset_index().groupby('A')['index'].apply(np.array)<|endoftext|>
1237,"<|endoftext|>get a relative path of file 'my_file' into variable `fn`: fn = os.path.join(os.path.dirname(__file__), 'my_file')<|endoftext|>"
1238,<|endoftext|>retrieve an element from a set `s` without removing it: e = next(iter(s))<|endoftext|>
1239,<|endoftext|>execute a command in the command prompt to list directory contents of the c drive `c:\\': os.system('dir c:\\')<|endoftext|>
1240,"<|endoftext|>Make a auto scrolled window to the end of the list in gtk: self.treeview.connect('size-allocate', self.treeview_changed)<|endoftext|>"
1241,"<|endoftext|>check if 3 is inside list `[1, 2, 3]`: 3 in [1, 2, 3]<|endoftext|>"
1242,"<|endoftext|>Represent DateTime object '10/05/2012' with format '%d/%m/%Y' into format '%Y-%m-%d': datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')<|endoftext|>"
1243,"<|endoftext|>convert a string literal `s` with values `\\` to raw string literal: s = s.replace('\\', '\\\\')<|endoftext|>"
1244,<|endoftext|>get output of script `proc`: print(proc.communicate()[0])<|endoftext|>
1245,"<|endoftext|>create a pandas data frame from list of nested dictionaries `my_list`: pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T<|endoftext|>"
1246,"<|endoftext|>delete all columns in  DataFrame `df` that do not hold a non-zero value in its records: df.loc[:, ((df != 0).any(axis=0))]<|endoftext|>"
1247,"<|endoftext|>sort a multidimensional array `a` by column with index 1: sorted(a, key=lambda x: x[1])<|endoftext|>"
1248,"<|endoftext|>split string `s` to list conversion by ',': [x.strip() for x in s.split(',')]<|endoftext|>"
1249,<|endoftext|>Get a list of items in the list `container` with attribute equal to `value`: items = [item for item in container if item.attribute == value]<|endoftext|>
1250,"<|endoftext|>create a file 'filename' with each tuple in the list `mylist` written to a line: open('filename', 'w').write('\n'.join('%s %s' % x for x in mylist))<|endoftext|>"
1251,"<|endoftext|>Get multiple matched strings using regex pattern `(?:review: )?(http://url.com/(\\d+))\\s?`: pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)<|endoftext|>"
1252,"<|endoftext|>read a text file 'very_Important.txt' into a string variable `str`: str = open('very_Important.txt', 'r').read()<|endoftext|>"
1253,"<|endoftext|>Return values for column `C` after group by on column `A` and `B` in dataframe `df`: df.groupby(['A', 'B'])['C'].unique()<|endoftext|>"
1254,"<|endoftext|>read file `fname` line by line into a list `content`: with open(fname) as f:
    content = f.readlines()<|endoftext|>"
1255,"<|endoftext|>read file 'filename' line by line into a list `lines`: with open('filename') as f:
    lines = f.readlines()<|endoftext|>"
1256,<|endoftext|>read file 'filename' line by line into a list `lines`: lines = [line.rstrip('\n') for line in open('filename')]<|endoftext|>
1257,"<|endoftext|>read file ""file.txt"" line by line into a list `array`: with open('file.txt', 'r') as ins:
    array = []
    for line in ins:
        array.append(line)<|endoftext|>"
1258,<|endoftext|>convert the dataframe column 'col' from string types to datetime types: df['col'] = pd.to_datetime(df['col'])<|endoftext|>
1259,<|endoftext|>get a list of the keys in each dictionary in a dictionary of dictionaries `foo`: [k for d in list(foo.values()) for k in d]<|endoftext|>
1260,"<|endoftext|>get user input using message 'Enter name here: ' and insert it to the first placeholder in string 'Hello, {0}, how do you do?': print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))<|endoftext|>"
1261,"<|endoftext|>create pandas data frame `df` from txt file `filename.txt` with column `Region Name` and separator `;`: df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])<|endoftext|>"
1263,<|endoftext|>get the platform OS name: platform.system()<|endoftext|>
1264,"<|endoftext|>sort list `a` in ascending order based on its elements' float values: a = sorted(a, key=lambda x: float(x))<|endoftext|>"
1265,"<|endoftext|>finding words in string `s` after keyword 'name': re.search('name (.*)', s)<|endoftext|>"
1266,"<|endoftext|>Find all records from collection `collection` without extracting mongo id `_id`: db.collection.find({}, {'_id': False})<|endoftext|>"
1267,<|endoftext|>Get all the second values from a list of lists `A`: [row[1] for row in A]<|endoftext|>
1268,<|endoftext|>extract first column from a multi-dimensional array `a`: [row[0] for row in a]<|endoftext|>
1269,"<|endoftext|>sort list `['10', '3', '2']` in ascending order based on the integer value of its elements: sorted(['10', '3', '2'], key=int)<|endoftext|>"
1270,"<|endoftext|>check if file `filename` is descendant of directory '/the/dir/': os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'<|endoftext|>"
1271,<|endoftext|>check if any element of list `substring_list` are in string `string`: any(substring in string for substring in substring_list)<|endoftext|>
1272,"<|endoftext|>construct pandas dataframe from a list of tuples: df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])<|endoftext|>"
1273,"<|endoftext|>find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's': re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\1Bull', s)<|endoftext|>"
1274,"<|endoftext|>find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's': re.sub('^((.*?cat.*?){1})cat', '\\1Bull', s)<|endoftext|>"
1275,"<|endoftext|>sort list of strings in list `the_list` by integer suffix: sorted(the_list, key=lambda k: int(k.split('_')[1]))<|endoftext|>"
1276,"<|endoftext|>sort list of strings `the_list` by integer suffix before ""_"": sorted(the_list, key=lambda x: int(x.split('_')[1]))<|endoftext|>"
1277,"<|endoftext|>make a list of lists in which each list `g` are the elements from list `test` which have the same characters up to the first `_` character: [list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]<|endoftext|>"
1279,<|endoftext|>Load the url `http://www.google.com` in selenium webdriver `driver`: driver.get('http://www.google.com')<|endoftext|>
1280,"<|endoftext|>using python's datetime module, get the year that utc-11 is currently in: (datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year<|endoftext|>"
1281,"<|endoftext|>Get the difference between two lists `[1, 2, 2, 2, 3]` and `[1, 2]` that may have duplicate values: Counter([1, 2, 2, 2, 3]) - Counter([1, 2])<|endoftext|>"
1282,"<|endoftext|>remove tags from a string `mystring`: re.sub('<[^>]*>', '', mystring)<|endoftext|>"
1283,<|endoftext|>encode string `data` as `hex`: data.encode('hex')<|endoftext|>
1284,<|endoftext|>filter `Users` by field `userprofile` with level greater than or equal to `0`: User.objects.filter(userprofile__level__gte=0)<|endoftext|>
1285,<|endoftext|>BeautifulSoup find a tag whose id ends with string 'para': soup.findAll(id=re.compile('para$'))<|endoftext|>
1286,"<|endoftext|>select `div` tags whose `id`s begin with `value_xxx_c_1_f_8_a_`: soup.select('div[id^=""value_xxx_c_1_f_8_a_""]')<|endoftext|>"
1287,<|endoftext|>delete an item `thing` in a list `some_list` if it exists: cleaned_list = [x for x in some_list if x is not thing]<|endoftext|>
1288,"<|endoftext|>print ""Please enter something: "" to console, and read user input to `var`: var = input('Please enter something: ')<|endoftext|>"
1289,<|endoftext|>append 4 to list `foo`: foo.append(4)<|endoftext|>
1290,"<|endoftext|>append a list [8, 7] to list `foo`: foo.append([8, 7])<|endoftext|>"
1291,"<|endoftext|>insert 77 to index 2 of list `x`: x.insert(2, 77)<|endoftext|>"
1292,"<|endoftext|>remove white space padding around a saved image `test.png` in matplotlib: plt.savefig('test.png', bbox_inches='tight')<|endoftext|>"
1293,<|endoftext|>concatenate lists `listone` and `listtwo`: (listone + listtwo)<|endoftext|>
1294,"<|endoftext|>iterate items in lists `listone` and `listtwo`: for item in itertools.chain(listone, listtwo):
    pass<|endoftext|>"
1295,<|endoftext|>create dataframe `males` containing data of dataframe `df` where column `Gender` is equal to 'Male' and column `Year` is equal to 2014: males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]<|endoftext|>
1296,<|endoftext|>print backslash: print('\\')<|endoftext|>
1297,"<|endoftext|>replace '-' in pandas dataframe `df` with `np.nan`: df.replace('-', np.nan)<|endoftext|>"
1298,"<|endoftext|>delete column 'column_name' from dataframe `df`: df = df.drop('column_name', 1)<|endoftext|>"
1299,"<|endoftext|>delete 1st, 2nd and 4th columns from dataframe `df`: df.drop(df.columns[[0, 1, 3]], axis=1)<|endoftext|>"
1300,"<|endoftext|>delete a column `column_name` without having to reassign from pandas data frame `df`: df.drop('column_name', axis=1, inplace=True)<|endoftext|>"
1301,<|endoftext|>disable abbreviation in argparse: parser = argparse.ArgumentParser(allow_abbrev=False)<|endoftext|>
1302,<|endoftext|>extract dictionary values by key 'Feature3' from data frame `df`: feature3 = [d.get('Feature3') for d in df.dic]<|endoftext|>
1303,"<|endoftext|>get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo': df.loc[gb.groups['foo'], ('A', 'B')]<|endoftext|>"
1304,"<|endoftext|>print '[1, 2, 3]': print('[%s, %s, %s]' % (1, 2, 3))<|endoftext|>"
1305,"<|endoftext|>Display `1 2 3` as a list of string: print('[{0}, {1}, {2}]'.format(1, 2, 3))<|endoftext|>"
1306,"<|endoftext|>get values from a dictionary `my_dict` whose key contains the string `Date`: [v for k, v in list(my_dict.items()) if 'Date' in k]<|endoftext|>"
1308,"<|endoftext|>drop a single subcolumn 'a' in column 'col1' from a dataframe `df`: df.drop(('col1', 'a'), axis=1)<|endoftext|>"
1309,"<|endoftext|>dropping all columns named 'a' from a multiindex 'df', across all level.: df.drop('a', level=1, axis=1)<|endoftext|>"
1310,<|endoftext|>build dictionary with keys of dictionary `_container` as keys and values of returned value of function `_value` with correlating key as parameter: {_key: _value(_key) for _key in _container}<|endoftext|>
1311,<|endoftext|>click on the text button 'section-select-all' using selenium python: browser.find_element_by_class_name('section-select-all').click()<|endoftext|>
1312,"<|endoftext|>combine two dictionaries `d ` and `d1`, concatenate string values with identical `keys`: dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)<|endoftext|>"
1313,<|endoftext|>generate unique equal hash for equal dictionaries `a` and `b`: hash(pformat(a)) == hash(pformat(b))<|endoftext|>
1314,"<|endoftext|>convert nested list of lists `[['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]` into a list of tuples: list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))<|endoftext|>"
1315,"<|endoftext|>sum the column `positions` along the  other columns `stock`, `same1`, `same2` in a pandas data frame `df`: df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()<|endoftext|>"
1317,<|endoftext|>change string `s` to upper case: s.upper()<|endoftext|>
1318,<|endoftext|>split a string `s` by ';' and convert to a dictionary: dict(item.split('=') for item in s.split(';'))<|endoftext|>
1319,"<|endoftext|>Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`: br.addheaders = [('Cookie', 'cookiename=cookie value')]<|endoftext|>"
1320,<|endoftext|>set data in column 'value' of dataframe `df` equal to first element of each list: df['value'] = df['value'].str[0]<|endoftext|>
1321,<|endoftext|>get element at index 0 of each list in column 'value' of dataframe `df`: df['value'] = df['value'].str.get(0)<|endoftext|>
1322,<|endoftext|>remove square bracket '[]' from pandas dataframe `df` column 'value': df['value'] = df['value'].str.strip('[]')<|endoftext|>
1323,"<|endoftext|>Get a string with string formatting from dictionary `d`: """""", """""".join(['{}_{}'.format(k, v) for k, v in d.items()])<|endoftext|>"
1324,"<|endoftext|>Sum of sums of each list, in a list of lists named 'lists'.: sum(sum(x) for x in lists)<|endoftext|>"
1325,"<|endoftext|>Check whether a numpy array `a` contains a given row `[1, 2]`: any(np.equal(a, [1, 2]).all(1))<|endoftext|>"
1326,<|endoftext|>check if all elements in list `mylist` are the same: len(set(mylist)) == 1<|endoftext|>
1327,"<|endoftext|>split a string `s` at line breaks `\r\n`: [map(int, x.split('\t')) for x in s.rstrip().split('\r\n')]<|endoftext|>"
1328,"<|endoftext|>sort a dictionary `a` by values that are list type: t = sorted(list(a.items()), key=lambda x: x[1])<|endoftext|>"
1329,"<|endoftext|>Search for string 'blabla' in txt file 'example.txt': if ('blabla' in open('example.txt').read()):
    pass<|endoftext|>"
1330,"<|endoftext|>Search for string 'blabla' in txt file 'example.txt': f = open('example.txt')
s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
if (s.find('blabla') != (-1)):
    pass<|endoftext|>"
1331,"<|endoftext|>Search for string `blabla` in txt file 'example.txt': datafile = file('example.txt')
found = False
for line in datafile:
    if (blabla in line):
        return True
return False<|endoftext|>"
1332,"<|endoftext|>insert string `string1` after each character of `string2`: string2.replace('', string1)[len(string1):-len(string1)]<|endoftext|>"
1333,"<|endoftext|>getting every possible combination of two elements in a list: list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))<|endoftext|>"
1334,"<|endoftext|>get a utf-8 string literal representation of byte string `x`: """"""x = {}"""""".format(x.decode('utf8')).encode('utf8')<|endoftext|>"
1335,"<|endoftext|>check if `x` is an integer: isinstance(x, int)<|endoftext|>"
1336,<|endoftext|>check if `x` is an integer: (type(x) == int)<|endoftext|>
1337,"<|endoftext|>play the wav file 'sound.wav': winsound.PlaySound('sound.wav', winsound.SND_FILENAME)<|endoftext|>"
1338,<|endoftext|>create a list containing the `n` next values of generator `it`: [next(it) for _ in range(n)]<|endoftext|>
1339,"<|endoftext|>get list of n next values of a generator `it`: list(itertools.islice(it, 0, n, 1))<|endoftext|>"
1340,<|endoftext|>compare two lists in python `a` and `b` and return matches: set(a).intersection(b)<|endoftext|>
1342,"<|endoftext|>convert list `data` into a string of its elements: print(''.join(map(str, data)))<|endoftext|>"
1343,"<|endoftext|>match regex pattern '\\$[0-9]+[^\\$]*$' on string '$1 off delicious $5 ham.': re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')<|endoftext|>"
1344,"<|endoftext|>import a nested module `c.py` within `b` within `a` with importlib: importlib.import_module('.c', 'a.b')<|endoftext|>"
1345,<|endoftext|>import a module 'a.b.c' with importlib.import_module in python 2: importlib.import_module('a.b.c')<|endoftext|>
1346,<|endoftext|>Convert array `a` to numpy array: a = np.array(a)<|endoftext|>
1347,"<|endoftext|>Find all `div` tags whose classes has the value `comment-` in a beautiful soup object `soup`: soup.find_all('div', class_=re.compile('comment-'))<|endoftext|>"
1348,<|endoftext|>a sequence of empty lists of length `n`: [[] for _ in range(n)]<|endoftext|>
1349,"<|endoftext|>create dictionary from list of variables 'foo' and 'bar' already defined: dict((k, globals()[k]) for k in ('foo', 'bar'))<|endoftext|>"
1350,<|endoftext|>get two random records from model 'MyModel' in Django: MyModel.objects.order_by('?')[:2]<|endoftext|>
1351,"<|endoftext|>Print a dictionary `{'user': {'name': 'Markus'}}` with string formatting: """"""Hello {user[name]}"""""".format(**{'user': {'name': 'Markus'}})<|endoftext|>"
1352,<|endoftext|>create a dictionary `list_dict` containing each tuple in list `tuple_list` as values and the tuple's first element as the corresponding key: list_dict = {t[0]: t for t in tuple_list}<|endoftext|>
1353,"<|endoftext|>Generate a random integer between 0 and 9: randint(0, 9)<|endoftext|>"
1354,"<|endoftext|>Generate a random integer between `a` and `b`: random.randint(a, b)<|endoftext|>"
1355,"<|endoftext|>Generate random integers between 0 and 9: print((random.randint(0, 9)))<|endoftext|>"
1356,"<|endoftext|>reverse a string `a` by 2 characters at a time: """""""""""".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))<|endoftext|>"
1357,"<|endoftext|>transform time series `df` into a pivot table aggregated by column 'Close' using column `df.index.date` as index and values of column `df.index.time` as columns: pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')<|endoftext|>"
1358,"<|endoftext|>check if the third element of all the lists in a list ""items"" is equal to zero.: any(item[2] == 0 for item in items)<|endoftext|>"
1359,<|endoftext|>Find all the lists from a lists of list 'items' if third element in all sub-lists is '0': [x for x in items if x[2] == 0]<|endoftext|>
1360,"<|endoftext|>sort dictionary of dictionaries `dic` according to the key 'Fisher': sorted(list(dic.items()), key=lambda x: x[1]['Fisher'], reverse=True)<|endoftext|>"
1361,"<|endoftext|>plot a data logarithmically in y axis: plt.yscale('log', nonposy='clip')<|endoftext|>"
1363,<|endoftext|>list the contents of a directory '/home/username/www/': os.listdir('/home/username/www/')<|endoftext|>
1364,<|endoftext|>list all the contents of the directory 'path'.: os.listdir('path')<|endoftext|>
1365,"<|endoftext|>merge a pandas data frame `distancesDF` and column `dates` in pandas data frame `datesDF` into single: pd.concat([distancesDF, datesDF.dates], axis=1)<|endoftext|>"
1366,<|endoftext|>get value of first index of each element in list `a`: [x[0] for x in a]<|endoftext|>
1367,<|endoftext|>python how to get every first element in 2 dimensional list `a`: [i[0] for i in a]<|endoftext|>
1368,"<|endoftext|>remove line breaks from string `textblock` using regex: re.sub('(?<=[a-z])\\r?\\n', ' ', textblock)<|endoftext|>"
1369,"<|endoftext|>Open gzip-compressed file encoded as utf-8 'file.gz' in text mode: gzip.open('file.gz', 'rt', encoding='utf-8')<|endoftext|>"
1370,"<|endoftext|>test if either of strings `a` or `b` are members of the set of strings, `['b', 'a', 'foo', 'bar']`: set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])<|endoftext|>"
1371,"<|endoftext|>Check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`: all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])<|endoftext|>"
1372,"<|endoftext|>Remove characters ""!@#$"" from a string `line`: line.translate(None, '!@#$')<|endoftext|>"
1373,"<|endoftext|>Remove characters ""!@#$"" from a string `line`: line = re.sub('[!@#$]', '', line)<|endoftext|>"
1374,"<|endoftext|>Remove string ""1"" from string `string`: string.replace('1', '')<|endoftext|>"
1375,"<|endoftext|>Remove character `char` from a string `a`: a = a.replace(char, '')<|endoftext|>"
1376,"<|endoftext|>Remove characters in `b` from a string `a`: a = a.replace(char, '')<|endoftext|>"
1377,"<|endoftext|>Remove characters in '!@#$' from a string `line`: line = line.translate(string.maketrans('', ''), '!@#$')<|endoftext|>"
1378,"<|endoftext|>binarize the values in columns of list `order` in a pandas data frame: pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]<|endoftext|>"
1379,"<|endoftext|>store integer 3, 4, 1 and 2 in a list: [3, 4, 1, 2]<|endoftext|>"
1380,<|endoftext|>define global variable `something` with value `bob`: globals()['something'] = 'bob'<|endoftext|>
1381,"<|endoftext|>insert spaces before capital letters in string `text`: re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\1 ', text)<|endoftext|>"
1382,<|endoftext|>print unicode string `ex\xe1mple` in uppercase: print('ex\xe1mple'.upper())<|endoftext|>
1383,<|endoftext|>get last element of string splitted by '\\' from list of strings `list_dirs`: [l.split('\\')[-1] for l in list_dirs]<|endoftext|>
1384,"<|endoftext|>combine two sequences into a dictionary: dict(zip(keys, values))<|endoftext|>"
1385,<|endoftext|>customize the time format in python logging: formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')<|endoftext|>
1386,"<|endoftext|>Replace comma with dot in a string `original_string` using regex: new_string = re.sub('""(\\d+),(\\d+)""', '\\1.\\2', original_string)<|endoftext|>"
1387,<|endoftext|>call a function `otherfunc` inside a bash script `test.sh` using subprocess: subprocess.call('test.sh otherfunc')<|endoftext|>
1389,"<|endoftext|>remove multiple spaces in a string `foo`: """""" """""".join(foo.split())<|endoftext|>"
1390,<|endoftext|>convert decimal 8 to a list of its binary values: list('{0:0b}'.format(8))<|endoftext|>
1391,<|endoftext|>convert decimal integer 8 to a list of its binary values as elements: [int(x) for x in list('{0:0b}'.format(8))]<|endoftext|>
1392,<|endoftext|>convert decimal `8` to binary list: [int(x) for x in bin(8)[2:]]<|endoftext|>
1393,"<|endoftext|>get key-value pairs in dictionary `my_dictionary` for all keys in list `my_list` in the order they appear in `my_list`: dict(zip(my_list, map(my_dictionary.get, my_list)))<|endoftext|>"
1394,"<|endoftext|>cartesian product of `x` and `y` array points into single array of 2d points: numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)<|endoftext|>"
1395,<|endoftext|>selenium wait for driver `driver` 60 seconds before throwing a NoSuchElementExceptions exception: driver.implicitly_wait(60)<|endoftext|>
1396,<|endoftext|>selenium webdriver switch to frame 'frameName': driver.switch_to_frame('frameName')<|endoftext|>
1397,<|endoftext|>format current date to pattern '{%Y-%m-%d %H:%M:%S}': time.strftime('{%Y-%m-%d %H:%M:%S}')<|endoftext|>
1398,"<|endoftext|>sort list `['14:10:01', '03:12:08']`: sorted(['14:10:01', '03:12:08'])<|endoftext|>"
1399,"<|endoftext|>find all occurrences of regex pattern '(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)' in string `x`: re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)<|endoftext|>"
1400,"<|endoftext|>remove duplicate rows from dataframe `df1` and calculate their frequency: df1.groupby(['key', 'year']).size().reset_index()<|endoftext|>"
1401,"<|endoftext|>sort dictionary `dictionary` in ascending order by its values: sorted(list(dictionary.items()), key=operator.itemgetter(1))<|endoftext|>"
1402,"<|endoftext|>Iterate over dictionary `d` in ascending order of values: sorted(iter(d.items()), key=lambda x: x[1])<|endoftext|>"
1403,"<|endoftext|>iterate over a python dictionary, ordered by values: sorted(list(dictionary.items()), key=lambda x: x[1])<|endoftext|>"
1404,"<|endoftext|>split 1d array `a` into 2d array at the last element: np.split(a, [-1])<|endoftext|>"
1405,"<|endoftext|>convert dataframe `df` into a pivot table using column 'order' as index and values of column 'sample' as columns: df.pivot(index='order', columns='sample')<|endoftext|>"
1406,<|endoftext|>select all rows from pandas DataFrame 'df' where the value in column 'A' is greater than 1 or less than -1 in column 'B'.: df[(df['A'] > 1) | (df['B'] < -1)]<|endoftext|>
1407,"<|endoftext|>Get the zip output as list from the lists `[1, 2, 3]`, `[4, 5, 6]`, `[7, 8, 9]`: [list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]<|endoftext|>"
1408,<|endoftext|>select rows of dataframe `df` whose value for column `A` is `foo`: print(df.loc[df['A'] == 'foo'])<|endoftext|>
1409,<|endoftext|>select rows whose column value in column `column_name` does not equal `some_value` in pandas data frame: df.loc[df['column_name'] != some_value]<|endoftext|>
1410,<|endoftext|>select rows from a dataframe `df` whose value for column `column_name` is not in `some_values`: df.loc[~df['column_name'].isin(some_values)]<|endoftext|>
1411,<|endoftext|>select all rows whose values in a column `column_name` equals a scalar `some_value` in pandas data frame object `df`: df.loc[df['column_name'] == some_value]<|endoftext|>
1412,"<|endoftext|>Select rows whose value of the ""B"" column is ""one"" or ""three"" in the DataFrame `df`: print(df.loc[df['B'].isin(['one', 'three'])])<|endoftext|>"
1413,"<|endoftext|>repeat every character for 7 times in string 'map': """""""""""".join(map(lambda x: x * 7, 'map'))<|endoftext|>"
1414,<|endoftext|>delete an empty directory: os.rmdir()<|endoftext|>
1415,"<|endoftext|>recursively delete all contents in directory `path`: shutil.rmtree(path, ignore_errors=False, onerror=None)<|endoftext|>"
1416,<|endoftext|>recursively remove folder `name`: os.removedirs(name)<|endoftext|>
1417,"<|endoftext|>Add row `['8/19/2014', 'Jun', 'Fly', '98765']` to dataframe `df`: df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']<|endoftext|>"
1418,<|endoftext|>list all files in a current directory: glob.glob('*')<|endoftext|>
1419,<|endoftext|>List all the files that doesn't contain the name `hello`: glob.glob('[!hello]*.txt')<|endoftext|>
1420,<|endoftext|>List all the files that matches the pattern `hello*.txt`: glob.glob('hello*.txt')<|endoftext|>
1421,<|endoftext|>evaluate the expression '20<30': eval('20<30')<|endoftext|>
1422,<|endoftext|>Copy list `old_list` and name it `new_list`: new_list = [x[:] for x in old_list]<|endoftext|>
1423,"<|endoftext|>convert scientific notation of variable `a` to decimal: """"""{:.50f}"""""".format(float(a[0] / a[1]))<|endoftext|>"
1424,<|endoftext|>convert dataframe `df` to integer-type sparse object: df.to_sparse(0)<|endoftext|>
1425,<|endoftext|>display attribute `attr` for each object `obj` in list `my_list_of_objs`: print([obj.attr for obj in my_list_of_objs])<|endoftext|>
1426,<|endoftext|>count the number of True values associated with key 'success' in dictionary `d`: sum(1 if d['success'] else 0 for d in s)<|endoftext|>
1427,<|endoftext|>get the sum of values associated with the key ‘success’ for a list of dictionaries `s`: sum(d['success'] for d in s)<|endoftext|>
1428,<|endoftext|>get complete path of a module named `os`: imp.find_module('os')[1]<|endoftext|>
1429,<|endoftext|>get logical xor of `a` and `b`: (bool(a) != bool(b))<|endoftext|>
1430,<|endoftext|>get logical xor of `a` and `b`: ((a and (not b)) or ((not a) and b))<|endoftext|>
1431,<|endoftext|>get logical xor of `a` and `b`: (bool(a) ^ bool(b))<|endoftext|>
1432,"<|endoftext|>get logical xor of `a` and `b`: xor(bool(a), bool(b))<|endoftext|>"
1433,<|endoftext|>get the logical xor of two variables `str1` and `str2`: return (bool(str1) ^ bool(str2))<|endoftext|>
1434,<|endoftext|>Sort list `my_list` in alphabetical order based on the values associated with key 'name' of each dictionary in the list: my_list.sort(key=operator.itemgetter('name'))<|endoftext|>
1435,"<|endoftext|>split a string `a , b; cdf`  using both commas and semicolons as delimeters: re.split('\\s*,\\s*|\\s*;\\s*', 'a , b; cdf')<|endoftext|>"
1436,"<|endoftext|>Split a string `string` by multiple separators `,` and `;`: [t.strip() for s in string.split(',') for t in s.split(';')]<|endoftext|>"
1437,"<|endoftext|>make a function `f` that calculates the sum of two integer variables `x` and `y`: f = lambda x, y: x + y<|endoftext|>"
1438,<|endoftext|>Create list `instancelist` containing 29 objects of type MyClass: instancelist = [MyClass() for i in range(29)]<|endoftext|>
1439,"<|endoftext|>Make a dictionary from list `f` which is in the format of four sets of  ""val, key, val"": {f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}<|endoftext|>"
1440,"<|endoftext|>convert bytes string `s`  to an unsigned integer: struct.unpack('>q', s)[0]<|endoftext|>"
1441,"<|endoftext|>concatenate a series `students` onto a dataframe `marks` with pandas: pd.concat([students, pd.DataFrame(marks)], axis=1)<|endoftext|>"
1442,<|endoftext|>Sort list `alist` in ascending order based on each of its elements' attribute `foo`: alist.sort(key=lambda x: x.foo)<|endoftext|>
1443,<|endoftext|>BeautifulSoup select 'div' elements with an id attribute value ending with sub-string '_answer' in HTML parsed string `soup`: soup.select('div[id$=_answer]')<|endoftext|>
1444,"<|endoftext|>sympy solve matrix of linear equations `(([1, 1, 1, 1], [1, 1, 2, 3]))` with variables `(x, y, z)`: linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))<|endoftext|>"
1445,"<|endoftext|>best way to extract subset of key-value pairs with keys matching 'l', 'm', or 'n' from python dictionary object: {k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}<|endoftext|>"
1446,"<|endoftext|>extract subset of key-value pairs with keys as `('l', 'm', 'n')` from dictionary object `bigdict`: dict((k, bigdict[k]) for k in ('l', 'm', 'n'))<|endoftext|>"
1447,"<|endoftext|>Get items from a dictionary `bigdict` where the keys are present in `('l', 'm', 'n')`: {k: bigdict.get(k, None) for k in ('l', 'm', 'n')}<|endoftext|>"
1448,"<|endoftext|>Extract subset of key value pair for keys 'l', 'm', 'n' from `bigdict` in python 3: {k: bigdict[k] for k in ('l', 'm', 'n')}<|endoftext|>"
1449,<|endoftext|>Selenium get the entire `driver` page text: driver.page_source<|endoftext|>
1450,"<|endoftext|>extracting column `1` and `9` from array `data`: data[:, ([1, 9])]<|endoftext|>"
1451,"<|endoftext|>remove all square brackets from string 'abcd[e]yth[ac]ytwec': re.sub('\\[.*?\\]', '', 'abcd[e]yth[ac]ytwec')<|endoftext|>"
1453,"<|endoftext|>find all substrings in string `mystring` composed only of letters `a` and `b` where each `a` is directly preceded and succeeded by `b`: re.findall('\\b(?:b+a)+b+\\b', mystring)<|endoftext|>"
1454,<|endoftext|>convert list `lst` of tuples of floats to list `str_list` of tuples of strings of floats in scientific notation with eight decimal point precision: str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]<|endoftext|>
1455,<|endoftext|>convert list of sublists `lst` of floats to a list of sublists `str_list` of strings of integers in scientific notation with 8 decimal points: str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]<|endoftext|>
1456,<|endoftext|>Create a tuple `t` containing first element of each tuple in tuple `s`: t = tuple(x[0] for x in s)<|endoftext|>
1457,<|endoftext|>obtain the current day of the week in a 3 letter format from a datetime object: datetime.datetime.now().strftime('%a')<|endoftext|>
1458,<|endoftext|>get the ASCII value of a character 'a' as an int: ord('a')<|endoftext|>
1459,<|endoftext|>get the ASCII value of a character u'あ' as an int: ord('\u3042')<|endoftext|>
1460,<|endoftext|>get the ASCII value of a character as an int: ord()<|endoftext|>
1461,<|endoftext|>decode JSON string `u` to a dictionary: json.load(u)<|endoftext|>
1462,"<|endoftext|>Delete mulitple columns `columnheading1`, `columnheading2` in pandas data frame `yourdf`: yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)<|endoftext|>"
1463,"<|endoftext|>get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string `s`: [s.strip() for s in input().split(',')]<|endoftext|>"
1464,<|endoftext|>create a list containing the digits values from binary string `x` as elements: [int(d) for d in str(bin(x))[2:]]<|endoftext|>
1465,<|endoftext|>get the max string length in list `i`: max(len(word) for word in i)<|endoftext|>
1466,"<|endoftext|>get the maximum string length in nested list `i`: len(max(i, key=len))<|endoftext|>"
1467,<|endoftext|>execute os command `my_cmd`: os.system(my_cmd)<|endoftext|>
1468,<|endoftext|>sort list `mylist` alphabetically: mylist.sort(key=lambda x: x.lower())<|endoftext|>
1469,<|endoftext|>sort list `mylist` in alphabetical order: mylist.sort(key=str.lower)<|endoftext|>
1470,<|endoftext|>sort a list of strings 'mylist'.: mylist.sort()<|endoftext|>
1471,<|endoftext|>sort a list of strings `list`: list.sort()<|endoftext|>
1472,"<|endoftext|>Set multi index on columns 'Company' and 'date' of data frame `df` in pandas.: df.set_index(['Company', 'date'], inplace=True)<|endoftext|>"
1473,"<|endoftext|>get the attribute `x` from object `your_obj`: getattr(your_obj, x)<|endoftext|>"
1474,"<|endoftext|>remove first word in string `s`: s.split(' ', 1)[1]<|endoftext|>"
1475,<|endoftext|>save xlsxwriter file in 'app/smth1/smth2/Expenses01.xlsx' path and assign to variable `workbook`: workbook = xlsxwriter.Workbook('app/smth1/smth2/Expenses01.xlsx')<|endoftext|>
1476,<|endoftext|>save xlsxwriter file to 'C:/Users/Steven/Documents/demo.xlsx' path: workbook = xlsxwriter.Workbook('C:/Users/Steven/Documents/demo.xlsx')<|endoftext|>
1477,"<|endoftext|>change legend size to 'x-small' in upper-left location: pyplot.legend(loc=2, fontsize='x-small')<|endoftext|>"
1478,"<|endoftext|>change legend font size with matplotlib.pyplot to 6: plot.legend(loc=2, prop={'size': 6})<|endoftext|>"
1479,"<|endoftext|>split list `l` into `n` sized lists: [l[i:i + n] for i in range(0, len(l), n)]<|endoftext|>"
1480,"<|endoftext|>split a list `l` into evenly sized chunks `n`: [l[i:i + n] for i in range(0, len(l), n)]<|endoftext|>"
1481,<|endoftext|>check if character '-' exists in a dataframe `df` cell 'a': df['a'].str.contains('-')<|endoftext|>
1482,"<|endoftext|>remove all non -word, -whitespace, or -apostrophe characters from string `doesn't this mean it -technically- works?`: re.sub(""[^\\w' ]"", '', ""doesn't this mean it -technically- works?"")<|endoftext|>"
1483,"<|endoftext|>find all digits between two characters `\xab` and `\xbb`in a string `text`: print(re.findall('\\d+', '\n'.join(re.findall('\xab([\\s\\S]*?)\xbb', text))))<|endoftext|>"
1484,"<|endoftext|>plot data of column 'index' versus column 'A' of dataframe `monthly_mean` after resetting its index: monthly_mean.reset_index().plot(x='index', y='A')<|endoftext|>"
1485,"<|endoftext|>get the output of a subprocess command `echo ""foo""` in command line: subprocess.check_output('echo ""foo""', shell=True)<|endoftext|>"
1486,<|endoftext|>Encode each value to 'UTF8' in the list `EmployeeList`: [x.encode('UTF8') for x in EmployeeList]<|endoftext|>
1487,"<|endoftext|>combine two columns `foo` and `bar` in a pandas data frame: pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)<|endoftext|>"
1488,<|endoftext|>generate a list of consecutive integers from 0 to 8: list(range(9))<|endoftext|>
1489,"<|endoftext|>convert list `myintegers` into a unicode string: """""""""""".join(chr(i) for i in myintegers)<|endoftext|>"
1490,"<|endoftext|>inherit from class `Executive`: super(Executive, self).__init__(*args)<|endoftext|>"
1491,<|endoftext|>Remove the string value `item` from a list of strings `my_sequence`: [item for item in my_sequence if item != 'item']<|endoftext|>
1492,<|endoftext|>randomly select an item from list `foo`: random.choice(foo)<|endoftext|>
1493,"<|endoftext|>check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`: set(['a', 'b']).issubset(['a', 'b', 'c'])<|endoftext|>"
1494,"<|endoftext|>Check if all the items in a list `['a', 'b']` exists in another list `l`: set(['a', 'b']).issubset(set(l))<|endoftext|>"
1495,"<|endoftext|>set the stdin of the process 'grep f' to be b'one\ntwo\nthree\nfour\nfive\nsix\n': p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)
grep_stdout = p.communicate(input='one\ntwo\nthree\nfour\nfive\nsix\n')[0]<|endoftext|>"
1496,"<|endoftext|>set the stdin of the process 'grep f' to be 'one\ntwo\nthree\nfour\nfive\nsix\n': p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
p.stdin.write('one\ntwo\nthree\nfour\nfive\nsix\n')
p.communicate()[0]
p.stdin.close()<|endoftext|>"
1497,<|endoftext|>to convert a list of tuples `list_of_tuples` into list of lists: [list(t) for t in zip(*list_of_tuples)]<|endoftext|>
1498,<|endoftext|>group a list `list_of_tuples` of tuples by values: zip(*list_of_tuples)<|endoftext|>
1499,"<|endoftext|>merge pandas dataframe `x` with columns 'a' and 'b' and dataframe `y` with column 'y': pd.merge(y, x, on='k')[['a', 'b', 'y']]<|endoftext|>"
1500,"<|endoftext|>Split string with comma (,) and remove whitespace from a string 'my_string': [item.strip() for item in my_string.split(',')]<|endoftext|>"
1501,<|endoftext|>Get all object attributes of object `obj`: print((obj.__dict__))<|endoftext|>
1502,<|endoftext|>Get all object attributes of an object: dir()<|endoftext|>
1503,<|endoftext|>Get all object attributes of an object: dir()<|endoftext|>
1504,<|endoftext|>pygobject center window `window`: window.set_position(Gtk.WindowPosition.CENTER)<|endoftext|>
1505,"<|endoftext|>change the size of the sci notation to '30' above the y axis in matplotlib `plt`: plt.rc('font', **{'size': '30'})<|endoftext|>"
1506,<|endoftext|>check if datafram `df` has any NaN vlaues: df.isnull().values.any()<|endoftext|>
1507,<|endoftext|>unpack the arguments out of list `params` to function `some_func`: some_func(*params)<|endoftext|>
1508,<|endoftext|>decode encodeuricomponent in GAE: urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')<|endoftext|>
1509,<|endoftext|>get proportion of rows in dataframe `trace_df` whose values for column `ratio` are greater than 0: (trace_df['ratio'] > 0).mean()<|endoftext|>
1510,<|endoftext|>convert a set of tuples `queryresult` to a string `emaillist`: emaillist = '\n'.join(item[0] for item in queryresult)<|endoftext|>
1511,<|endoftext|>convert a set of tuples `queryresult` to a list of strings: [item[0] for item in queryresult]<|endoftext|>
1512,<|endoftext|>convert a list of tuples `queryresult` to a string from the first indexes.: emaillist = '\n'.join([item[0] for item in queryresult])<|endoftext|>
1513,"<|endoftext|>get the widget which has currently the focus in tkinter instance `window2`: print(('focus object class:', window2.focus_get().__class__))<|endoftext|>"
1514,<|endoftext|>Initialize a list `a` with `10000` items and each item's value `0`: a = [0] * 10000<|endoftext|>
1515,"<|endoftext|>Keep only unique words in list of words `words` and join into string: print(' '.join(sorted(set(words), key=words.index)))<|endoftext|>"
1516,"<|endoftext|>generate 6 random numbers between 1 and 50: random.sample(range(1, 50), 6)<|endoftext|>"
1517,"<|endoftext|>generate six unique random numbers in the range of 1 to 49.: random.sample(range(1, 50), 6)<|endoftext|>"
1518,"<|endoftext|>lowercase keys and values in dictionary `{'My Key': 'My Value'}`: {k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}<|endoftext|>"
1519,"<|endoftext|>lowercase all keys and values in dictionary `{'My Key': 'My Value'}`: dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())<|endoftext|>"
1520,"<|endoftext|>Convert each key,value pair in a dictionary `{'My Key': 'My Value'}` to lowercase: dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())<|endoftext|>"
1521,<|endoftext|>sorting the lists in list of lists `data`: [sorted(item) for item in data]<|endoftext|>
1522,"<|endoftext|>SQLite get a list of column names from cursor object `cursor`: names = list(map(lambda x: x[0], cursor.description))<|endoftext|>"
1523,<|endoftext|>get the absolute path of a running python script: os.path.abspath(__file__)<|endoftext|>
1524,"<|endoftext|>sort 2d array `matrix` by row with index 1: sorted(matrix, key=itemgetter(1))<|endoftext|>"
1525,"<|endoftext|>Get all indexes of a letter `e` from a string `word`: [index for index, letter in enumerate(word) if letter == 'e']<|endoftext|>"
1526,<|endoftext|>decode utf-8 code `x` into a raw unicode literal: print(str(x).decode('raw_unicode_escape'))<|endoftext|>
1527,"<|endoftext|>split string 'abcdefg' into a list of characters: re.findall('\\w', 'abcdefg')<|endoftext|>"
1528,<|endoftext|>check whether a file `fname` exists: os.path.isfile(fname)<|endoftext|>
1529,"<|endoftext|>check whether file ""/path/to/file"" exists: my_file = Path('/path/to/file')
if my_file.is_file():
    pass<|endoftext|>"
1530,<|endoftext|>check whether file `file_path` exists: os.path.exists(file_path)<|endoftext|>
1531,"<|endoftext|>check whether a file ""/etc/password.txt"" exists: print(os.path.isfile('/etc/password.txt'))<|endoftext|>"
1532,"<|endoftext|>check whether a file ""/etc"" exists: print(os.path.isfile('/etc'))<|endoftext|>"
1533,"<|endoftext|>check whether a path ""/does/not/exist"" exists: print(os.path.exists('/does/not/exist'))<|endoftext|>"
1534,"<|endoftext|>check whether a file ""/does/not/exist"" exists: print(os.path.isfile('/does/not/exist'))<|endoftext|>"
1535,"<|endoftext|>check whether a path ""/etc"" exists: print(os.path.exists('/etc'))<|endoftext|>"
1536,"<|endoftext|>check whether a path ""/etc/password.txt"" exists: print(os.path.exists('/etc/password.txt'))<|endoftext|>"
1537,"<|endoftext|>split string ""a;bcd,ef g"" on delimiters ';' and ',': """"""a;bcd,ef g"""""".replace(';', ' ').replace(',', ' ').split()<|endoftext|>"
1538,<|endoftext|>get a list each value `i` in the implicit tuple `range(3)`: list(i for i in range(3))<|endoftext|>
1539,<|endoftext|>add field names as headers in csv constructor `writer`: writer.writeheader()<|endoftext|>
1540,"<|endoftext|>flatten a tuple `l`: [(a, b, c) for a, (b, c) in l]<|endoftext|>"
1541,"<|endoftext|>convert 3652458 to string represent a 32bit hex number: """"""0x{0:08X}"""""".format(3652458)<|endoftext|>"
1542,"<|endoftext|>convert a python dictionary `d` to a list of tuples: [(v, k) for k, v in list(d.items())]<|endoftext|>"
1543,"<|endoftext|>convert dictionary of pairs `d` to a list of tuples: [(v, k) for k, v in d.items()]<|endoftext|>"
1544,"<|endoftext|>convert python 2 dictionary `a` to a list of tuples where the value is the first tuple element and the key is the second tuple element: [(v, k) for k, v in a.items()]<|endoftext|>"
1545,"<|endoftext|>convert a python dictionary 'a' to a list of tuples: [(k, v) for k, v in a.items()]<|endoftext|>"
1546,"<|endoftext|>convert a list of hex byte strings `['BB', 'A7', 'F6', '9E']` to a list of hex integers: [int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]<|endoftext|>"
1547,"<|endoftext|>convert the elements of list `L` from hex byte strings to hex integers: [int(x, 16) for x in L]<|endoftext|>"
1548,"<|endoftext|>assign values to two variables, `var1` and `var2` from user input response to `'Enter two numbers here: ` split on whitespace: var1, var2 = input('Enter two numbers here: ').split()<|endoftext|>"
1549,<|endoftext|>Filter a json from a key-value pair as `{'fixed_key_1': 'foo2'}` in Django: Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'}])<|endoftext|>
1550,"<|endoftext|>create a list containing a four elements long tuples of permutations of binary values: itertools.product(list(range(2)), repeat=4)<|endoftext|>"
1551,<|endoftext|>get yesterday's date as a string in `YYYY-MM-DD` format using timedelta: (datetime.now() - timedelta(1)).strftime('%Y-%m-%d')<|endoftext|>
1552,"<|endoftext|>Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`: np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])<|endoftext|>"
1553,"<|endoftext|>convert date strings in pandas dataframe column`df['date']` to pandas timestamps using the format '%d%b%Y': df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')<|endoftext|>"
1554,"<|endoftext|>Importing file `file` from folder '/path/to/application/app/folder': sys.path.insert(0, '/path/to/application/app/folder')
import file<|endoftext|>"
1555,"<|endoftext|>do a `left` merge of dataframes `x` and `y` on the column `state` and sort by `index`: x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')<|endoftext|>"
1556,"<|endoftext|>Create a default empty json object if no json is available in request parameter `mydata`: json.loads(request.POST.get('mydata', '{}'))<|endoftext|>"
1557,"<|endoftext|>get a list of tuples of every three consecutive items in list `[1, 2, 3, 4, 5, 6, 7, 8, 9]`: list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))<|endoftext|>"
1558,"<|endoftext|>slice list `[1, 2, 3, 4, 5, 6, 7]` into lists of two elements each: list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))<|endoftext|>"
1560,"<|endoftext|>Sort list `keys` based on its elements' dot-seperated numbers: keys.sort(key=lambda x: map(int, x.split('.')))<|endoftext|>"
1561,<|endoftext|>Sort a list of integers `keys` where each value is in string format: keys.sort(key=lambda x: [int(y) for y in x.split('.')])<|endoftext|>
1562,"<|endoftext|>convert a 3d array `img` of dimensions 4x2x3 to a 2d array   of dimensions 3x8: img.transpose(2, 0, 1).reshape(3, -1)<|endoftext|>"
1563,"<|endoftext|>replacing 'ABC' and 'AB' values in column 'BrandName' of dataframe `df` with 'A': df['BrandName'].replace(['ABC', 'AB'], 'A')<|endoftext|>"
1564,"<|endoftext|>replace values `['ABC', 'AB']` in a column 'BrandName' of  pandas dataframe `df` with another value 'A': df['BrandName'] = df['BrandName'].replace(['ABC', 'AB'], 'A')<|endoftext|>"
1565,"<|endoftext|>Subtract the mean of each row in dataframe `df` from the corresponding row's elements: df.sub(df.mean(axis=1), axis=0)<|endoftext|>"
1566,"<|endoftext|>remove all non-alphabet chars from string `s`: """""""""""".join([i for i in s if i.isalpha()])<|endoftext|>"
1567,<|endoftext|>split a string `s` into integers: l = (int(x) for x in s.split())<|endoftext|>
1568,"<|endoftext|>split a string `42 0` by white spaces.: """"""42 0"""""".split()<|endoftext|>"
1570,"<|endoftext|>get indexes of all true boolean values from a list `bool_list`: [i for i, elem in enumerate(bool_list, 1) if elem]<|endoftext|>"
1571,<|endoftext|>group dataframe `data` entries by year value of the date in column 'date': data.groupby(data['date'].map(lambda x: x.year))<|endoftext|>
1572,"<|endoftext|>Get the indices in array `b` of each element appearing in array `a`: np.in1d(b, a).nonzero()[0]<|endoftext|>"
1573,"<|endoftext|>display current time in readable format: time.strftime('%l:%M%p %z on %b %d, %Y')<|endoftext|>"
1574,"<|endoftext|>rotate x-axis text labels of plot `ax` 45 degrees: ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)<|endoftext|>"
1575,"<|endoftext|>append array of strings `['x', 'x', 'x']` into one string: """""""""""".join(['x', 'x', 'x'])<|endoftext|>"
1576,"<|endoftext|>retrieve all items in an numpy array 'x' except the item of the index 1: x[(np.arange(x.shape[0]) != 1), :, :]<|endoftext|>"
1577,<|endoftext|>pull a value with key 'name' from a json object `item`: print(item['name'])<|endoftext|>
1578,<|endoftext|>read a file from redirected stdin and save to variable `result`: result = sys.stdin.read()<|endoftext|>
1579,"<|endoftext|>Get all the texts without tags from beautiful soup object `soup`: """""""""""".join(soup.findAll(text=True))<|endoftext|>"
1580,<|endoftext|>extract all rows from dataframe `data` where the value of column 'Value' is True: data[data['Value'] == True]<|endoftext|>
1581,"<|endoftext|>removing duplicate characters from a string variable ""foo"": """""""""""".join(set(foo))<|endoftext|>"
1582,"<|endoftext|>sort objects in model `Profile` based on Theirs `reputation` attribute: sorted(Profile.objects.all(), key=lambda p: p.reputation)<|endoftext|>"
1583,<|endoftext|>flatten a dataframe df to a list: df.values.flatten()<|endoftext|>
1584,<|endoftext|>sort list `users` using values associated with key 'id' according to elements in list `order`: users.sort(key=lambda x: order.index(x['id']))<|endoftext|>
1585,<|endoftext|>sort a python list of dictionaries `users` by a given list `order` of ids 'id' with the desired order: users.sort(key=lambda x: order.index(x['id']))<|endoftext|>
1586,"<|endoftext|>request URI '<MY_URI>' and pass authorization token 'TOK:<MY_TOKEN>' to the header: r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})<|endoftext|>"
1587,"<|endoftext|>un-escape a backslash-escaped string in `Hello,\\nworld!`: print('""Hello,\\nworld!""'.decode('string_escape'))<|endoftext|>"
1588,"<|endoftext|>match regex pattern 'a*?bc*?' on string 'aabcc' with DOTALL enabled: re.findall('a*?bc*?', 'aabcc', re.DOTALL)<|endoftext|>"
1589,<|endoftext|>get second array column length of array `a`: a.shape[1]<|endoftext|>
1590,"<|endoftext|>use operations like max/min within a row to a dataframe 'd' in pandas: d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)<|endoftext|>"
1591,"<|endoftext|>count number of occurrences of a substring 'ab' in a string ""abcdabcva"": """"""abcdabcva"""""".count('ab')<|endoftext|>"
1592,<|endoftext|>get a list of values with key 'key' from a list of dictionaries `l`: [d['key'] for d in l if 'key' in d]<|endoftext|>
1593,<|endoftext|>get a list of values for key 'key' from a list of dictionaries `l`: [d['key'] for d in l]<|endoftext|>
1594,"<|endoftext|>get a list of values for key ""key"" from a list of dictionaries in `l`: [d['key'] for d in l]<|endoftext|>"
1595,<|endoftext|>order a list of lists `l1` by the first value: l1.sort(key=lambda x: int(x[0]))<|endoftext|>
1596,"<|endoftext|>order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list: sorted([[1, 'mike'], [1, 'bob']])<|endoftext|>"
1597,"<|endoftext|>replace a string `Abc` in case sensitive way using maketrans: """"""Abc"""""".translate(maketrans('abcABC', 'defDEF'))<|endoftext|>"
1598,"<|endoftext|>dictionary `d` to string, custom format: """"""<br/>"""""".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])<|endoftext|>"
1600,<|endoftext|>clear terminal screen on windows: os.system('cls')<|endoftext|>
1601,<|endoftext|>clear the terminal screen in Linux: os.system('clear')<|endoftext|>
1602,<|endoftext|>execute external commands/script `your_own_script` with csh instead of bash: os.system('tcsh your_own_script')<|endoftext|>
1603,"<|endoftext|>execute command 'echo $0' in Z shell: os.system(""zsh -c 'echo $0'"")<|endoftext|>"
1604,"<|endoftext|>update a list `l1` dictionaries with a key `count` and value from list `l2`: [dict(d, count=n) for d, n in zip(l1, l2)]<|endoftext|>"
1605,<|endoftext|>create a list with the sum of respective elements of the tuples of list `l`: [sum(x) for x in zip(*l)]<|endoftext|>
1606,"<|endoftext|>sum each value in a list `l` of tuples: map(sum, zip(*l))<|endoftext|>"
1607,<|endoftext|>count the number of non-nan elements in a numpy ndarray matrix `data`: np.count_nonzero(~np.isnan(data))<|endoftext|>
1608,"<|endoftext|>Convert each list in list `main_list` into a tuple: map(list, zip(*main_list))<|endoftext|>"
1609,"<|endoftext|>django get the value of key 'title' from POST request `request` if exists, else return empty string '': request.POST.get('title', '')<|endoftext|>"
1610,"<|endoftext|>check if string `test.mp3` ends with one of the strings from a tuple `('.mp3', '.avi')`: """"""test.mp3"""""".endswith(('.mp3', '.avi'))<|endoftext|>"
1611,"<|endoftext|>split a string 's' by space while ignoring spaces within square braces and quotes.: re.findall('\\[[^\\]]*\\]|""[^""]*""|\\S+', s)<|endoftext|>"
1612,"<|endoftext|>get biggest 3 values from each column of the pandas dataframe `data`: data.apply(lambda x: sorted(x, 3))<|endoftext|>"
1613,<|endoftext|>permanently set the current directory to the 'C:/Users/Name/Desktop': os.chdir('C:/Users/Name/Desktop')<|endoftext|>
1614,"<|endoftext|>get all characters between two `$` characters in string `string`: re.findall('\\$([^$]*)\\$', string)<|endoftext|>"
1615,"<|endoftext|>getting the string between 2 '$' characters in '$sin (x)$ is an function of x': re.findall('\\$(.*?)\\$', '$sin (x)$ is an function of x')<|endoftext|>"
1616,"<|endoftext|>Format a date object `str_data` into iso fomrat: datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()<|endoftext|>"
1617,"<|endoftext|>get element at index 0 of first row and element at index 1 of second row in array `A`: A[[0, 1], [0, 1]]<|endoftext|>"
1618,"<|endoftext|>subset numpy array `a` by column and row, returning the values from the first row, first column and the second row, second column and the third row, first column.: a[np.arange(3), (0, 1, 0)]<|endoftext|>"
1619,"<|endoftext|>Get a list of all keys from dictionary `dictA` where the number of occurrences of value `duck` in that key is more than `1`: [k for k, v in dictA.items() if v.count('duck') > 1]<|endoftext|>"
1620,"<|endoftext|>Create sub matrix of a list of lists `[[2, 3, 4], [2, 3, 4], [2, 3, 4]]` (without numpy): [[2, 3, 4], [2, 3, 4], [2, 3, 4]]<|endoftext|>"
1621,"<|endoftext|>get an element at index `[1,1]`in a numpy array `arr`: print(arr[1, 1])<|endoftext|>"
1622,"<|endoftext|>Set colorbar range from `0` to `15` for pyplot object `quadmesh` in matplotlib: quadmesh.set_clim(vmin=0, vmax=15)<|endoftext|>"
1623,"<|endoftext|>read csv file 'my_file.csv' into numpy array: my_data = genfromtxt('my_file.csv', delimiter=',')<|endoftext|>"
1624,"<|endoftext|>read csv file 'myfile.csv' into array: df = pd.read_csv('myfile.csv', sep=',', header=None)<|endoftext|>"
1625,"<|endoftext|>read csv file 'myfile.csv' into array: np.genfromtxt('myfile.csv', delimiter=',')<|endoftext|>"
1626,"<|endoftext|>read csv file 'myfile.csv' into array: np.genfromtxt('myfile.csv', delimiter=',', dtype=None)<|endoftext|>"
1627,<|endoftext|>read the first line of a string `my_string`: my_string.splitlines()[0]<|endoftext|>
1629,<|endoftext|>generate a list from a pandas dataframe `df` with the column name and column values: df.values.tolist()<|endoftext|>
1630,"<|endoftext|>Replace repeated instances of a character '*' with a single instance in a string 'text': re.sub('\\*\\*+', '*', text)<|endoftext|>"
1631,"<|endoftext|>replace repeated instances of ""*"" with a single instance of ""*"": re.sub('\\*+', '*', text)<|endoftext|>"
1632,"<|endoftext|>multiply values of dictionary `dict` with their respective values in dictionary `dict2`: dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)<|endoftext|>"
1633,<|endoftext|>Get a random string of length `length`: return ''.join(random.choice(string.lowercase) for i in range(length))<|endoftext|>
1634,<|endoftext|>Get total number of values in a nested dictionary `food_colors`: sum(len(x) for x in list(food_colors.values()))<|endoftext|>
1635,<|endoftext|>count all elements in a nested dictionary `food_colors`: sum(len(v) for v in food_colors.values())<|endoftext|>
1636,<|endoftext|>apply logical operator 'AND' to all elements in list `a_list`: all(a_list)<|endoftext|>
1637,"<|endoftext|>removing vowel characters 'aeiouAEIOU' from string `text`: """""""""""".join(c for c in text if c not in 'aeiouAEIOU')<|endoftext|>"
1638,"<|endoftext|>Divide elements in list `a` from elements at the same index in list `b`: [(x / y) for x, y in zip(a, b)]<|endoftext|>"
1639,"<|endoftext|>match regex 'abc(de)fg(123)' on string 'abcdefg123 and again abcdefg123': re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')<|endoftext|>"
1640,<|endoftext|>apply function `log2` to the grouped values by 'type' in dataframe `df`: df.groupby('type').apply(lambda x: np.mean(np.log2(x['v'])))<|endoftext|>
1641,"<|endoftext|>get geys of dictionary `my_dict` that contain any values from list `lst`: [key for key, value in list(my_dict.items()) if set(value).intersection(lst)]<|endoftext|>"
1642,"<|endoftext|>get list of keys in dictionary `my_dict` whose values contain values from list `lst`: [key for item in lst for key, value in list(my_dict.items()) if item in value]<|endoftext|>"
1643,"<|endoftext|>Sum elements of tuple `b` to their respective elements of each tuple in list `a`: c = [[(i + j) for i, j in zip(e, b)] for e in a]<|endoftext|>"
1644,"<|endoftext|>get the common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log': os.path.commonprefix(['/usr/var', '/usr/var2/log'])<|endoftext|>"
1645,"<|endoftext|>get relative path of path '/usr/var' regarding path '/usr/var/log/': print(os.path.relpath('/usr/var/log/', '/usr/var'))<|endoftext|>"
1646,<|endoftext|>filter dataframe `grouped` where the length of each group `x` is bigger than 1: grouped.filter(lambda x: len(x) > 1)<|endoftext|>
1647,"<|endoftext|>sort dictionary of lists `myDict` by the third item in each list: sorted(list(myDict.items()), key=lambda e: e[1][2])<|endoftext|>"
1648,"<|endoftext|>Format string `hello {name}, how are you {name}, welcome {name}` to be interspersed by `name` three times, specifying the value as `john` only once: """"""hello {name}, how are you {name}, welcome {name}"""""".format(name='john')<|endoftext|>"
1649,"<|endoftext|>reorder indexed rows `['Z', 'C', 'A']` based on a list in pandas data frame `df`: df.reindex(['Z', 'C', 'A'])<|endoftext|>"
1650,"<|endoftext|>check if any values in a list `input_list` is a list: any(isinstance(el, list) for el in input_list)<|endoftext|>"
1651,<|endoftext|>get the size of list `items`: len(items)<|endoftext|>
1652,"<|endoftext|>get the size of a list `[1,2,3]`: len([1, 2, 3])<|endoftext|>"
1653,<|endoftext|>get the size of object `items`: items.__len__()<|endoftext|>
1654,<|endoftext|>function to get the size of object: len()<|endoftext|>
1655,<|endoftext|>get the size of list `s`: len(s)<|endoftext|>
1656,"<|endoftext|>sort each row in a pandas dataframe `df` in descending order: df.sort(axis=1, ascending=False)<|endoftext|>"
1658,"<|endoftext|>get count of rows in each series grouped by column 'col5' and column 'col2' of dataframe `df`: df.groupby(['col5', 'col2']).size().groupby(level=1).max()<|endoftext|>"
1659,"<|endoftext|>check if string 'x' is  in list `['x', 'd', 'a', 's', 'd', 's']`: 'x' in ['x', 'd', 'a', 's', 'd', 's']<|endoftext|>"
1660,"<|endoftext|>Delete an item with key ""key"" from `mydict`: mydict.pop('key', None)<|endoftext|>"
1661,<|endoftext|>Delete an item with key `key` from `mydict`: del mydict[key]<|endoftext|>
1662,"<|endoftext|>Delete an item with key `key` from `mydict`: try:
    del mydict[key]
except KeyError:
    pass
try:
    del mydict[key]
except KeyError:
    pass<|endoftext|>"
1663,"<|endoftext|>specify multiple positional arguments with argparse: parser.add_argument('input', nargs='+')<|endoftext|>"
1664,"<|endoftext|>Plot using the color code `#112233` in matplotlib pyplot: pyplot.plot(x, y, color='#112233')<|endoftext|>"
1665,"<|endoftext|>strip html from strings: re.sub('<[^<]+?>', '', text)<|endoftext|>"
1666,"<|endoftext|>align values in array `b` to the order of corresponding values in array `a`: a[np.in1d(a, b)]<|endoftext|>"
1667,"<|endoftext|>split string ""jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,"" on the first occurrence of delimiter '=': """"""jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,"""""".split('=', 1)<|endoftext|>"
1668,"<|endoftext|>print numbers in list `list` with precision of 3 decimal places: print('[%s]' % ', '.join('%.3f' % val for val in list))<|endoftext|>"
1669,"<|endoftext|>format print output of list of floats `l` to print only up to 3 decimal points: print('[' + ', '.join('%5.3f' % v for v in l) + ']')<|endoftext|>"
1670,<|endoftext|>print a list of floating numbers `l` using string formatting: print([('%5.3f' % val) for val in l])<|endoftext|>
1671,<|endoftext|>Change the current directory one level up: os.chdir('..')<|endoftext|>
1672,<|endoftext|>print a unicode string `text`: print(text.encode('windows-1252'))<|endoftext|>
1673,"<|endoftext|>convert string representation `s2` of binary string rep of integer to floating point number: struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]<|endoftext|>"
1674,"<|endoftext|>convert a binary '-0b1110' to a float number: float(int('-0b1110', 0))<|endoftext|>"
1675,"<|endoftext|>convert a binary `b8` to a float number: struct.unpack('d', b8)[0]<|endoftext|>"
1676,<|endoftext|>plot a bar graph from the column 'color' in the DataFrame 'df': df.colour.value_counts().plot(kind='bar')<|endoftext|>
1677,<|endoftext|>plot categorical data in series `df` with kind `bar` using pandas and matplotlib: df.groupby('colour').size().plot(kind='bar')<|endoftext|>
1678,<|endoftext|>strip and split each line `line` on white spaces: line.strip().split(' ')<|endoftext|>
1679,"<|endoftext|>apply functions `mean` and `std` to each column in dataframe `df`: df.groupby(lambda idx: 0).agg(['mean', 'std'])<|endoftext|>"
1680,"<|endoftext|>sort dictionary `tag_weight` in reverse order by values cast to integers: sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)<|endoftext|>"
1681,<|endoftext|>find the largest integer less than `x`: int(math.ceil(x)) - 1<|endoftext|>
1682,"<|endoftext|>check if the string `myString` is empty: if (not myString):
    pass<|endoftext|>"
1683,"<|endoftext|>check if string `some_string` is empty: if (not some_string):
    pass<|endoftext|>"
1684,"<|endoftext|>check if string `my_string` is empty: if (not my_string):
    pass<|endoftext|>"
1685,"<|endoftext|>check if string `my_string` is empty: if some_string:
    pass<|endoftext|>"
1686,<|endoftext|>iterate over a dictionary `d` in sorted order: it = iter(sorted(d.items()))<|endoftext|>
1687,"<|endoftext|>iterate over a dictionary `d` in sorted order: for (key, value) in sorted(d.items()):
    pass<|endoftext|>"
1688,<|endoftext|>iterate over a dictionary `dict` in sorted order: return sorted(dict.items())<|endoftext|>
1689,<|endoftext|>iterate over a dictionary `dict` in sorted order: return iter(sorted(dict.items()))<|endoftext|>
1690,"<|endoftext|>iterate over a dictionary `foo` in sorted order: for (k, v) in sorted(foo.items()):
    pass<|endoftext|>"
1691,"<|endoftext|>iterate over a dictionary `foo` sorted by the key: for k in sorted(foo.keys()):
    pass<|endoftext|>"
1692,<|endoftext|>assign the index of the last occurence of `x` in list `s` to the variable `last`: last = len(s) - s[::-1].index(x) - 1<|endoftext|>
1693,<|endoftext|>concatenating values in `list1` to a string: str1 = ''.join(list1)<|endoftext|>
1694,"<|endoftext|>concatenating values in list `L` to a string, separate by space: ' '.join((str(x) for x in L))<|endoftext|>"
1695,<|endoftext|>concatenating values in `list1` to a string: str1 = ''.join((str(e) for e in list1))<|endoftext|>
1696,"<|endoftext|>concatenating values in list `L` to a string: makeitastring = ''.join(map(str, L))<|endoftext|>"
1697,<|endoftext|>remove None value from list `L`: [x for x in L if x is not None]<|endoftext|>
1698,"<|endoftext|>select a random element from array `[1, 2, 3]`: random.choice([1, 2, 3])<|endoftext|>"
1699,<|endoftext|>creating a 5x6 matrix filled with `None` and save it as `x`: x = [[None for _ in range(5)] for _ in range(6)]<|endoftext|>
1700,"<|endoftext|>create a new 2D array with 2 random rows from array `A`: A[(np.random.choice(A.shape[0], 2, replace=False)), :]<|endoftext|>"
1701,"<|endoftext|>create a new 2 dimensional array containing two random rows from array `A`: A[(np.random.randint(A.shape[0], size=2)), :]<|endoftext|>"
1702,<|endoftext|>combining rows in pandas by adding their values: df.groupby(df.index).sum()<|endoftext|>
1703,<|endoftext|>find all `owl:Class` tags by parsing xml with namespace: root.findall('{http://www.w3.org/2002/07/owl#}Class')<|endoftext|>
1704,"<|endoftext|>generate a random string of length `x`  containing lower cased ASCII letters: """""""""""".join(random.choice(string.lowercase) for x in range(X))<|endoftext|>"
1705,<|endoftext|>add a path `/path/to/2014_07_13_test` to system path: sys.path.append('/path/to/2014_07_13_test')<|endoftext|>
1706,<|endoftext|>round number `x` to nearest integer: int(round(x))<|endoftext|>
1707,<|endoftext|>round number `h` to nearest integer: h = int(round(h))<|endoftext|>
1708,"<|endoftext|>round number 32.268907563 up to 3 decimal points: round(32.268907563, 3)<|endoftext|>"
1709,"<|endoftext|>round number `value` up to `significantDigit` decimal places: round(value, significantDigit)<|endoftext|>"
1710,"<|endoftext|>round number 1.0005 up to 3 decimal places: round(1.0005, 3)<|endoftext|>"
1711,"<|endoftext|>round number 2.0005 up to 3 decimal places: round(2.0005, 3)<|endoftext|>"
1712,"<|endoftext|>round number 3.0005 up to 3 decimal places: round(3.0005, 3)<|endoftext|>"
1713,"<|endoftext|>round number 4.0005 up to 3 decimal places: round(4.0005, 3)<|endoftext|>"
1714,"<|endoftext|>round number 8.005 up to 2 decimal places: round(8.005, 2)<|endoftext|>"
1715,"<|endoftext|>round number 7.005 up to 2 decimal places: round(7.005, 2)<|endoftext|>"
1716,"<|endoftext|>round number 6.005 up to 2 decimal places: round(6.005, 2)<|endoftext|>"
1717,"<|endoftext|>round number 1.005 up to 2 decimal places: round(1.005, 2)<|endoftext|>"
1718,<|endoftext|>fill missing value in one column 'Cat1' with the value of another column 'Cat2': df['Cat1'].fillna(df['Cat2'])<|endoftext|>
1719,"<|endoftext|>convert the argument `date` with string formatting in logging: logging.info('date=%s', date)<|endoftext|>"
1720,<|endoftext|>Log message of level 'info' with value of `date` in the message: logging.info('date={}'.format(date))<|endoftext|>
1721,"<|endoftext|>convert values in dictionary `d` into integers: {k: int(v) for k, v in d.items()}<|endoftext|>"
1722,"<|endoftext|>sum elements at the same index of each list in list `lists`: map(sum, zip(*lists))<|endoftext|>"
1723,<|endoftext|>Convert a string `s` containing hex bytes to a hex string: s.decode('hex')<|endoftext|>
1724,<|endoftext|>convert a string `s` containing hex bytes to a hex string: binascii.a2b_hex(s)<|endoftext|>
1725,<|endoftext|>send data 'HTTP/1.0 200 OK\r\n\r\n' to socket `connection`: connection.send('HTTP/1.0 200 established\r\n\r\n')<|endoftext|>
1726,<|endoftext|>send data 'HTTP/1.0 200 OK\r\n\r\n' to socket `connection`: connection.send('HTTP/1.0 200 OK\r\n\r\n')<|endoftext|>
1727,<|endoftext|>set the value of cell `['x']['C']` equal to 10 in dataframe `df`: df['x']['C'] = 10<|endoftext|>
1728,<|endoftext|>normalize the dataframe `df` along the rows: np.sqrt(np.square(df).sum(axis=1))<|endoftext|>
1729,<|endoftext|>remove identical items from list `my_list` and sort it alphabetically: sorted(set(my_list))<|endoftext|>
1730,"<|endoftext|>find the index of the element with the maximum value from a list 'a'.: max(enumerate(a), key=lambda x: x[1])[0]<|endoftext|>"
1731,<|endoftext|>create a list where each element is a value of the key 'Name' for each dictionary `d` in the list `thisismylist`: [d['Name'] for d in thisismylist]<|endoftext|>
1732,"<|endoftext|>create a list of tuples with the values of keys 'Name' and 'Age' from each dictionary `d` in the list `thisismylist`: [(d['Name'], d['Age']) for d in thisismylist]<|endoftext|>"
1733,<|endoftext|>grab one random item from a database `model` in django/postgresql: model.objects.all().order_by('?')[0]<|endoftext|>
1734,"<|endoftext|>run python script 'script2.py' from another python script, passing in 1 as an argument: os.system('script2.py 1')<|endoftext|>"
1735,"<|endoftext|>python regex for hyphenated words in `text`: re.findall('\\w+(?:-\\w+)+', text)<|endoftext|>"
1736,"<|endoftext|>create variable key/value pairs with argparse: parser.add_argument('--conf', nargs=2, action='append')<|endoftext|>"
1737,"<|endoftext|>Get `3` unique items from a list: random.sample(list(range(1, 16)), 3)<|endoftext|>"
1738,"<|endoftext|>sort list `strings` in alphabetical order based on the letter after percent character `%` in each element: strings.sort(key=lambda str: re.sub('.*%(.).*', '\\1', str))<|endoftext|>"
1739,"<|endoftext|>sort a list of strings `strings` based on regex match: strings.sort(key=lambda str: re.sub('.*%', '', str))<|endoftext|>"
1740,<|endoftext|>Create list `listy` containing 3 empty lists: listy = [[] for i in range(3)]<|endoftext|>
1741,"<|endoftext|>sort numpy float array `A` column by column: A = np.array(sorted(A, key=tuple))<|endoftext|>"
1742,<|endoftext|>Get a list from two strings `12345` and `ab` with values as each character concatenated: [(x + y) for x in '12345' for y in 'ab']<|endoftext|>
1743,"<|endoftext|>trim string "" Hello "": ' Hello '.strip()<|endoftext|>"
1744,<|endoftext|>trim string `myString `: myString.strip()<|endoftext|>
1745,"<|endoftext|>Trimming a string "" Hello "": ' Hello '.strip()<|endoftext|>"
1746,"<|endoftext|>Trimming a string "" Hello"": ' Hello'.strip()<|endoftext|>"
1747,"<|endoftext|>Trimming a string ""Bob has a cat"": 'Bob has a cat'.strip()<|endoftext|>"
1748,"<|endoftext|>Trimming a string ""          Hello        "": '          Hello        '.strip()<|endoftext|>"
1749,<|endoftext|>Trimming a string `str`: str.strip()<|endoftext|>
1750,"<|endoftext|>Trimming ""\n"" from string `myString`: myString.strip('\n')<|endoftext|>"
1751,"<|endoftext|>left trimming ""\n\r"" from string `myString`: myString.lstrip('\n\r')<|endoftext|>"
1752,"<|endoftext|>right trimming ""\n\t"" from string `myString`: myString.rstrip('\n\t')<|endoftext|>"
1753,"<|endoftext|>Trimming a string ""  Hello\n"" by space: '  Hello\n'.strip(' ')<|endoftext|>"
1754,"<|endoftext|>sort a list of tuples 'unsorted' based on two elements, second and third: sorted(unsorted, key=lambda element: (element[1], element[2]))<|endoftext|>"
1755,<|endoftext|>decode string `content` to UTF-8 code: print(content.decode('utf8'))<|endoftext|>
1756,"<|endoftext|>find the index of the maximum value in the array `arr` where the boolean condition in array `cond` is true: np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)<|endoftext|>"
1757,"<|endoftext|>convert a dataframe `df`'s column `ID` into datetime, after removing the first and last 3 letters: pd.to_datetime(df.ID.str[1:-3])<|endoftext|>"
1758,"<|endoftext|>read CSV file 'my.csv' into a dataframe `df` with datatype of float for column 'my_column' considering character 'n/a' as NaN value: df = pd.read_csv('my.csv', dtype={'my_column': np.float64}, na_values=['n/a'])<|endoftext|>"
1759,"<|endoftext|>convert nan values to ‘n/a’ while reading rows from a csv `read_csv` with pandas: df = pd.read_csv('my.csv', na_values=['n/a'])<|endoftext|>"
1760,<|endoftext|>create a list containing all cartesian products of elements in list `a`: list(itertools.product(*a))<|endoftext|>
1761,"<|endoftext|>remove uppercased characters in string `s`: re.sub('[^A-Z]', '', s)<|endoftext|>"
1762,"<|endoftext|>convert string '2011221' into a DateTime object using format '%Y%W%w': datetime.strptime('2011221', '%Y%W%w')<|endoftext|>"
1763,"<|endoftext|>read file 'myfile' using encoding 'iso-8859-1': codecs.open('myfile', 'r', 'iso-8859-1').read()<|endoftext|>"
1764,<|endoftext|>create a list containing elements from list `list` that are predicate to function `f`: [f(x) for x in list]<|endoftext|>
1765,"<|endoftext|>regex matching 5-digit substrings not enclosed with digits in `s`: re.findall('(?<!\\d)\\d{5}(?!\\d)', s)<|endoftext|>"
1766,<|endoftext|>create a list containing elements of list `a` if the sum of the element is greater than 10: [item for item in a if sum(item) > 10]<|endoftext|>
1767,<|endoftext|>convert currency string `dollars` to decimal `cents_int`: cents_int = int(round(float(dollars.strip('$')) * 100))<|endoftext|>
1768,"<|endoftext|>remove letters from string `example_line` if the letter exist in list `bad_chars`: """""""""""".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]<|endoftext|>"
1769,<|endoftext|>Creating an empty list `l`: l = []<|endoftext|>
1770,<|endoftext|>Creating an empty list `l`: l = list()<|endoftext|>
1771,<|endoftext|>Creating an empty list: list()<|endoftext|>
1772,<|endoftext|>Creating an empty list: []<|endoftext|>
1773,<|endoftext|>properly quit a program: sys.exit(0)<|endoftext|>
1774,<|endoftext|>add string `-` in `4th` position of a string `s`: s[:4] + '-' + s[4:]<|endoftext|>
1775,<|endoftext|>append 3 lists in one list: [[] for i in range(3)]<|endoftext|>
1776,<|endoftext|>Initialize a list of empty lists `a` of size 3: a = [[] for i in range(3)]<|endoftext|>
1777,"<|endoftext|>request URL `url` using http header `{'referer': my_referer}`: requests.get(url, headers={'referer': my_referer})<|endoftext|>"
1778,"<|endoftext|>set the y axis range to `0, 1000` in subplot using pylab: pylab.ylim([0, 1000])<|endoftext|>"
1779,<|endoftext|>convert a column of list in series `s` to dummies: pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)<|endoftext|>
1781,"<|endoftext|>convert a hex string `x` to string: y = str(int(x, 16))<|endoftext|>"
1782,<|endoftext|>check if string `a` is an integer: a.isdigit()<|endoftext|>
1783,<|endoftext|>function to check if a string is a number: isdigit()<|endoftext|>
1784,<|endoftext|>check if string `b` is a number: b.isdigit()<|endoftext|>
1785,"<|endoftext|>pandas read comma-separated CSV file `s` and skip commented lines starting with '#': pd.read_csv(StringIO(s), sep=',', comment='#')<|endoftext|>"
1786,"<|endoftext|>pandas: change all the values of a column 'Date' into ""int(str(x)[-4:])"": df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))<|endoftext|>"
1787,<|endoftext|>sum a list of numbers `list_of_nums`: sum(list_of_nums)<|endoftext|>
1788,"<|endoftext|>Get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function: max(lst, key=lambda x: x['score'])<|endoftext|>"
1789,<|endoftext|>BeautifulSoup find all tags with attribute 'name' equal to 'description': soup.findAll(attrs={'name': 'description'})<|endoftext|>
1790,"<|endoftext|>remove all spaces from a string converted from dictionary `{'a': 1, 'b': 'as df'}`: str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')<|endoftext|>"
1791,"<|endoftext|>convert dictionary `dict` into a string formatted object: '{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'<|endoftext|>"
1792,"<|endoftext|>concatenate items from list `parts` into a string starting from the second element: """""""""""".join(parts[1:])<|endoftext|>"
1793,"<|endoftext|>insert a character ',' into a string in front of '+' character in second part of the string: """""",+"""""".join(c.rsplit('+', 1))<|endoftext|>"
1794,"<|endoftext|>delete all rows in a numpy array `a` where any value in a row is zero `0`: a[np.all(a != 0, axis=1)]<|endoftext|>"
1795,"<|endoftext|>extract only alphabetic characters from a string `your string`: """""" """""".join(re.split('[^a-zA-Z]*', 'your string'))<|endoftext|>"
1796,"<|endoftext|>Extract only characters from a string as a list: re.split('[^a-zA-Z]*', 'your string')<|endoftext|>"
1797,<|endoftext|>get the union set from list of lists `results_list`: results_union = set().union(*results_list)<|endoftext|>
1798,<|endoftext|>get the union of values in list of lists `result_list`: return list(set(itertools.chain(*result_list)))<|endoftext|>
1799,"<|endoftext|>check if a numpy array `a1` contains any element of another array `a2`: np.any(np.in1d(a1, a2))<|endoftext|>"
1800,<|endoftext|>removing control characters from a string `s`: return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')<|endoftext|>
1801,"<|endoftext|>Compare if each value in list `a` is less than respective index value in list `b`: all(i < j for i, j in zip(a, b))<|endoftext|>"
1802,<|endoftext|>python selenium click on button '.button.c_button.s_button': driver.find_element_by_css_selector('.button.c_button.s_button').click()<|endoftext|>
1804,<|endoftext|>kill a process `make.exe` from python script on windows: os.system('taskkill /im make.exe')<|endoftext|>
1805,"<|endoftext|>SQLAlchemy select records of columns of table `my_table` in addition to current date column: print(select([my_table, func.current_date()]).execute())<|endoftext|>"
1806,"<|endoftext|>remove duplicate characters from string 'ffffffbbbbbbbqqq': re.sub('([a-z])\\1+', '\\1', 'ffffffbbbbbbbqqq')<|endoftext|>"
1807,"<|endoftext|>remove periods inbetween capital letters that aren't immediately preceeded by word character(s) in a string `s` using regular expressions: re.sub('(?<!\\w)([A-Z])\\.', '\\1', s)<|endoftext|>"
1808,"<|endoftext|>Get a list of strings `split_text` with fixed chunk size `n` from a string `the_list`: split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]<|endoftext|>"
1809,"<|endoftext|>match string 'this is my string' with regex '\\b(this|string)\\b'
then replace it with regex '<markup>\\1</markup>': re.sub('\\b(this|string)\\b', '<markup>\\1</markup>', 'this is my string')<|endoftext|>"
1810,"<|endoftext|>output data of the first 7 columns of Pandas dataframe: pandas.set_option('display.max_columns', 7)<|endoftext|>"
1811,"<|endoftext|>Display maximum output data of columns in dataframe `pandas` that will fit into the screen: pandas.set_option('display.max_columns', None)<|endoftext|>"
1812,"<|endoftext|>set the value in column 'B' to NaN if the corresponding value in column 'A' is equal to 0 in pandas dataframe `df`: df.ix[df.A == 0, 'B'] = np.nan<|endoftext|>"
1813,"<|endoftext|>Selecting Element ""//li/label/input"" followed by text ""polishpottery"" with Selenium WebDriver `driver`: driver.find_element_by_xpath(""//li/label/input[contains(..,'polishpottery')]"")<|endoftext|>"
1814,"<|endoftext|>Sort a list of dictionaries `mylist` by keys ""weight"" and ""factor"": mylist.sort(key=operator.itemgetter('weight', 'factor'))<|endoftext|>"
1815,"<|endoftext|>ordering a list of dictionaries `mylist` by elements 'weight' and 'factor': mylist.sort(key=lambda d: (d['weight'], d['factor']))<|endoftext|>"
1816,<|endoftext|>Convert a list of lists `lol` to a dictionary with key as second value of a list and value as list itself: {x[1]: x for x in lol}<|endoftext|>
1817,"<|endoftext|>sort keys of dictionary 'd' based on their values: sorted(d, key=lambda k: d[k][1])<|endoftext|>"
1818,"<|endoftext|>round 123 to 100: int(round(123, -2))<|endoftext|>"
1819,"<|endoftext|>create file 'x' if file 'x' does not exist: fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)<|endoftext|>"
1820,<|endoftext|>get a list of last trailing words from another list  of strings`Original_List`: new_list = [x.split()[-1] for x in Original_List]<|endoftext|>
1821,<|endoftext|>Reverse a string 'hello world': 'hello world'[::(-1)]<|endoftext|>
1822,<|endoftext|>Reverse list `s`: s[::(-1)]<|endoftext|>
1823,<|endoftext|>Reverse string 'foo': ''.join(reversed('foo'))<|endoftext|>
1824,<|endoftext|>Reverse a string `string`: ''.join(reversed(string))<|endoftext|>
1825,"<|endoftext|>Reverse a string ""foo"": 'foo'[::(-1)]<|endoftext|>"
1826,<|endoftext|>Reverse a string `a_string`: a_string[::(-1)]<|endoftext|>
1827,"<|endoftext|>Reverse a string `a_string`: def reversed_string(a_string):
    return a_string[::(-1)]<|endoftext|>"
1828,<|endoftext|>Reverse a string `s`: ''.join(reversed(s))<|endoftext|>
1829,"<|endoftext|>generate a string of numbers separated by comma which is divisible by `4` with remainder `1` or `2`.: """""","""""".join(str(i) for i in range(100) if i % 4 in (1, 2))<|endoftext|>"
1830,"<|endoftext|>convert list `lst` of key, value pairs into a dictionary: dict([(e[0], int(e[1])) for e in lst])<|endoftext|>"
1831,"<|endoftext|>sorting a list of tuples `list_of_tuples` where each tuple is reversed: sorted(list_of_tuples, key=lambda tup: tup[::-1])<|endoftext|>"
1832,"<|endoftext|>sorting a list of tuples `list_of_tuples` by second key: sorted(list_of_tuples, key=lambda tup: tup[1])<|endoftext|>"
1833,"<|endoftext|>Concatenating two one-dimensional NumPy arrays 'a' and 'b'.: numpy.concatenate([a, b])<|endoftext|>"
1834,"<|endoftext|>writing items in list `thelist` to file `thefile`: for item in thelist:
    thefile.write(('%s\n' % item))<|endoftext|>"
1835,"<|endoftext|>writing items in list `thelist` to file `thefile`: for item in thelist:
    pass<|endoftext|>"
1836,"<|endoftext|>serialize `itemlist` to file `outfile`: pickle.dump(itemlist, outfile)<|endoftext|>"
1837,<|endoftext|>writing items in list `itemlist` to file `outfile`: outfile.write('\n'.join(itemlist))<|endoftext|>
1838,<|endoftext|>Update a user's name as `Bob Marley` having id `123` in SQLAlchemy: session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})<|endoftext|>
1839,"<|endoftext|>send cookies `cookie` in a post request to url 'http://wikipedia.org' with the python requests library: r = requests.post('http://wikipedia.org', cookies=cookie)<|endoftext|>"
1840,"<|endoftext|>insert directory 'libs' at the 0th index of current directory: sys.path.insert(0, 'libs')<|endoftext|>"
1841,<|endoftext|>get current date and time: datetime.datetime.now()<|endoftext|>
1842,<|endoftext|>get current time: datetime.datetime.now().time()<|endoftext|>
1843,"<|endoftext|>get current time in pretty format: strftime('%Y-%m-%d %H:%M:%S', gmtime())<|endoftext|>"
1844,<|endoftext|>get current time in string format: str(datetime.now())<|endoftext|>
1845,<|endoftext|>get current time: datetime.datetime.time(datetime.datetime.now())<|endoftext|>
1846,<|endoftext|>convert hex '\xff' to integer: ord('\xff')<|endoftext|>
1847,"<|endoftext|>identify duplicated rows in columns 'PplNum' and 'RoomNum' with additional column in dataframe `df`: df.groupby(['PplNum', 'RoomNum']).cumcount() + 1<|endoftext|>"
1848,<|endoftext|>get current utc time: datetime.utcnow()<|endoftext|>
1849,<|endoftext|>move last item of array `a` to the first position: a[-1:] + a[:-1]<|endoftext|>
1850,"<|endoftext|>Convert dataframe `df` to a pivot table using column 'year', 'month', and 'item' as indexes: df.set_index(['year', 'month', 'item']).unstack(level=-1)<|endoftext|>"
1851,"<|endoftext|>run a pivot with a multi-index `year` and `month` in a pandas data frame: df.pivot_table(values='value', index=['year', 'month'], columns='item')<|endoftext|>"
1852,<|endoftext|>print a rational number `3/2`: print('\n\x1b[4m' + '3' + '\x1b[0m' + '\n2')<|endoftext|>
1854,"<|endoftext|>iterate backwards from 10 to 0: range(10, 0, -1)<|endoftext|>"
1855,<|endoftext|>get value of first child of xml node `name`: name[0].firstChild.nodeValue<|endoftext|>
1856,"<|endoftext|>start a new thread for `myfunction` with parameters 'MyStringHere' and 1: thread.start_new_thread(myfunction, ('MyStringHere', 1))<|endoftext|>"
1857,"<|endoftext|>start a new thread for `myfunction` with parameters 'MyStringHere' and 1: thread.start_new_thread(myfunction, ('MyStringHere', 1))<|endoftext|>"
1858,<|endoftext|>get index of the first biggest element in list `a`: a.index(max(a))<|endoftext|>
1859,"<|endoftext|>replace periods `.` that are not followed by periods or spaces with a period and a space `. `: re.sub('\\.(?=[^ .])', '. ', para)<|endoftext|>"
1860,"<|endoftext|>convert a string `a` of letters embedded in squared brackets into embedded lists: [i.split() for i in re.findall('\\[([^\\[\\]]+)\\]', a)]<|endoftext|>"
1861,<|endoftext|>extract dictionary `d` from list `a` where the value associated with the key 'name' of dictionary `d` is equal to 'pluto': [d for d in a if d['name'] == 'pluto']<|endoftext|>
1862,<|endoftext|>extract dictionary from list of dictionaries based on a key's value.: [d for d in a if d['name'] == 'pluto']<|endoftext|>
1863,<|endoftext|>Retrieve list of values from dictionary 'd': list(d.values())<|endoftext|>
1864,"<|endoftext|>replace occurrences of two whitespaces or more with one whitespace ' ' in string `s`: re.sub(' +', ' ', s)<|endoftext|>"
1865,"<|endoftext|>Change the mode of file 'my_script.sh' to permission number 484: os.chmod('my_script.sh', 484)<|endoftext|>"
1866,"<|endoftext|>write pandas dataframe `df` to the file 'c:\\data\\t.csv' without row names: df.to_csv('c:\\data\\t.csv', index=False)<|endoftext|>"
1867,"<|endoftext|>remove all words which contains number from a string `words` using regex: re.sub('\\w*\\d\\w*', '', words).strip()<|endoftext|>"
1868,"<|endoftext|>control the keyboard and mouse with dogtail in linux: dogtail.rawinput.click(100, 100)<|endoftext|>"
1869,"<|endoftext|>parse date string '2009/05/13 19:19:30 -0400' using format '%Y/%m/%d %H:%M:%S %z': datetime.strptime('2009/05/13 19:19:30 -0400', '%Y/%m/%d %H:%M:%S %z')<|endoftext|>"
1870,"<|endoftext|>Get the position of a regex match for word `is` in a string `String`: re.search('\\bis\\b', String).start()<|endoftext|>"
1871,"<|endoftext|>Get the position of a regex match `is` in a string `String`: re.search('is', String).start()<|endoftext|>"
1872,"<|endoftext|>input an integer tuple from user: tuple(map(int, input().split(',')))<|endoftext|>"
1873,"<|endoftext|>input a tuple of integers from user: tuple(int(x.strip()) for x in input().split(','))<|endoftext|>"
1874,"<|endoftext|>replace unicode character '\u2022' in string 'str' with '*': str.decode('utf-8').replace('\u2022', '*').encode('utf-8')<|endoftext|>"
1875,"<|endoftext|>replace unicode characters ''\u2022' in string 'str' with '*': str.decode('utf-8').replace('\u2022', '*')<|endoftext|>"
1876,"<|endoftext|>convert ndarray with shape 3x3 to array: np.zeros((3, 3)).ravel()<|endoftext|>"
1877,"<|endoftext|>get os name: import platform
platform.system()<|endoftext|>"
1878,"<|endoftext|>get os version: import platform
platform.release()<|endoftext|>"
1879,<|endoftext|>get the name of the OS: print(os.name)<|endoftext|>
1881,"<|endoftext|>replace fields delimited by braces {} in string ""Day old bread, 50% sale {0}"" with string 'today': """"""Day old bread, 50% sale {0}"""""".format('today')<|endoftext|>"
1882,"<|endoftext|>Get a minimum value from a list of tuples `list` with values of type `string` and `float` with nan: min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])<|endoftext|>"
1883,<|endoftext|>Find average of a nested list `a`: a = [(sum(x) / len(x)) for x in zip(*a)]<|endoftext|>
1884,"<|endoftext|>Log info message 'Log message' with attributes `{'app_name': 'myapp'}`: logging.info('Log message', extra={'app_name': 'myapp'})<|endoftext|>"
1885,"<|endoftext|>replace values of dataframe `df` with True if numeric: df.applymap(lambda x: isinstance(x, (int, float)))<|endoftext|>"
1886,"<|endoftext|>sort list `l` based on its elements' digits: sorted(l, key=lambda x: int(re.search('\\d+', x).group(0)))<|endoftext|>"
1887,<|endoftext|>close the window in tkinter: self.root.destroy()<|endoftext|>
1888,"<|endoftext|>get mean of columns `2, 5, 6, 7, 8` for all rows in dataframe `df`: df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)<|endoftext|>"
1889,<|endoftext|>filter dataframe `df` by sub-level index '0630' in pandas: df[df.index.map(lambda x: x[1].endswith('0630'))]<|endoftext|>
1890,<|endoftext|>flask-sqlalchemy delete row `page`: db.session.delete(page)<|endoftext|>
1891,"<|endoftext|>Format a string `u'Andr\xc3\xa9'` that has unicode characters: """""""""""".join(chr(ord(c)) for c in 'Andr\xc3\xa9')<|endoftext|>"
1892,"<|endoftext|>convert a unicode 'Andr\xc3\xa9' to a string: """""""""""".join(chr(ord(c)) for c in 'Andr\xc3\xa9').decode('utf8')<|endoftext|>"
1893,"<|endoftext|>list all files in directory ""."": for (dirname, dirnames, filenames) in os.walk('.'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass<|endoftext|>"
1894,<|endoftext|>list all files in directory `path`: os.listdir(path)<|endoftext|>
1895,"<|endoftext|>rename file `dir` to `dir` + '!': os.rename(dir, dir + '!')<|endoftext|>"
1896,"<|endoftext|>Insert a character `-` after every two elements in a string `s`: """"""-"""""".join(a + b for a, b in zip(s[::2], s[1::2]))<|endoftext|>"
1897,<|endoftext|>printing numbers rounding up to third decimal place: print('%.3f' % 3.1415)<|endoftext|>
1898,<|endoftext|>add variable `var` to key 'f' of first element in JSON data `data`: data[0]['f'] = var<|endoftext|>
1899,<|endoftext|>get the path of module `a_module`: print(a_module.__file__)<|endoftext|>
1900,<|endoftext|>get the path of the current python module: print(os.getcwd())<|endoftext|>
1901,<|endoftext|>get the path of the python module `amodule`: path = os.path.abspath(amodule.__file__)<|endoftext|>
1902,<|endoftext|>fill list `myList` with 4 0's: self.myList.extend([0] * (4 - len(self.myList)))<|endoftext|>
1903,<|endoftext|>drop duplicate indexes in a pandas data frame `df`: df[~df.index.duplicated()]<|endoftext|>
1904,<|endoftext|>unpack elements of list `i` as arguments into function `foo`: foo(*i)<|endoftext|>
1905,<|endoftext|>generate list of numbers in specific format using string formatting precision.: [('%.2d' % i) for i in range(16)]<|endoftext|>
1906,"<|endoftext|>sort dictionary `mydict` in descending order based on the sum of each value in it: sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]<|endoftext|>"
1907,"<|endoftext|>get top `3` items from a dictionary `mydict` with largest sum of values: heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))<|endoftext|>"
1908,"<|endoftext|>get index of character 'b' in list '['a', 'b']': ['a', 'b'].index('b')<|endoftext|>"
1909,"<|endoftext|>set font size of axis legend of plot `plt` to 'xx-small': plt.setp(legend.get_title(), fontsize='xx-small')<|endoftext|>"
1911,<|endoftext|>extract the 2nd elements from a list of tuples: [x[1] for x in elements]<|endoftext|>
1912,<|endoftext|>get the opposite diagonal of a numpy array `array`: np.diag(np.rot90(array))<|endoftext|>
1913,<|endoftext|>flatten list of tuples `a`: list(chain.from_iterable(a))<|endoftext|>
1914,"<|endoftext|>substitute two or more whitespace characters with character '|' in string `line`: re.sub('\\s{2,}', '|', line.strip())<|endoftext|>"
1915,<|endoftext|>print float `a` with two decimal points: print(('%.2f' % a))<|endoftext|>
1916,<|endoftext|>print float `a` with two decimal points: print(('{0:.2f}'.format(a)))<|endoftext|>
1917,"<|endoftext|>print float `a` with two decimal points: print(('{0:.2f}'.format(round(a, 2))))<|endoftext|>"
1918,"<|endoftext|>print float `a` with two decimal points: print(('%.2f' % round(a, 2)))<|endoftext|>"
1919,<|endoftext|>limit float 13.9499999 to two decimal points: ('%.2f' % 13.9499999)<|endoftext|>
1920,<|endoftext|>limit float 3.14159 to two decimal points: ('%.2f' % 3.14159)<|endoftext|>
1921,<|endoftext|>limit float 13.949999999999999 to two decimal points: float('{0:.2f}'.format(13.95))<|endoftext|>
1922,<|endoftext|>limit float 13.949999999999999 to two decimal points: '{0:.2f}'.format(13.95)<|endoftext|>
1923,"<|endoftext|>load a tsv file `c:/~/trainSetRel3.txt` into a pandas data frame: DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\t')<|endoftext|>"
1924,<|endoftext|>set UTC offset by 9 hrs ahead for date '2013/09/11 00:17': dateutil.parser.parse('2013/09/11 00:17 +0900')<|endoftext|>
1925,"<|endoftext|>pass a list of parameters `((1, 2, 3),) to sql queue 'SELECT * FROM table WHERE column IN %s;': cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))<|endoftext|>"
1926,"<|endoftext|>sum all elements of two-dimensions list `[[1, 2, 3, 4], [2, 4, 5, 6]]]`: sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])<|endoftext|>"
1927,<|endoftext|>Retrieve an arbitrary value from dictionary `dict`: next(iter(dict.values()))<|endoftext|>
1928,<|endoftext|>access an arbitrary value from dictionary `dict`: next(iter(list(dict.values())))<|endoftext|>
1929,"<|endoftext|>group dataframe `df` by columns 'Month' and 'Fruit': df.groupby(['Month', 'Fruit']).sum().unstack(level=0)<|endoftext|>"
1930,"<|endoftext|>sort list `mylist` of tuples by arbitrary key from list `order`: sorted(mylist, key=lambda x: order.index(x[1]))<|endoftext|>"
1931,"<|endoftext|>sort a list of dictionary `persons` according to the key `['passport']['birth_info']['date']`: sorted(persons, key=lambda x: x['passport']['birth_info']['date'])<|endoftext|>"
1932,<|endoftext|>remove the fragment identifier `#something` from a url `http://www.address.com/something#something`: urlparse.urldefrag('http://www.address.com/something#something')<|endoftext|>
1933,"<|endoftext|>download to a directory '/path/to/dir/filename.ext' from source 'http://example.com/file.ext': urllib.request.urlretrieve('http://example.com/file.ext', '/path/to/dir/filename.ext')<|endoftext|>"
1934,<|endoftext|>remove all duplicates from a list of sets `L`: list(set(frozenset(item) for item in L))<|endoftext|>
1935,<|endoftext|>remove duplicates from a list of sets 'L': [set(item) for item in set(frozenset(item) for item in L)]<|endoftext|>
1936,<|endoftext|>terminate process `p`: p.terminate()<|endoftext|>
1937,<|endoftext|>delete all values in a list `mylist`: del mylist[:]<|endoftext|>
1938,"<|endoftext|>throw an error window in python in windows: ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)<|endoftext|>"
1939,<|endoftext|>remove empty strings from list `str_list`: str_list = list([_f for _f in str_list if _f])<|endoftext|>
1940,"<|endoftext|>remove newlines and whitespace from string `yourstring`: re.sub('[\\ \\n]{2,}', '', yourstring)<|endoftext|>"
1941,"<|endoftext|>remove the last dot and all text beyond it in string `s`: re.sub('\\.[^.]+$', '', s)<|endoftext|>"
1942,"<|endoftext|>remove elements from an array `A` that are in array `B`: A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]<|endoftext|>"
1943,"<|endoftext|>Write column 'sum' of DataFrame `a` to csv file 'test.csv': a.to_csv('test.csv', cols=['sum'])<|endoftext|>"
1944,"<|endoftext|>call a Python script ""test2.py"": exec(compile(open('test2.py').read(), 'test2.py', 'exec'))<|endoftext|>"
1945,"<|endoftext|>call a Python script ""test1.py"": subprocess.call('test1.py', shell=True)<|endoftext|>"
1946,"<|endoftext|>sort a zipped list `zipped` using lambda function: sorted(zipped, key=lambda x: x[1])<|endoftext|>"
1948,"<|endoftext|>sort a dictionary `y` by value then by key: sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)<|endoftext|>"
1949,"<|endoftext|>using beautifulsoup to select div blocks within html `soup`: soup.find_all('div', class_='crBlock ')<|endoftext|>"
1950,"<|endoftext|>remove elements from list `centroids` the indexes of which are in array `index`: [element for i, element in enumerate(centroids) if i not in index]<|endoftext|>"
1951,<|endoftext|>list duplicated elements in two lists `listA` and `listB`: list(set(listA) & set(listB))<|endoftext|>
1952,"<|endoftext|>download ""http://randomsite.com/file.gz"" from http and save as ""file.gz"": testfile = urllib.request.URLopener()
testfile.retrieve('http://randomsite.com/file.gz', 'file.gz')<|endoftext|>"
1953,"<|endoftext|>download file from http url ""http://randomsite.com/file.gz"" and save as ""file.gz"": urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')<|endoftext|>"
1954,<|endoftext|>download file from http url `file_url`: file_name = wget.download(file_url)<|endoftext|>
1955,"<|endoftext|>set an array of unicode characters `[u'\xe9', u'\xe3', u'\xe2']` as labels in Matplotlib `ax`: ax.set_yticklabels(['\xe9', '\xe3', '\xe2'])<|endoftext|>"
1956,"<|endoftext|>get a list of all integer points in a `dim` dimensional hypercube with coordinates from `-x` to `y` for all dimensions: list(itertools.product(list(range(-x, y)), repeat=dim))<|endoftext|>"
1957,<|endoftext|>convert unicode string `s` into string literals: print(s.encode('unicode_escape'))<|endoftext|>
1958,"<|endoftext|>how to format a list of arguments `my_args` into a string: 'Hello %s' % ', '.join(my_args)<|endoftext|>"
1959,"<|endoftext|>search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(ddd)': re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)<|endoftext|>"
1960,"<|endoftext|>regex search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(d(d)d)': re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)<|endoftext|>"
1961,<|endoftext|>convert a list of dictionaries `d` to pandas data frame: pd.DataFrame(d)<|endoftext|>
1962,"<|endoftext|>split string ""This is a string"" into words that do not contain whitespaces: """"""This is a string"""""".split()<|endoftext|>"
1963,"<|endoftext|>split string ""This     is a     string"" into words that does not contain whitespaces: """"""This     is a     string"""""".split()<|endoftext|>"
1965,<|endoftext|>remove all duplicate items from a list `lseperatedOrblist`: woduplicates = list(set(lseperatedOrblist))<|endoftext|>
1966,"<|endoftext|>sum of product of combinations in a list `l`: sum([(i * j) for i, j in list(itertools.combinations(l, 2))])<|endoftext|>"
1967,<|endoftext|>regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits.: re.compile('{}-\\d*'.format(user))<|endoftext|>
1968,<|endoftext|>convert all of the items in a list `lst` to float: [float(i) for i in lst]<|endoftext|>
1969,"<|endoftext|>multiply all items in a list `[1, 2, 3, 4, 5, 6]` together: from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])<|endoftext|>"
1970,<|endoftext|>write a tuple of tuples `A` to a csv file using python: writer.writerow(A)<|endoftext|>
1971,<|endoftext|>Write all tuple of tuples `A` at once into csv file: writer.writerows(A)<|endoftext|>
1972,"<|endoftext|>python, format string ""{} %s {}"" to have 'foo' and 'bar' in the first and second positions: """"""{} %s {}"""""".format('foo', 'bar')<|endoftext|>"
1973,"<|endoftext|>Truncate `\r\n` from each string in a list of string `example`: example = [x.replace('\r\n', '') for x in example]<|endoftext|>"
1974,<|endoftext|>split elements of a list `l` by '\t': [i.partition('\t')[-1] for i in l if '\t' in i]<|endoftext|>
1975,"<|endoftext|>search for regex pattern 'Test(.*)print' in string `testStr` including new line character '\n': re.search('Test(.*)print', testStr, re.DOTALL)<|endoftext|>"
1976,<|endoftext|>find button that is in li class `next` and assign it to variable `next`: next = driver.find_element_by_css_selector('li.next>a')<|endoftext|>
1977,<|endoftext|>get the  size of file 'C:\\Python27\\Lib\\genericpath.py': os.stat('C:\\Python27\\Lib\\genericpath.py').st_size<|endoftext|>
1978,"<|endoftext|>return a string from a regex match with pattern '<img.*?>' in string 'line': imtag = re.match('<img.*?>', line).group(0)<|endoftext|>"
1979,"<|endoftext|>Rename a folder `Joe Blow` to `Blow, Joe`: os.rename('Joe Blow', 'Blow, Joe')<|endoftext|>"
1980,"<|endoftext|>find overlapping matches from a string `hello` using regex: re.findall('(?=(\\w\\w))', 'hello')<|endoftext|>"
1981,<|endoftext|>convert 173 to binary string: bin(173)<|endoftext|>
1982,"<|endoftext|>convert binary string '01010101111' to integer: int('01010101111', 2)<|endoftext|>"
1983,"<|endoftext|>convert binary string '010101' to integer: int('010101', 2)<|endoftext|>"
1984,"<|endoftext|>convert binary string '0b0010101010' to integer: int('0b0010101010', 2)<|endoftext|>"
1985,<|endoftext|>convert 21 to binary string: bin(21)<|endoftext|>
1986,"<|endoftext|>convert binary string '11111111' to integer: int('11111111', 2)<|endoftext|>"
1987,"<|endoftext|>delete all digits in string `s` that are not directly attached to a word character: re.sub('$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$', '', s)<|endoftext|>"
1988,"<|endoftext|>delete digits at the end of string `s`: re.sub('\\b\\d+\\b', '', s)<|endoftext|>"
1989,"<|endoftext|>Delete self-contained digits from string `s`: s = re.sub('^\\d+\\s|\\s\\d+\\s|\\s\\d+$', ' ', s)<|endoftext|>"
1990,"<|endoftext|>truncate string `s` up to character ':': s.split(':', 1)[1]<|endoftext|>"
1991,"<|endoftext|>print a string `s` by splitting with comma `,`: print(s.split(','))<|endoftext|>"
1992,"<|endoftext|>Create list  by splitting string `mystring` using "","" as delimiter: mystring.split(',')<|endoftext|>"
1993,"<|endoftext|>remove parentheses only around single words in a string `s` using regex: re.sub('\\((\\w+)\\)', '\\1', s)<|endoftext|>"
1994,<|endoftext|>webbrowser open url `url`: webbrowser.open_new(url)<|endoftext|>
1995,<|endoftext|>webbrowser open url 'http://example.com': webbrowser.open('http://example.com')<|endoftext|>
1996,<|endoftext|>change the background colour of the button `pushbutton` to red: self.pushButton.setStyleSheet('background-color: red')<|endoftext|>
1997,"<|endoftext|>apply a list of functions named 'functions' over a list of values named 'values': [x(y) for x, y in zip(functions, values)]<|endoftext|>"
1998,"<|endoftext|>modify the width of a text control as `300` keeping default height in wxpython: wx.TextCtrl(self, -1, size=(300, -1))<|endoftext|>"
1999,"<|endoftext|>display a grayscale image from array of pixels `imageArray`: imshow(imageArray, cmap='Greys_r')<|endoftext|>"
2000,<|endoftext|>replace all the nan values with 0 in a pandas dataframe `df`: df.fillna(0)<|endoftext|>
2001,<|endoftext|>export a table dataframe `df` in pyspark to csv 'mycsv.csv': df.toPandas().to_csv('mycsv.csv')<|endoftext|>
2002,<|endoftext|>Write DataFrame `df` to csv file 'mycsv.csv': df.write.csv('mycsv.csv')<|endoftext|>
2003,<|endoftext|>get the sum of each second value from a list of tuple `structure`: sum(x[1] for x in structure)<|endoftext|>
2004,<|endoftext|>sum the 3 largest integers in groupby by 'STNAME' and 'COUNTY_POP': df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())<|endoftext|>
2005,"<|endoftext|>Parse string '21/11/06 16:30' according to format '%d/%m/%y %H:%M': datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')<|endoftext|>"
2006,<|endoftext|>get current script directory: os.path.dirname(os.path.abspath(__file__))<|endoftext|>
2007,"<|endoftext|>double each character in string `text.read()`: re.sub('(.)', '\\1\\1', text.read(), 0, re.S)<|endoftext|>"
2008,"<|endoftext|>concatenate strings in tuple `('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e')` into a single string: """""""""""".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))<|endoftext|>"
2009,<|endoftext|>get full path of current directory: os.path.dirname(os.path.abspath(__file__))<|endoftext|>
2010,"<|endoftext|>variable number of digits `digits` in variable `value` in format string ""{0:.{1}%}"": """"""{0:.{1}%}"""""".format(value, digits)<|endoftext|>"
2011,<|endoftext|>get current requested url: self.request.url<|endoftext|>
2012,<|endoftext|>get a random item from list `choices`: random_choice = random.choice(choices)<|endoftext|>
2013,<|endoftext|>sum the length of all strings in a list `strings`: length = sum(len(s) for s in strings)<|endoftext|>
2014,"<|endoftext|>sort a list `s` by first and second attributes: s = sorted(s, key=lambda x: (x[1], x[2]))<|endoftext|>"
2015,"<|endoftext|>sort a list of lists `s` by second and third element in each list.: s.sort(key=operator.itemgetter(1, 2))<|endoftext|>"
2016,<|endoftext|>Mysql commit current transaction: con.commit()<|endoftext|>
2017,<|endoftext|>filtering out strings that contain 'ab' from a list of strings `lst`: [k for k in lst if 'ab' in k]<|endoftext|>
2018,<|endoftext|>find the first letter of each element in string `input`: output = ''.join(item[0].upper() for item in input.split())<|endoftext|>
2019,<|endoftext|>get name of primary field `name` of django model `CustomPK`: CustomPK._meta.pk.name<|endoftext|>
2020,<|endoftext|>count the number of words in a string `s`: len(s.split())<|endoftext|>
2021,"<|endoftext|>multiply array `a` and array `b`respective elements then sum each row of the new array: np.einsum('ji,i->j', a, b)<|endoftext|>"
2022,<|endoftext|>check python version: sys.version<|endoftext|>
2023,<|endoftext|>check python version: sys.version_info<|endoftext|>
2024,<|endoftext|>format number 1000000000.0 using latex notation: print('\\num{{{0:.2g}}}'.format(1000000000.0))<|endoftext|>
2025,<|endoftext|>Initialize a list of empty lists `x` of size 3: x = [[] for i in range(3)]<|endoftext|>
2026,<|endoftext|>apply jinja2 filters `forceescape` and `linebreaks` on variable `my_variable`: {{my_variable | forceescape | linebreaks}}<|endoftext|>
2027,"<|endoftext|>zip a list of tuples `[(1, 4), (2, 5), (3, 6)]` into a list of tuples according to original tuple index: zip(*[(1, 4), (2, 5), (3, 6)])<|endoftext|>"
2028,"<|endoftext|>split a list of tuples `data` into sub-lists of the same tuple field using itertools: [list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]<|endoftext|>"
2029,<|endoftext|>Convert a string into a list: list('hello')<|endoftext|>
2030,<|endoftext|>create new column `A_perc` in dataframe `df` with row values equal to the value in column `A` divided by the value in column `sum`: df['A_perc'] = df['A'] / df['sum']<|endoftext|>
2031,<|endoftext|>getting a list of all subdirectories in the directory `directory`: os.walk(directory)<|endoftext|>
2032,<|endoftext|>get a list of all subdirectories in the directory `directory`: [x[0] for x in os.walk(directory)]<|endoftext|>
2033,"<|endoftext|>update all values associated with key `i` to string 'updated' if value `j` is not equal to 'None' in dictionary `d`: {i: 'updated' for i, j in list(d.items()) if j != 'None'}<|endoftext|>"
2034,"<|endoftext|>Filter a dictionary `d` to remove keys with value None and replace other values with 'updated': dict((k, 'updated') for k, v in d.items() if v is None)<|endoftext|>"
2035,"<|endoftext|>Filter a dictionary `d` to remove keys with value 'None' and replace other values with 'updated': dict((k, 'updated') for k, v in d.items() if v != 'None')<|endoftext|>"
2036,<|endoftext|>count number of rows in a group `key_columns` in pandas groupby object `df`: df.groupby(key_columns).size()<|endoftext|>
2037,<|endoftext|>return list `result` of sum of elements of each list `b` in list of lists `a`: result = [sum(b) for b in a]<|endoftext|>
2038,<|endoftext|>What's the best way to search for a Python dictionary value in a list of dictionaries?: any(d['site'] == 'Superuser' for d in data)<|endoftext|>
2039,<|endoftext|>create a 2D array of `Node` objects with dimensions `cols` columns and `rows` rows: nodes = [[Node() for j in range(cols)] for i in range(rows)]<|endoftext|>
2040,<|endoftext|>replace extension '.txt' in basename '/home/user/somefile.txt' with extension '.jpg': print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')<|endoftext|>
2041,"<|endoftext|>Set the resolution of a monitor as `FULLSCREEN` in pygame: pygame.display.set_mode((0, 0), pygame.FULLSCREEN)<|endoftext|>"
2042,"<|endoftext|>format float `3.5e+20`  to `$3.5 \\times 10^{20}$` and set as title of matplotlib plot `ax`: ax.set_title('$%s \\times 10^{%s}$' % ('3.5', '+20'))<|endoftext|>"
2043,<|endoftext|>Get the age of directory (or file) `/tmp` in seconds.: print(os.path.getmtime('/tmp'))<|endoftext|>
2044,<|endoftext|>how to get month name of datetime `today`: today.strftime('%B')<|endoftext|>
2045,<|endoftext|>get month name from a datetime object `today`: today.strftime('%B')<|endoftext|>
2046,<|endoftext|>Convert nested list `x` into a flat list: [j for i in x for j in i]<|endoftext|>
2047,<|endoftext|>get each value from a list of lists `a` using itertools: print(list(itertools.chain.from_iterable(a)))<|endoftext|>
2048,"<|endoftext|>convert date string 'January 11, 2010'  into day of week: datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')<|endoftext|>"
2050,"<|endoftext|>remove item ""b"" in list `a`: a.remove('b')<|endoftext|>"
2051,<|endoftext|>remove item `c` in list `a`: a.remove(c)<|endoftext|>
2052,<|endoftext|>delete the element 6 from list `a`: a.remove(6)<|endoftext|>
2053,<|endoftext|>delete the element 6 from list `a`: a.remove(6)<|endoftext|>
2054,"<|endoftext|>delete the element `c` from list `a`: if (c in a):
    a.remove(c)<|endoftext|>"
2055,"<|endoftext|>delete the element `c` from list `a`: try:
    a.remove(c)
except ValueError:
    pass<|endoftext|>"
2056,"<|endoftext|>Get all matching patterns 'a.*?a' from a string 'a 1 a 2 a 3 a 4 a'.: re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')<|endoftext|>"
2057,"<|endoftext|>outer product of each column of a 2d `X` array to form a 3d array `X`: np.einsum('ij,kj->jik', X, X)<|endoftext|>"
2058,<|endoftext|>Getting the last element of list `some_list`: some_list[(-1)]<|endoftext|>
2059,<|endoftext|>Getting the second to last element of list `some_list`: some_list[(-2)]<|endoftext|>
2060,<|endoftext|>gets the `n` th-to-last element in list `some_list`: some_list[(- n)]<|endoftext|>
2061,<|endoftext|>get the last element in list `alist`: alist[(-1)]<|endoftext|>
2062,<|endoftext|>get the last element in list `astr`: astr[(-1)]<|endoftext|>
2063,"<|endoftext|>make a list of integers from 0 to `5` where each second element is a duplicate of the previous element: print([u for v in [[i, i] for i in range(5)] for u in v])<|endoftext|>"
2064,"<|endoftext|>create a list of integers with duplicate values `[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]`: [0, 0, 1, 1, 2, 2, 3, 3, 4, 4]<|endoftext|>"
2065,<|endoftext|>create a list of integers from 1 to 5 with each value duplicated: [(i // 2) for i in range(10)]<|endoftext|>
2066,<|endoftext|>remove first and last lines of string `s`: s[s.find('\n') + 1:s.rfind('\n')]<|endoftext|>
2067,<|endoftext|>create dict of squared int values in range of 100: {(x ** 2) for x in range(100)}<|endoftext|>
2068,"<|endoftext|>zip lists `[1, 2], [3, 4], [5, 6]` in a list: zip(*[[1, 2], [3, 4], [5, 6]])<|endoftext|>"
2069,"<|endoftext|>zip lists in a list [[1, 2], [3, 4], [5, 6]]: zip(*[[1, 2], [3, 4], [5, 6]])<|endoftext|>"
2070,"<|endoftext|>request page 'https://www.mysite.com/' with credentials of username 'username' and password 'pwd': requests.get('https://www.mysite.com/', auth=('username', 'pwd'))<|endoftext|>"
2071,<|endoftext|>get a new string from the 3rd character to the end of the string `x`: x[2:]<|endoftext|>
2072,<|endoftext|>get a new string including the first two characters of string `x`: x[:2]<|endoftext|>
2073,<|endoftext|>get a new string including all but the last character of string `x`: x[:(-2)]<|endoftext|>
2074,<|endoftext|>get a new string including the last two characters of string `x`: x[(-2):]<|endoftext|>
2075,<|endoftext|>get a new string with the 3rd to the second-to-last characters of string `x`: x[2:(-2)]<|endoftext|>
2076,<|endoftext|>reverse a string `some_string`: some_string[::(-1)]<|endoftext|>
2077,"<|endoftext|>select alternate characters of ""H-e-l-l-o- -W-o-r-l-d"": 'H-e-l-l-o- -W-o-r-l-d'[::2]<|endoftext|>"
2078,<|endoftext|>select a substring of `s` beginning at `beginning` of length `LENGTH`: s = s[beginning:(beginning + LENGTH)]<|endoftext|>
2079,<|endoftext|>terminate the program: sys.exit()<|endoftext|>
2080,<|endoftext|>terminate the program: quit()<|endoftext|>
2081,"<|endoftext|>Terminating a Python script with error message ""some error message"": sys.exit('some error message')<|endoftext|>"
2082,"<|endoftext|>encode value of key `City` in dictionary `data` as `ascii`, ignoring non-ascii characters: data['City'].encode('ascii', 'ignore')<|endoftext|>"
2083,"<|endoftext|>get current CPU and RAM usage: psutil.cpu_percent()
psutil.virtual_memory()<|endoftext|>"
2084,"<|endoftext|>get current RAM usage of current program: pid = os.getpid()
py = psutil.Process(pid)
memoryUse = (py.memory_info()[0] / (2.0 ** 30))<|endoftext|>"
2085,"<|endoftext|>print cpu and memory usage: print((psutil.cpu_percent()))
print((psutil.virtual_memory()))<|endoftext|>"
2086,"<|endoftext|>read a ragged csv file `D:/Temp/tt.csv` using `names` parameter in pandas: pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))<|endoftext|>"
2087,<|endoftext|>get first non-null value per each row from dataframe `df`: df.stack().groupby(level=0).first()<|endoftext|>
2088,"<|endoftext|>print two numbers `10` and `20` using string formatting: """"""{0} {1}"""""".format(10, 20)<|endoftext|>"
2089,"<|endoftext|>replace placeholders in string '{1} {ham} {0} {foo} {1}' with arguments `(10, 20, foo='bar', ham='spam')`: """"""{1} {ham} {0} {foo} {1}"""""".format(10, 20, foo='bar', ham='spam')<|endoftext|>"
2090,<|endoftext|>create list `changed_list ` containing elements of list `original_list` whilst converting strings containing digits to integers: changed_list = [(int(f) if f.isdigit() else f) for f in original_list]<|endoftext|>
2091,"<|endoftext|>get a dictionary with keys from one list `keys` and values from other list `data`: dict(zip(keys, zip(*data)))<|endoftext|>"
2092,<|endoftext|>convert string `apple` from iso-8859-1/latin1 to utf-8: apple.decode('iso-8859-1').encode('utf8')<|endoftext|>
2093,"<|endoftext|>Exclude column names when writing dataframe `df` to a csv file `filename.csv`: df.to_csv('filename.csv', header=False)<|endoftext|>"
2094,"<|endoftext|>Escape character '}' in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function `format` with arguments `('1', '2', '3')`: print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))<|endoftext|>"
2095,"<|endoftext|>get dictionary with max value of key 'size' in list of dicts `ld`: max(ld, key=lambda d: d['size'])<|endoftext|>"
2096,"<|endoftext|>format parameters 'b' and 'a' into plcaeholders in string ""{0}\\w{{2}}b{1}\\w{{2}}quarter"": """"""{0}\\w{{2}}b{1}\\w{{2}}quarter"""""".format('b', 'a')<|endoftext|>"
2097,"<|endoftext|>django create a foreign key column `user` and link it to table 'User': user = models.ForeignKey('User', unique=True)<|endoftext|>"
2098,<|endoftext|>write a regex pattern to match even number of letter `A`: re.compile('^([^A]*)AA([^A]|AA)*$')<|endoftext|>
2099,"<|endoftext|>join Numpy array `b` with Numpy array 'a' along axis 0: b = np.concatenate((a, a), axis=0)<|endoftext|>"
2100,"<|endoftext|>custom sort an alphanumeric list `l`: sorted(l, key=lambda x: x.replace('0', 'Z'))<|endoftext|>"
2101,<|endoftext|>plot logarithmic axes with matplotlib: ax.set_yscale('log')<|endoftext|>
2102,"<|endoftext|>Access environment variable ""HOME"": os.environ['HOME']<|endoftext|>"
2103,"<|endoftext|>get value of environment variable ""HOME"": os.environ['HOME']<|endoftext|>"
2104,<|endoftext|>print all environment variables: print(os.environ)<|endoftext|>
2105,<|endoftext|>get all environment variables: os.environ<|endoftext|>
2106,<|endoftext|>get value of the environment variable 'KEY_THAT_MIGHT_EXIST': print(os.environ.get('KEY_THAT_MIGHT_EXIST'))<|endoftext|>
2107,"<|endoftext|>get value of the environment variable 'KEY_THAT_MIGHT_EXIST' with default value `default_value`: print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))<|endoftext|>"
2108,"<|endoftext|>get value of the environment variable 'HOME' with default value '/home/username/': print(os.environ.get('HOME', '/home/username/'))<|endoftext|>"
2109,<|endoftext|>create a dictionary containing each string in list `my_list` split by '=' as a key/value pairs: print(dict([s.split('=') for s in my_list]))<|endoftext|>
2110,"<|endoftext|>find the index of element closest to number 11.5 in list `a`: min(enumerate(a), key=lambda x: abs(x[1] - 11.5))<|endoftext|>"
2111,"<|endoftext|>find element `a` that contains string ""TEXT A"" in file `root`: e = root.xpath('.//a[contains(text(),""TEXT A"")]')<|endoftext|>"
2112,"<|endoftext|>Find the`a` tag in html `root` which starts with the text `TEXT A`  and assign it to `e`: e = root.xpath('.//a[starts-with(text(),""TEXT A"")]')<|endoftext|>"
2113,"<|endoftext|>find the element that holds string 'TEXT A' in file `root`: e = root.xpath('.//a[text()=""TEXT A""]')<|endoftext|>"
2114,<|endoftext|>create list `c` containing items from list `b` whose index is in list `index`: c = [b[i] for i in index]<|endoftext|>
2115,"<|endoftext|>get the dot product of two one dimensional numpy arrays: np.dot(a[:, (None)], b[(None), :])<|endoftext|>"
2116,"<|endoftext|>multiplication of two 1-dimensional arrays  in numpy: np.outer(a, b)<|endoftext|>"
2117,"<|endoftext|>execute a file './abc.py' with arguments `arg1` and `arg2` in python shell: subprocess.call(['./abc.py', arg1, arg2])<|endoftext|>"
2118,<|endoftext|>Replace NaN values in  column 'value' with the mean of data in column 'group' of dataframe `df`: df[['value']].fillna(df.groupby('group').transform('mean'))<|endoftext|>
2119,"<|endoftext|>separate each character in string `s` by '-': re.sub('(.)(?=.)', '\\1-', s)<|endoftext|>"
2120,"<|endoftext|>concatenate '-' in between characters of string `str`: re.sub('(?<=.)(?=.)', '-', str)<|endoftext|>"
2121,"<|endoftext|>get the indexes of the x and y axes in Numpy array `np` where variable `a` is equal to variable `value`: i, j = np.where(a == value)<|endoftext|>"
2122,<|endoftext|>print letter that appears most frequently in string `s`: print(collections.Counter(s).most_common(1)[0])<|endoftext|>
2123,"<|endoftext|>find float number proceeding sub-string `par` in string `dir`: float(re.findall('(?:^|_)' + par + '(\\d+\\.\\d*)', dir)[0])<|endoftext|>"
2124,"<|endoftext|>Get all the matches from a string `abcd` if it begins with a character `a`: re.findall('[^a]', 'abcd')<|endoftext|>"
2125,<|endoftext|>get a list of variables from module 'adfix.py' in current module.: print([item for item in dir(adfix) if not item.startswith('__')])<|endoftext|>
2126,<|endoftext|>get the first element of each tuple in a list `rows`: [x[0] for x in rows]<|endoftext|>
2127,<|endoftext|>get a list `res_list` of the first elements of each tuple in a list of tuples `rows`: res_list = [x[0] for x in rows]<|endoftext|>
2128,"<|endoftext|>duplicate data in pandas dataframe `x` for 5 times: pd.concat([x] * 5, ignore_index=True)<|endoftext|>"
2129,<|endoftext|>Get a repeated pandas data frame object `x` by `5` times: pd.concat([x] * 5)<|endoftext|>
2130,"<|endoftext|>sort json `ips_data` by a key 'data_two': sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])<|endoftext|>"
2131,<|endoftext|>read json `elevations` to pandas dataframe `df`: pd.read_json(elevations)<|endoftext|>
2132,"<|endoftext|>generate a random number in 1 to 7 with a given distribution [0.1, 0.05, 0.05, 0.2, 0.4, 0.2]: numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])<|endoftext|>"
2133,<|endoftext|>Return rows of data associated with the maximum value of column 'Value' in dataframe `df`: df.loc[df['Value'].idxmax()]<|endoftext|>
2134,"<|endoftext|>find recurring patterns in a string '42344343434': re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]<|endoftext|>"
2135,"<|endoftext|>convert binary string '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@' to numpy array: np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')<|endoftext|>"
2136,"<|endoftext|>convert binary string to numpy array: np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='>f4')<|endoftext|>"
2137,"<|endoftext|>insert variables `(var1, var2, var3)` into sql statement 'INSERT INTO table VALUES (?, ?, ?)': cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))<|endoftext|>"
2138,"<|endoftext|>Execute a sql statement using variables `var1`, `var2` and `var3`: cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))<|endoftext|>"
2140,"<|endoftext|>pandas split strings in column 'stats' by ',' into columns in dataframe `df`: df['stats'].str[1:-1].str.split(',', expand=True).astype(float)<|endoftext|>"
2141,"<|endoftext|>split string in column 'stats' by ',' into separate columns in dataframe `df`: df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)<|endoftext|>"
2142,<|endoftext|>Unpack column 'stats' in dataframe `df` into a series of columns: df['stats'].apply(pd.Series)<|endoftext|>
2143,<|endoftext|>wait for shell command `p` evoked by  subprocess.Popen to complete: p.wait()<|endoftext|>
2144,<|endoftext|>encode string `s` to utf-8 code: s.encode('utf8')<|endoftext|>
2145,"<|endoftext|>parse string '01-Jan-1995' into a datetime object using format '%d-%b-%Y': datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')<|endoftext|>"
2146,"<|endoftext|>copy a file from `src` to `dst`: copyfile(src, dst)<|endoftext|>"
2147,"<|endoftext|>copy file ""/dir/file.ext"" to ""/new/dir/newname.ext"": shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')<|endoftext|>"
2148,"<|endoftext|>copy file '/dir/file.ext' to '/new/dir': shutil.copy2('/dir/file.ext', '/new/dir')<|endoftext|>"
2149,"<|endoftext|>print a list of integers `list_of_ints` using string formatting: print(', '.join(str(x) for x in list_of_ints))<|endoftext|>"
2150,"<|endoftext|>multiply column 'A' and column 'B' by column 'C' in datafram `df`: df[['A', 'B']].multiply(df['C'], axis='index')<|endoftext|>"
2151,<|endoftext|>convert string 'a' to hex: hex(ord('a'))<|endoftext|>
2152,"<|endoftext|>Get the sum of values to the power of their indices in a list `l`: sum(j ** i for i, j in enumerate(l, 1))<|endoftext|>"
2153,"<|endoftext|>remove extra white spaces & tabs from a string `s`: """""" """""".join(s.split())<|endoftext|>"
2154,"<|endoftext|>replace comma in string `s` with empty string '': s = s.replace(',', '')<|endoftext|>"
2155,"<|endoftext|>Resample dataframe `frame` to resolution of 1 hour `1H` for timeseries index, summing values in the column `radiation` averaging those in column `tamb`: frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})<|endoftext|>"
2157,"<|endoftext|>create a pandas dataframe `df` from elements of a dictionary `nvalues`: df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})<|endoftext|>"
2158,<|endoftext|>Flask get value of request variable 'firstname': first_name = request.args.get('firstname')<|endoftext|>
2159,<|endoftext|>Flask get posted form data 'firstname': first_name = request.form.get('firstname')<|endoftext|>
2160,<|endoftext|>get a list of substrings consisting of the first 5 characters of every string in list `buckets`: [s[:5] for s in buckets]<|endoftext|>
2161,"<|endoftext|>sort list `the_list` by the length of string followed by alphabetical order: the_list.sort(key=lambda item: (-len(item), item))<|endoftext|>"
2162,<|endoftext|>Set index equal to field 'TRX_DATE' in dataframe `df`: df = df.set_index(['TRX_DATE'])<|endoftext|>
2163,<|endoftext|>List comprehension with an accumulator in range of 10: list(accumulate(list(range(10))))<|endoftext|>
2164,"<|endoftext|>How to convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%m/%d/%y': datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')<|endoftext|>"
2165,"<|endoftext|>convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%-m/%d/%y': datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')<|endoftext|>"
2166,"<|endoftext|>get a dataframe `df2` that contains all the columns of dataframe `df` that do not end in `prefix`: df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]<|endoftext|>"
2167,<|endoftext|>create list `new_list` containing the last 10 elements of list `my_list`: new_list = my_list[-10:]<|endoftext|>
2168,<|endoftext|>get the last 10 elements from a list `my_list`: my_list[-10:]<|endoftext|>
2169,<|endoftext|>convert matlab engine array `x` to a numpy ndarray: np.array(x._data).reshape(x.size[::-1]).T<|endoftext|>
2170,"<|endoftext|>select the first row grouped per level 0 of dataframe `df`: df.groupby(level=0, as_index=False).nth(0)<|endoftext|>"
2171,"<|endoftext|>concatenate sequence of numpy arrays  `LIST` into a one dimensional array along the first axis: numpy.concatenate(LIST, axis=0)<|endoftext|>"
2172,"<|endoftext|>convert and escape string ""\\xc3\\x85あ"" to UTF-8 code: """"""\\xc3\\x85あ"""""".encode('utf-8').decode('unicode_escape')<|endoftext|>"
2173,"<|endoftext|>encode string ""\\xc3\\x85あ"" to bytes: """"""\\xc3\\x85あ"""""".encode('utf-8')<|endoftext|>"
2174,"<|endoftext|>interleave the elements of two lists `a` and `b`: [j for i in zip(a, b) for j in i]<|endoftext|>"
2175,"<|endoftext|>merge two lists `a` and `b` into a single list: [j for i in zip(a, b) for j in i]<|endoftext|>"
2176,"<|endoftext|>delete all occureces of `8` in each string `s` in list `lst`: print([s.replace('8', '') for s in lst])<|endoftext|>"
2177,"<|endoftext|>Split string `Hello` into a string of letters seperated by `,`: """""","""""".join('Hello')<|endoftext|>"
2178,"<|endoftext|>in Django, select 100 random records from the database `Content.objects`: Content.objects.all().order_by('?')[:100]<|endoftext|>"
2179,"<|endoftext|>create a NumPy array containing elements of array `A` as pointed to by index in array `B`: A[np.arange(A.shape[0])[:, (None)], B]<|endoftext|>"
2180,"<|endoftext|>pivot dataframe `df` so that values for `upc` become column headings and values for `saleid` become the index: df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)<|endoftext|>"
2181,"<|endoftext|>match zero-or-more instances of lower case alphabet characters in a string `f233op `: re.findall('([a-z]*)', 'f233op')<|endoftext|>"
2182,"<|endoftext|>match zero-or-more instances of lower case alphabet characters in a string `f233op `: re.findall('([a-z])*', 'f233op')<|endoftext|>"
2183,"<|endoftext|>split string 'happy_hats_for_cats' using string '_for_': re.split('_for_', 'happy_hats_for_cats')<|endoftext|>"
2184,"<|endoftext|>Split string 'sad_pandas_and_happy_cats_for_people' based on string 'and', 'or' or 'for': re.split('_(?:for|or|and)_', 'sad_pandas_and_happy_cats_for_people')<|endoftext|>"
2185,"<|endoftext|>Split a string `l` by multiple words `for` or `or` or `and`: [re.split('_(?:f?or|and)_', s) for s in l]<|endoftext|>"
2186,"<|endoftext|>zip keys with individual values in lists `k` and `v`: [dict(zip(k, x)) for x in v]<|endoftext|>"
2187,"<|endoftext|>Sort a list 'lst' in descending order.: sorted(lst, reverse=True)<|endoftext|>"
2188,"<|endoftext|>sort array `order_array` based on column 'year', 'month' and 'day': order_array.sort(order=['year', 'month', 'day'])<|endoftext|>"
2189,"<|endoftext|>Sort a structured numpy array 'df' on multiple columns 'year', 'month' and 'day'.: df.sort(['year', 'month', 'day'])<|endoftext|>"
2190,"<|endoftext|>check if elements in list `my_list` are coherent in order: return my_list == list(range(my_list[0], my_list[-1] + 1))<|endoftext|>"
2191,<|endoftext|>group rows of pandas dataframe `df` with same 'id': df.groupby('id').agg(lambda x: x.tolist())<|endoftext|>
2192,<|endoftext|>encode `u'X\xc3\xbcY\xc3\x9f'` as unicode and decode with utf-8: 'X\xc3\xbcY\xc3\x9f'.encode('raw_unicode_escape').decode('utf-8')<|endoftext|>
2193,<|endoftext|>parse string `a` to float: float(a)<|endoftext|>
2194,"<|endoftext|>Parse String `s` to Float or Int: try:
    return int(s)
except ValueError:
    return float(s)<|endoftext|>"
2195,"<|endoftext|>check if object `a` has property 'property': if hasattr(a, 'property'):
    pass<|endoftext|>"
2196,"<|endoftext|>check if object `a` has property 'property': if hasattr(a, 'property'):
    pass<|endoftext|>"
2197,"<|endoftext|>get the value of attribute 'property' of object `a` with default value 'default value': getattr(a, 'property', 'default value')<|endoftext|>"
2198,"<|endoftext|>delete every 8th column in a numpy array 'a'.: np.delete(a, list(range(0, a.shape[1], 8)), axis=1)<|endoftext|>"
2199,<|endoftext|>convert `ms` milliseconds to a datetime object: datetime.datetime.fromtimestamp(ms / 1000.0)<|endoftext|>
2200,"<|endoftext|>find the magnitude (length) squared of a vector `vf` field: np.einsum('...j,...j->...', vf, vf)<|endoftext|>"
2201,<|endoftext|>request http url `url`: r = requests.get(url)<|endoftext|>
2202,"<|endoftext|>request http url `url` with parameters `payload`: r = requests.get(url, params=payload)<|endoftext|>"
2203,"<|endoftext|>post request url `url` with parameters `payload`: r = requests.post(url, data=payload)<|endoftext|>"
2204,"<|endoftext|>make an HTTP post request with data `post_data`: post_response = requests.post(url='http://httpbin.org/post', json=post_data)<|endoftext|>"
2205,<|endoftext|>django jinja slice list `mylist` by '3:8': {{(mylist | slice): '3:8'}}<|endoftext|>
2206,"<|endoftext|>create dataframe `df` with content of hdf store file '/home/.../data.h5' with key of 'firstSet': df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')<|endoftext|>"
2207,<|endoftext|>get the largest index of the last occurrence of characters '([{' in string `test_string`: max(test_string.rfind(i) for i in '([{')<|endoftext|>
2208,<|endoftext|>print 'here is your checkmark: ' plus unicode character u'\u2713': print('here is your checkmark: ' + '\u2713')<|endoftext|>
2209,<|endoftext|>print unicode characters in a string `\u0420\u043e\u0441\u0441\u0438\u044f`: print('\u0420\u043e\u0441\u0441\u0438\u044f')<|endoftext|>
2210,<|endoftext|>pads string '5' on the left with 1 zero: print('{0}'.format('5'.zfill(2)))<|endoftext|>
2211,<|endoftext|>Remove duplicates elements from list `sequences` and sort it in ascending order: sorted(set(itertools.chain.from_iterable(sequences)))<|endoftext|>
2212,<|endoftext|>pandas dataframe `df` column 'a' to list: df['a'].values.tolist()<|endoftext|>
2213,<|endoftext|>Get a list of all values in column `a` in pandas data frame `df`: df['a'].tolist()<|endoftext|>
2214,"<|endoftext|>escaping quotes in string: replace('""', '\\""')<|endoftext|>"
2215,<|endoftext|>check if all string elements in list `words` are upper-cased: print(all(word[0].isupper() for word in words))<|endoftext|>
2216,"<|endoftext|>remove items from dictionary `myDict` if the item's value `val` is equal to 42: myDict = {key: val for key, val in list(myDict.items()) if val != 42}<|endoftext|>"
2217,"<|endoftext|>Remove all items from a dictionary `myDict` whose values are `42`: {key: val for key, val in list(myDict.items()) if val != 42}<|endoftext|>"
2218,<|endoftext|>Determine the byte length of a utf-8 encoded string `s`: return len(s.encode('utf-8'))<|endoftext|>
2219,"<|endoftext|>kill a process with id `process.pid`: os.kill(process.pid, signal.SIGKILL)<|endoftext|>"
2220,<|endoftext|>get data of columns with Null values in dataframe `df`: df[pd.isnull(df).any(axis=1)]<|endoftext|>
2221,"<|endoftext|>strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end: url.split('&')[-1].replace('=', '') + '.html'<|endoftext|>"
2222,"<|endoftext|>Parse a file `sample.xml` using expat parsing in python 3: parser.ParseFile(open('sample.xml', 'rb'))<|endoftext|>"
2223,<|endoftext|>Exit script: sys.exit()<|endoftext|>
2224,"<|endoftext|>assign value in `group` dynamically to class property `attr`: setattr(self, attr, group)<|endoftext|>"
2225,<|endoftext|>decode url-encoded string `some_string` to its character equivalents: urllib.parse.unquote(urllib.parse.unquote(some_string))<|endoftext|>
2226,"<|endoftext|>decode a double URL encoded string 
'FireShot3%2B%25282%2529.png' to
'FireShot3+(2).png': urllib.parse.unquote(urllib.parse.unquote('FireShot3%2B%25282%2529.png'))<|endoftext|>"
2227,<|endoftext|>change flask security register url to `/create_account`: app.config['SECURITY_REGISTER_URL'] = '/create_account'<|endoftext|>
2228,"<|endoftext|>open a file `/home/user/test/wsservice/data.pkl` in binary write mode: output = open('/home/user/test/wsservice/data.pkl', 'wb')<|endoftext|>"
2229,<|endoftext|>remove the last element in list `a`: del a[(-1)]<|endoftext|>
2230,<|endoftext|>remove the element in list `a` with index 1: a.pop(1)<|endoftext|>
2231,<|endoftext|>remove the last element in list `a`: a.pop()<|endoftext|>
2232,<|endoftext|>remove the element in list `a` at index `index`: a.pop(index)<|endoftext|>
2233,<|endoftext|>remove the element in list `a` at index `index`: del a[index]<|endoftext|>
2234,<|endoftext|>print a celsius symbol on x axis of a plot `ax`: ax.set_xlabel('Temperature (\u2103)')<|endoftext|>
2235,<|endoftext|>Print a celsius symbol with matplotlib: ax.set_xlabel('Temperature ($^\\circ$C)')<|endoftext|>
2236,<|endoftext|>convert a list of lists `list_of_lists` into a list of strings keeping empty sub-lists as empty string '': [''.join(l) for l in list_of_lists]<|endoftext|>
2237,"<|endoftext|>get a list of all the duplicate items in dataframe `df` using pandas: pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)<|endoftext|>"
2238,"<|endoftext|>Delete third row in a numpy array `x`: x = numpy.delete(x, 2, axis=1)<|endoftext|>"
2239,"<|endoftext|>delete first row of array `x`: x = numpy.delete(x, 0, axis=0)<|endoftext|>"
2240,"<|endoftext|>merge rows from dataframe `df1` with rows from dataframe `df2` and calculate the mean for rows that have the same value of axis 1: pd.concat((df1, df2), axis=1).mean(axis=1)<|endoftext|>"
2241,"<|endoftext|>Get the average values from two numpy arrays `old_set` and `new_set`: np.mean(np.array([old_set, new_set]), axis=0)<|endoftext|>"
2242,"<|endoftext|>Matplotlib change marker size to 500: scatter(x, y, s=500, color='green', marker='h')<|endoftext|>"
2243,"<|endoftext|>Create new list `result` by splitting each item in list `words`: result = [item for word in words for item in word.split(',')]<|endoftext|>"
2244,"<|endoftext|>convert JSON string '2012-05-29T19:30:03.283Z' into a DateTime object using format '%Y-%m-%dT%H:%M:%S.%fZ': datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')<|endoftext|>"
2245,<|endoftext|>count `True` values associated with key 'one' in dictionary `tadas`: sum(item['one'] for item in list(tadas.values()))<|endoftext|>
2246,"<|endoftext|>encode a pdf file `pdf_reference.pdf` with `base64` encoding: a = open('pdf_reference.pdf', 'rb').read().encode('base64')<|endoftext|>"
2247,<|endoftext|>split string `a` using new-line character '\n' as separator: a.rstrip().split('\n')<|endoftext|>
2248,<|endoftext|>split a string `a` with new line character: a.split('\n')[:-1]<|endoftext|>
2249,<|endoftext|>return http status code 204 from a django view: return HttpResponse(status=204)<|endoftext|>
2250,<|endoftext|>check if 7 is in `a`: (7 in a)<|endoftext|>
2251,<|endoftext|>check if 'a' is in list `a`: ('a' in a)<|endoftext|>
2252,"<|endoftext|>sort list `results` by keys value 'year': sorted(results, key=itemgetter('year'))<|endoftext|>"
2253,<|endoftext|>get current url in selenium webdriver `browser`: print(browser.current_url)<|endoftext|>
2254,"<|endoftext|>split string `str` with delimiter '; ' or delimiter ', ': re.split('; |, ', str)<|endoftext|>"
2255,"<|endoftext|>un-escaping characters in a string with python: """"""\\u003Cp\\u003E"""""".decode('unicode-escape')<|endoftext|>"
2256,"<|endoftext|>convert date string `s` in format pattern '%d/%m/%Y' into a timestamp: time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())<|endoftext|>"
2257,"<|endoftext|>convert string '01/12/2011' to an integer timestamp: int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))<|endoftext|>"
2258,<|endoftext|>get http header of the key 'your-header-name' in flask: request.headers['your-header-name']<|endoftext|>
2259,<|endoftext|>select records of dataframe `df` where the sum of column 'X' for each value in column 'User' is 0: df.groupby('User')['X'].filter(lambda x: x.sum() == 0)<|endoftext|>
2260,<|endoftext|>Get data of dataframe `df` where the sum of column 'X' grouped by column 'User' is equal to 0: df.loc[df.groupby('User')['X'].transform(sum) == 0]<|endoftext|>
2261,<|endoftext|>Get data from dataframe `df` where column 'X' is equal to 0: df.groupby('User')['X'].transform(sum) == 0<|endoftext|>
2263,"<|endoftext|>convert pandas group by object to multi-indexed dataframe with indices 'Name' and 'Destination': df.set_index(['Name', 'Destination'])<|endoftext|>"
2264,"<|endoftext|>coalesce non-word-characters in string `a`: print(re.sub('(\\W)\\1+', '\\1', a))<|endoftext|>"
2265,"<|endoftext|>open a file ""$file"" under Unix: os.system('start ""$file""')<|endoftext|>"
2266,"<|endoftext|>Convert a Unicode string `title` to a 'ascii' string: unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')<|endoftext|>"
2267,"<|endoftext|>Convert a Unicode string `a` to a 'ascii' string: a.encode('ascii', 'ignore')<|endoftext|>"
2268,"<|endoftext|>create a list `files` containing all files in directory '.' that starts with numbers between 0 and 9 and ends with the extension '.jpg': files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\.jpg', f)]<|endoftext|>"
2269,"<|endoftext|>adding a 1-d array `[1, 2, 3, 4, 5, 6, 7, 8, 9]` to a 3-d array `np.zeros((6, 9, 20))`: np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]<|endoftext|>"
2270,"<|endoftext|>add array of shape `(6, 9, 20)` to array `[1, 2, 3, 4, 5, 6, 7, 8, 9]`: np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))<|endoftext|>"
2272,"<|endoftext|>get the list with the highest sum value in list `x`: print(max(x, key=sum))<|endoftext|>"
2273,<|endoftext|>sum the length of lists in list `x` that are more than 1 item in length: sum(len(y) for y in x if len(y) > 1)<|endoftext|>
2274,"<|endoftext|>Enclose numbers in quotes in a string `This is number 1 and this is number 22`: re.sub('(\\d+)', '""\\1""', 'This is number 1 and this is number 22')<|endoftext|>"
2275,"<|endoftext|>multiply the columns of sparse matrix `m` by array `a` then multiply the rows of the resulting matrix by array `a`: numpy.dot(numpy.dot(a, m), a)<|endoftext|>"
2276,"<|endoftext|>Django check if an object with criteria `name` equal to 'name' and criteria `title` equal to 'title' exists in model `Entry`: Entry.objects.filter(name='name', title='title').exists()<|endoftext|>"
2277,"<|endoftext|>sort a nested list by the inverse of element 2, then by element 1: sorted(l, key=lambda x: (-int(x[1]), x[0]))<|endoftext|>"
2278,<|endoftext|>get domain/host name from request object in Django: request.META['HTTP_HOST']<|endoftext|>
2279,"<|endoftext|>get a string `randomkey123xyz987` between two substrings in a string `api('randomkey123xyz987', 'key', 'text')` using regex: re.findall(""api\\('(.*?)'"", ""api('randomkey123xyz987', 'key', 'text')"")<|endoftext|>"
2280,"<|endoftext|>invoke perl script './uireplace.pl' using perl interpeter '/usr/bin/perl' and send argument `var` to it: subprocess.call(['/usr/bin/perl', './uireplace.pl', var])<|endoftext|>"
2281,<|endoftext|>print list of items `myList`: print('\n'.join(str(p) for p in myList))<|endoftext|>
2282,<|endoftext|>update the dictionary `mydic` with dynamic keys `i` and values with key 'name' from dictionary `o`: mydic.update({i: o['name']})<|endoftext|>
2283,<|endoftext|>split a `utf-8` encoded string `stru` into a list of characters: list(stru.decode('utf-8'))<|endoftext|>
2284,<|endoftext|>convert utf-8 with bom string `s` to utf-8 with no bom `u`: u = s.decode('utf-8-sig')<|endoftext|>
2285,<|endoftext|>Filter model 'Entry' where 'id' is not equal to 3 in Django: Entry.objects.filter(~Q(id=3))<|endoftext|>
2286,"<|endoftext|>lookup an attribute in any scope by name 'range': getattr(__builtins__, 'range')<|endoftext|>"
2287,"<|endoftext|>restart a computer after `900` seconds using subprocess: subprocess.call(['shutdown', '/r', '/t', '900'])<|endoftext|>"
2288,"<|endoftext|>shutdown a computer using subprocess: subprocess.call(['shutdown', '/s'])<|endoftext|>"
2289,"<|endoftext|>abort a computer shutdown using subprocess: subprocess.call(['shutdown', '/a '])<|endoftext|>"
2290,"<|endoftext|>logoff computer having windows operating system using python: subprocess.call(['shutdown', '/l '])<|endoftext|>"
2291,"<|endoftext|>shutdown and restart a computer running windows from script: subprocess.call(['shutdown', '/r'])<|endoftext|>"
2292,"<|endoftext|>erase the contents of a file `filename`: open('filename', 'w').close()<|endoftext|>"
2294,<|endoftext|>convert dataframe `df` to list of dictionaries including the index values: df.to_dict('index')<|endoftext|>
2295,<|endoftext|>Create list of dictionaries from pandas dataframe `df`: df.to_dict('records')<|endoftext|>
2296,<|endoftext|>Group a pandas data frame by monthly frequenct `M` using groupby: df.groupby(pd.TimeGrouper(freq='M'))<|endoftext|>
2297,"<|endoftext|>divide the members of a list `conversions` by the corresponding members of another list `trials`: [(c / t) for c, t in zip(conversions, trials)]<|endoftext|>"
2298,"<|endoftext|>sort dict `data` by value: sorted(data, key=data.get)<|endoftext|>"
2299,<|endoftext|>Sort a dictionary `data` by its values: sorted(data.values())<|endoftext|>
2300,"<|endoftext|>Get a list of pairs of key-value sorted by values in dictionary `data`: sorted(list(data.items()), key=lambda x: x[1])<|endoftext|>"
2302,<|endoftext|>display current time: now = datetime.datetime.now().strftime('%H:%M:%S')<|endoftext|>
2303,"<|endoftext|>find the index of the second occurrence of the substring `bar` in string `foo bar bar bar`: """"""foo bar bar bar"""""".replace('bar', 'XXX', 1).find('bar')<|endoftext|>"
2304,"<|endoftext|>check if key 'stackoverflow' and key 'google' are presented in dictionary `sites`: set(['stackoverflow', 'google']).issubset(sites)<|endoftext|>"
2305,"<|endoftext|>replace string ' and ' in string `stuff` with character '/': stuff.replace(' and ', '/')<|endoftext|>"
2306,"<|endoftext|>Save array at index 0, index 1 and index 8 of array `np` to tmp file `tmp`: np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])<|endoftext|>"
2307,"<|endoftext|>substract 1 hour and 10 minutes from current time: t = datetime.datetime.now()
(t - datetime.timedelta(hours=1, minutes=10))<|endoftext|>"
2308,"<|endoftext|>subtract 1 hour and 10 minutes from time object `t`: (t - datetime.timedelta(hours=1, minutes=10))<|endoftext|>"
2309,"<|endoftext|>add 1 hour and 2 minutes to time object `t`: dt = datetime.datetime.combine(datetime.date.today(), t)<|endoftext|>"
2310,<|endoftext|>subtract 5 hours from the time object `dt`: dt -= datetime.timedelta(hours=5)<|endoftext|>
2311,<|endoftext|>encode string `data` using hex 'hex' encoding: print(data.encode('hex'))<|endoftext|>
2312,<|endoftext|>Return the decimal value for each hex character in data `data`: print(' '.join([str(ord(a)) for a in data]))<|endoftext|>
2313,<|endoftext|>Get all the items from a list of tuple 'l' where second item in tuple is '1'.: [x for x in l if x[1] == 1]<|endoftext|>
2314,<|endoftext|>Create array `a` containing integers from stdin: a.fromlist([int(val) for val in stdin.read().split()])<|endoftext|>
2315,"<|endoftext|>place '\' infront of each non-letter char in string `line`: print(re.sub('[_%^$]', '\\\\\\g<0>', line))<|endoftext|>"
2316,"<|endoftext|>Get all `a` tags where the text starts with value `some text` using regex: doc.xpath(""//a[starts-with(text(),'some text')]"")<|endoftext|>"
2317,<|endoftext|>convert a list of lists `a` into list of tuples of appropriate elements form nested lists: zip(*a)<|endoftext|>
2318,"<|endoftext|>convert a list of strings `lst` to list of integers: [map(int, sublist) for sublist in lst]<|endoftext|>"
2319,<|endoftext|>convert strings in list-of-lists `lst` to ints: [[int(x) for x in sublist] for sublist in lst]<|endoftext|>
2320,"<|endoftext|>get index of elements in array `A` that occur in another array `B`: np.where(np.in1d(A, B))[0]<|endoftext|>"
2321,"<|endoftext|>create a list where each element is a dictionary with keys 'key1' and 'key2' and values corresponding to each value in the lists referenced by keys 'key1' and 'key2' in dictionary `d`: [{'key1': a, 'key2': b} for a, b in zip(d['key1'], d['key2'])]<|endoftext|>"
2323,"<|endoftext|>Get Last Day of the first month in 2002: calendar.monthrange(2002, 1)<|endoftext|>"
2324,"<|endoftext|>Get Last Day of the second month in 2002: calendar.monthrange(2008, 2)<|endoftext|>"
2325,"<|endoftext|>Get Last Day of the second month in 2100: calendar.monthrange(2100, 2)<|endoftext|>"
2326,"<|endoftext|>Get Last Day of the month `month` in year `year`: calendar.monthrange(year, month)[1]<|endoftext|>"
2327,"<|endoftext|>Get Last Day of the second month in year 2012: monthrange(2012, 2)<|endoftext|>"
2328,"<|endoftext|>Get Last Day of the first month in year 2000: (datetime.date(2000, 2, 1) - datetime.timedelta(days=1))<|endoftext|>"
2329,"<|endoftext|>Calling an external command ""ls -l"": from subprocess import call<|endoftext|>"
2330,"<|endoftext|>Calling an external command ""some_command with args"": os.system('some_command with args')<|endoftext|>"
2331,"<|endoftext|>Calling an external command ""some_command < input_file | another_command > output_file"": os.system('some_command < input_file | another_command > output_file')<|endoftext|>"
2332,"<|endoftext|>Calling an external command ""some_command with args"": stream = os.popen('some_command with args')<|endoftext|>"
2333,"<|endoftext|>Calling an external command ""echo Hello World"": print(subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read())<|endoftext|>"
2334,"<|endoftext|>Calling an external command ""echo Hello World"": print(os.popen('echo Hello World').read())<|endoftext|>"
2335,"<|endoftext|>Calling an external command ""echo Hello World"": return_code = subprocess.call('echo Hello World', shell=True)<|endoftext|>"
2336,"<|endoftext|>Calling an external command ""ls"": p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for line in p.stdout.readlines():
    print(line, end=' ')
retval = p.wait()<|endoftext|>"
2337,"<|endoftext|>Calling an external command ""ls -l"": call(['ls', '-l'])<|endoftext|>"
2338,<|endoftext|>decode url `url` with utf8 and print it: print(urllib.parse.unquote(url).decode('utf8'))<|endoftext|>
2339,<|endoftext|>decode a urllib escaped url string `url` with `utf8`: url = urllib.parse.unquote(url).decode('utf8')<|endoftext|>
2340,"<|endoftext|>delete letters from string '12454v': """""""""""".join(filter(str.isdigit, '12454v'))<|endoftext|>"
2341,<|endoftext|>Update row values for a column `Season` using vectorized string operation in pandas: df['Season'].str.split('-').str[0].astype(int)<|endoftext|>
2342,<|endoftext|>sort a list of tuples `my_list` by second parameter in the tuple: my_list.sort(key=lambda x: x[1])<|endoftext|>
2343,"<|endoftext|>find indexes of all occurrences of a substring `tt` in a string `ttt`: [m.start() for m in re.finditer('(?=tt)', 'ttt')]<|endoftext|>"
2344,"<|endoftext|>find all occurrences of a substring in a string: [m.start() for m in re.finditer('test', 'test test test test')]<|endoftext|>"
2345,"<|endoftext|>split string `s` based on white spaces: re.findall('\\s+|\\S+', s)<|endoftext|>"
2346,"<|endoftext|>set columns `['race_date', 'track_code', 'race_number']` as indexes in dataframe `rdata`: rdata.set_index(['race_date', 'track_code', 'race_number'])<|endoftext|>"
2347,"<|endoftext|>recursively go through all subdirectories and files in `rootdir`: for (root, subFolders, files) in os.walk(rootdir):
    pass<|endoftext|>"
2348,"<|endoftext|>sort a list of dictionary values by 'date' in reverse order: list.sort(key=lambda item: item['date'], reverse=True)<|endoftext|>"
2349,"<|endoftext|>display first 5 characters of string 'aaabbbccc': """"""{:.5}"""""".format('aaabbbccc')<|endoftext|>"
2350,"<|endoftext|>unpack hexadecimal string `s` to a list of integer values: struct.unpack('11B', s)<|endoftext|>"
2351,"<|endoftext|>finding the index of an item 'foo' given a list `['foo', 'bar', 'baz']` containing it: [i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']<|endoftext|>"
2352,"<|endoftext|>generate all permutations of list `[1, 2, 3]` and list `[4, 5, 6]`: print(list(itertools.product([1, 2, 3], [4, 5, 6])))<|endoftext|>"
2353,"<|endoftext|>generate all permutations of a list `[1, 2, 3]`: itertools.permutations([1, 2, 3])<|endoftext|>"
2354,"<|endoftext|>substitute occurrences of unicode regex pattern u'\\p{P}+' with empty string '' in string `text`: return re.sub('\\p{P}+', '', text)<|endoftext|>"
2355,<|endoftext|>manually throw/raise a `ValueError` exception with the message 'A very specific bad thing happened': raise ValueError('A very specific bad thing happened')<|endoftext|>
2356,"<|endoftext|>throw an exception ""I know Python!"": raise Exception('I know Python!')<|endoftext|>"
2357,"<|endoftext|>Manually throw an exception ""I know python!"": raise Exception('I know python!')<|endoftext|>"
2358,"<|endoftext|>throw a ValueError with message 'represents a hidden bug, do not catch this': raise ValueError('represents a hidden bug, do not catch this')<|endoftext|>"
2359,<|endoftext|>throw an Exception with message 'This is the exception you expect to handle': raise Exception('This is the exception you expect to handle')<|endoftext|>
2360,"<|endoftext|>throw a value error with message 'A very specific bad thing happened', 'foo', 'bar', 'baz': raise ValueError('A very specific bad thing happened')<|endoftext|>"
2361,<|endoftext|>throw a runtime error with message 'specific message': raise RuntimeError('specific message')<|endoftext|>
2362,"<|endoftext|>throw an assertion error with message ""Unexpected value of 'distance'!"", distance: raise AssertionError(""Unexpected value of 'distance'!"", distance)<|endoftext|>"
2363,"<|endoftext|>if Selenium textarea element `foo` is not empty, clear the field: driver.find_element_by_id('foo').clear()<|endoftext|>"
2364,<|endoftext|>clear text from textarea 'foo' with selenium: driver.find_element_by_id('foo').clear()<|endoftext|>
2365,"<|endoftext|>convert a number 2130706433 to ip string: socket.inet_ntoa(struct.pack('!L', 2130706433))<|endoftext|>"
2366,"<|endoftext|>Rearrange the columns 'a','b','x','y' of pandas DataFrame `df` in mentioned sequence 'x' ,'y','a' ,'b': df = df[['x', 'y', 'a', 'b']]<|endoftext|>"
2367,"<|endoftext|>call base class's __init__ method from the child class `ChildClass`: super(ChildClass, self).__init__(*args, **kwargs)<|endoftext|>"
2368,<|endoftext|>sum of all values in a python dict `d`: sum(d.values())<|endoftext|>
2370,"<|endoftext|>convert python dictionary `your_data` to json array: json.dumps(your_data, ensure_ascii=False)<|endoftext|>"
2371,"<|endoftext|>assign an array of floats in range from 0 to 100 to a variable `values`: values = np.array([i for i in range(100)], dtype=np.float64)<|endoftext|>"
2372,"<|endoftext|>sort a list of dictionaries `list_of_dct` by values in an order `order`: sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))<|endoftext|>"
2373,<|endoftext|>change the case of the first letter in string `s`: return s[0].upper() + s[1:]<|endoftext|>
2374,"<|endoftext|>join list of numbers `[1,2,3,4] ` to string of numbers.: """""""""""".join([1, 2, 3, 4])<|endoftext|>"
2375,"<|endoftext|>delete every non `utf-8` characters from a string `line`: line = line.decode('utf-8', 'ignore').encode('utf-8')<|endoftext|>"
2376,<|endoftext|>execute a command `command ` in the terminal from a python script: os.system(command)<|endoftext|>
2377,"<|endoftext|>MySQL execute query 'SELECT * FROM foo WHERE bar = %s AND baz = %s' with parameters `param1` and `param2`: c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))<|endoftext|>"
2378,"<|endoftext|>Parse string `datestr` into a datetime object using format pattern '%Y-%m-%d': dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()<|endoftext|>"
